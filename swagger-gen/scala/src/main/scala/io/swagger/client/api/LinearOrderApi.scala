/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.Number
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class LinearOrderApi(
  val defBasePath: String = "https://api.bybit.com",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new LinearOrderApiAsyncHelper(client, config)

  /**
   * Cancel Active Order
   * This will cancel linear active order
   *
   * @param orderId  (optional)
   * @param orderLinkId  (optional)
   * @param symbol  (optional)
   * @return Any
   */
  def linearOrderCancel(orderId: Option[String] = None, orderLinkId: Option[String] = None, symbol: Option[String] = None): Option[Any] = {
    val await = Try(Await.result(linearOrderCancelAsync(orderId, orderLinkId, symbol), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Cancel Active Order asynchronously
   * This will cancel linear active order
   *
   * @param orderId  (optional)
   * @param orderLinkId  (optional)
   * @param symbol  (optional)
   * @return Future(Any)
   */
  def linearOrderCancelAsync(orderId: Option[String] = None, orderLinkId: Option[String] = None, symbol: Option[String] = None): Future[Any] = {
      helper.linearOrderCancel(orderId, orderLinkId, symbol)
  }

  /**
   * Cancel all active orders.
   * 
   *
   * @param symbol Contract type. 
   * @return Any
   */
  def linearOrderCancelAll(symbol: String): Option[Any] = {
    val await = Try(Await.result(linearOrderCancelAllAsync(symbol), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Cancel all active orders. asynchronously
   * 
   *
   * @param symbol Contract type. 
   * @return Future(Any)
   */
  def linearOrderCancelAllAsync(symbol: String): Future[Any] = {
      helper.linearOrderCancelAll(symbol)
  }

  /**
   * Get linear Active Orders
   * This will get linear active orders
   *
   * @param orderId  (optional)
   * @param orderLinkId  (optional)
   * @param symbol  (optional)
   * @param order  (optional)
   * @param page  (optional)
   * @param limit  (optional)
   * @param orderStatus  (optional)
   * @return Any
   */
  def linearOrderGetOrders(orderId: Option[String] = None, orderLinkId: Option[String] = None, symbol: Option[String] = None, order: Option[String] = None, page: Option[String] = None, limit: Option[String] = None, orderStatus: Option[String] = None): Option[Any] = {
    val await = Try(Await.result(linearOrderGetOrdersAsync(orderId, orderLinkId, symbol, order, page, limit, orderStatus), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get linear Active Orders asynchronously
   * This will get linear active orders
   *
   * @param orderId  (optional)
   * @param orderLinkId  (optional)
   * @param symbol  (optional)
   * @param order  (optional)
   * @param page  (optional)
   * @param limit  (optional)
   * @param orderStatus  (optional)
   * @return Future(Any)
   */
  def linearOrderGetOrdersAsync(orderId: Option[String] = None, orderLinkId: Option[String] = None, symbol: Option[String] = None, order: Option[String] = None, page: Option[String] = None, limit: Option[String] = None, orderStatus: Option[String] = None): Future[Any] = {
      helper.linearOrderGetOrders(orderId, orderLinkId, symbol, order, page, limit, orderStatus)
  }

  /**
   * Create Active Order
   * This will create linear order
   *
   * @param symbol  (optional)
   * @param side  (optional)
   * @param orderType  (optional)
   * @param timeInForce  (optional)
   * @param qty  (optional)
   * @param price  (optional)
   * @param takeProfit  (optional)
   * @param stopLoss  (optional)
   * @param reduceOnly  (optional)
   * @param tpTriggerBy  (optional)
   * @param slTriggerBy  (optional)
   * @param closeOnTrigger  (optional)
   * @param orderLinkId  (optional)
   * @return Any
   */
  def linearOrderNew(symbol: Option[String] = None, side: Option[String] = None, orderType: Option[String] = None, timeInForce: Option[String] = None, qty: Option[Double] = None, price: Option[Double] = None, takeProfit: Option[Double] = None, stopLoss: Option[Double] = None, reduceOnly: Option[Boolean] = None, tpTriggerBy: Option[String] = None, slTriggerBy: Option[String] = None, closeOnTrigger: Option[Boolean] = None, orderLinkId: Option[String] = None): Option[Any] = {
    val await = Try(Await.result(linearOrderNewAsync(symbol, side, orderType, timeInForce, qty, price, takeProfit, stopLoss, reduceOnly, tpTriggerBy, slTriggerBy, closeOnTrigger, orderLinkId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create Active Order asynchronously
   * This will create linear order
   *
   * @param symbol  (optional)
   * @param side  (optional)
   * @param orderType  (optional)
   * @param timeInForce  (optional)
   * @param qty  (optional)
   * @param price  (optional)
   * @param takeProfit  (optional)
   * @param stopLoss  (optional)
   * @param reduceOnly  (optional)
   * @param tpTriggerBy  (optional)
   * @param slTriggerBy  (optional)
   * @param closeOnTrigger  (optional)
   * @param orderLinkId  (optional)
   * @return Future(Any)
   */
  def linearOrderNewAsync(symbol: Option[String] = None, side: Option[String] = None, orderType: Option[String] = None, timeInForce: Option[String] = None, qty: Option[Double] = None, price: Option[Double] = None, takeProfit: Option[Double] = None, stopLoss: Option[Double] = None, reduceOnly: Option[Boolean] = None, tpTriggerBy: Option[String] = None, slTriggerBy: Option[String] = None, closeOnTrigger: Option[Boolean] = None, orderLinkId: Option[String] = None): Future[Any] = {
      helper.linearOrderNew(symbol, side, orderType, timeInForce, qty, price, takeProfit, stopLoss, reduceOnly, tpTriggerBy, slTriggerBy, closeOnTrigger, orderLinkId)
  }

  /**
   * Get Active Orders(real-time)
   * This will get linear active orders(real-time)
   *
   * @param symbol  (optional)
   * @param orderId  (optional)
   * @param orderLinkId  (optional)
   * @return Any
   */
  def linearOrderQuery(symbol: Option[String] = None, orderId: Option[String] = None, orderLinkId: Option[String] = None): Option[Any] = {
    val await = Try(Await.result(linearOrderQueryAsync(symbol, orderId, orderLinkId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Active Orders(real-time) asynchronously
   * This will get linear active orders(real-time)
   *
   * @param symbol  (optional)
   * @param orderId  (optional)
   * @param orderLinkId  (optional)
   * @return Future(Any)
   */
  def linearOrderQueryAsync(symbol: Option[String] = None, orderId: Option[String] = None, orderLinkId: Option[String] = None): Future[Any] = {
      helper.linearOrderQuery(symbol, orderId, orderLinkId)
  }

  /**
   * Replace Active Order
   * 
   *
   * @param symbol  
   * @param orderId  (optional)
   * @param orderLinkId  (optional)
   * @param pRQty  (optional)
   * @param pRPrice  (optional)
   * @return Any
   */
  def linearOrderReplace(symbol: String, orderId: Option[String] = None, orderLinkId: Option[String] = None, pRQty: Option[String] = None, pRPrice: Option[Number] = None): Option[Any] = {
    val await = Try(Await.result(linearOrderReplaceAsync(symbol, orderId, orderLinkId, pRQty, pRPrice), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Replace Active Order asynchronously
   * 
   *
   * @param symbol  
   * @param orderId  (optional)
   * @param orderLinkId  (optional)
   * @param pRQty  (optional)
   * @param pRPrice  (optional)
   * @return Future(Any)
   */
  def linearOrderReplaceAsync(symbol: String, orderId: Option[String] = None, orderLinkId: Option[String] = None, pRQty: Option[String] = None, pRPrice: Option[Number] = None): Future[Any] = {
      helper.linearOrderReplace(symbol, orderId, orderLinkId, pRQty, pRPrice)
  }

}

class LinearOrderApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def linearOrderCancel(orderId: Option[String] = None,
    orderLinkId: Option[String] = None,
    symbol: Option[String] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/private/linear/order/cancel"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def linearOrderCancelAll(symbol: String)(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/private/linear/order/cancel-all"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (symbol == null) throw new Exception("Missing required parameter 'symbol' when calling LinearOrderApi->linearOrderCancelAll")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def linearOrderGetOrders(orderId: Option[String] = None,
    orderLinkId: Option[String] = None,
    symbol: Option[String] = None,
    order: Option[String] = None,
    page: Option[String] = None,
    limit: Option[String] = None,
    orderStatus: Option[String] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/private/linear/order/list"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    orderId match {
      case Some(param) => queryParams += "order_id" -> param.toString
      case _ => queryParams
    }
    orderLinkId match {
      case Some(param) => queryParams += "order_link_id" -> param.toString
      case _ => queryParams
    }
    symbol match {
      case Some(param) => queryParams += "symbol" -> param.toString
      case _ => queryParams
    }
    order match {
      case Some(param) => queryParams += "order" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    orderStatus match {
      case Some(param) => queryParams += "order_status" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def linearOrderNew(symbol: Option[String] = None,
    side: Option[String] = None,
    orderType: Option[String] = None,
    timeInForce: Option[String] = None,
    qty: Option[Double] = None,
    price: Option[Double] = None,
    takeProfit: Option[Double] = None,
    stopLoss: Option[Double] = None,
    reduceOnly: Option[Boolean] = None,
    tpTriggerBy: Option[String] = None,
    slTriggerBy: Option[String] = None,
    closeOnTrigger: Option[Boolean] = None,
    orderLinkId: Option[String] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/private/linear/order/create"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def linearOrderQuery(symbol: Option[String] = None,
    orderId: Option[String] = None,
    orderLinkId: Option[String] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/private/linear/order/search"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    symbol match {
      case Some(param) => queryParams += "symbol" -> param.toString
      case _ => queryParams
    }
    orderId match {
      case Some(param) => queryParams += "order_id" -> param.toString
      case _ => queryParams
    }
    orderLinkId match {
      case Some(param) => queryParams += "order_link_id" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def linearOrderReplace(symbol: String,
    orderId: Option[String] = None,
    orderLinkId: Option[String] = None,
    pRQty: Option[String] = None,
    pRPrice: Option[Number] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/private/linear/order/replace"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (symbol == null) throw new Exception("Missing required parameter 'symbol' when calling LinearOrderApi->linearOrderReplace")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
