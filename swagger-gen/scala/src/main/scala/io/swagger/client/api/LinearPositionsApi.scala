/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class LinearPositionsApi(
  val defBasePath: String = "https://api.bybit.com",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new LinearPositionsApiAsyncHelper(client, config)

  /**
   * Add/Reduce Margin
   * This will Add/Reduce Margin
   *
   * @param symbol  (optional)
   * @param side  (optional)
   * @param margin  (optional)
   * @return Any
   */
  def linearPositionsChangeMargin(symbol: Option[String] = None, side: Option[String] = None, margin: Option[Double] = None): Option[Any] = {
    val await = Try(Await.result(linearPositionsChangeMarginAsync(symbol, side, margin), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Add/Reduce Margin asynchronously
   * This will Add/Reduce Margin
   *
   * @param symbol  (optional)
   * @param side  (optional)
   * @param margin  (optional)
   * @return Future(Any)
   */
  def linearPositionsChangeMarginAsync(symbol: Option[String] = None, side: Option[String] = None, margin: Option[Double] = None): Future[Any] = {
      helper.linearPositionsChangeMargin(symbol, side, margin)
  }

  /**
   * Get user&#39;s closed profit and loss records.
   * This will get user&#39;s closed profit and loss records.
   *
   * @param symbol  (optional)
   * @param startTime  (optional)
   * @param endTime  (optional)
   * @param execType  (optional)
   * @param page  (optional)
   * @param limit  (optional)
   * @return Any
   */
  def linearPositionsClosePnlRecords(symbol: Option[String] = None, startTime: Option[Long] = None, endTime: Option[Long] = None, execType: Option[String] = None, page: Option[Long] = None, limit: Option[Long] = None): Option[Any] = {
    val await = Try(Await.result(linearPositionsClosePnlRecordsAsync(symbol, startTime, endTime, execType, page, limit), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get user&#39;s closed profit and loss records. asynchronously
   * This will get user&#39;s closed profit and loss records.
   *
   * @param symbol  (optional)
   * @param startTime  (optional)
   * @param endTime  (optional)
   * @param execType  (optional)
   * @param page  (optional)
   * @param limit  (optional)
   * @return Future(Any)
   */
  def linearPositionsClosePnlRecordsAsync(symbol: Option[String] = None, startTime: Option[Long] = None, endTime: Option[Long] = None, execType: Option[String] = None, page: Option[Long] = None, limit: Option[Long] = None): Future[Any] = {
      helper.linearPositionsClosePnlRecords(symbol, startTime, endTime, execType, page, limit)
  }

  /**
   * Get my position list.
   * This will get my position list.
   *
   * @param symbol  (optional)
   * @return Any
   */
  def linearPositionsMyPosition(symbol: Option[String] = None): Option[Any] = {
    val await = Try(Await.result(linearPositionsMyPositionAsync(symbol), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get my position list. asynchronously
   * This will get my position list.
   *
   * @param symbol  (optional)
   * @return Future(Any)
   */
  def linearPositionsMyPositionAsync(symbol: Option[String] = None): Future[Any] = {
      helper.linearPositionsMyPosition(symbol)
  }

  /**
   * Set leverage
   * This will Set Leverage
   *
   * @param symbol  (optional)
   * @param buyLeverage  (optional)
   * @param sellLeverage  (optional)
   * @return Any
   */
  def linearPositionsSaveLeverage(symbol: Option[String] = None, buyLeverage: Option[Double] = None, sellLeverage: Option[Double] = None): Option[Any] = {
    val await = Try(Await.result(linearPositionsSaveLeverageAsync(symbol, buyLeverage, sellLeverage), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Set leverage asynchronously
   * This will Set Leverage
   *
   * @param symbol  (optional)
   * @param buyLeverage  (optional)
   * @param sellLeverage  (optional)
   * @return Future(Any)
   */
  def linearPositionsSaveLeverageAsync(symbol: Option[String] = None, buyLeverage: Option[Double] = None, sellLeverage: Option[Double] = None): Future[Any] = {
      helper.linearPositionsSaveLeverage(symbol, buyLeverage, sellLeverage)
  }

  /**
   * Set auto add margin
   * This will Set auto add margin
   *
   * @param symbol  (optional)
   * @param side  (optional)
   * @param autoAddMargin  (optional)
   * @return Any
   */
  def linearPositionsSetAutoAddMargin(symbol: Option[String] = None, side: Option[String] = None, autoAddMargin: Option[Boolean] = None): Option[Any] = {
    val await = Try(Await.result(linearPositionsSetAutoAddMarginAsync(symbol, side, autoAddMargin), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Set auto add margin asynchronously
   * This will Set auto add margin
   *
   * @param symbol  (optional)
   * @param side  (optional)
   * @param autoAddMargin  (optional)
   * @return Future(Any)
   */
  def linearPositionsSetAutoAddMarginAsync(symbol: Option[String] = None, side: Option[String] = None, autoAddMargin: Option[Boolean] = None): Future[Any] = {
      helper.linearPositionsSetAutoAddMargin(symbol, side, autoAddMargin)
  }

  /**
   * Switch isolated
   * This will switch isolated
   *
   * @param symbol  (optional)
   * @param isIsolated  (optional)
   * @param buyLeverage  (optional)
   * @param sellLeverage  (optional)
   * @return Any
   */
  def linearPositionsSwitchIsolated(symbol: Option[String] = None, isIsolated: Option[Boolean] = None, buyLeverage: Option[Double] = None, sellLeverage: Option[Double] = None): Option[Any] = {
    val await = Try(Await.result(linearPositionsSwitchIsolatedAsync(symbol, isIsolated, buyLeverage, sellLeverage), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Switch isolated asynchronously
   * This will switch isolated
   *
   * @param symbol  (optional)
   * @param isIsolated  (optional)
   * @param buyLeverage  (optional)
   * @param sellLeverage  (optional)
   * @return Future(Any)
   */
  def linearPositionsSwitchIsolatedAsync(symbol: Option[String] = None, isIsolated: Option[Boolean] = None, buyLeverage: Option[Double] = None, sellLeverage: Option[Double] = None): Future[Any] = {
      helper.linearPositionsSwitchIsolated(symbol, isIsolated, buyLeverage, sellLeverage)
  }

  /**
   * Switch Mode
   * This will Switch TP/SL Mode
   *
   * @param symbol  (optional)
   * @param tpSlMode  (optional)
   * @return Any
   */
  def linearPositionsSwitchMode(symbol: Option[String] = None, tpSlMode: Option[String] = None): Option[Any] = {
    val await = Try(Await.result(linearPositionsSwitchModeAsync(symbol, tpSlMode), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Switch Mode asynchronously
   * This will Switch TP/SL Mode
   *
   * @param symbol  (optional)
   * @param tpSlMode  (optional)
   * @return Future(Any)
   */
  def linearPositionsSwitchModeAsync(symbol: Option[String] = None, tpSlMode: Option[String] = None): Future[Any] = {
      helper.linearPositionsSwitchMode(symbol, tpSlMode)
  }

  /**
   * Set tradingStop
   * This will set tradingStop
   *
   * @param symbol  (optional)
   * @param side  (optional)
   * @param takeProfit  (optional)
   * @param stopLoss  (optional)
   * @param trailingStop  (optional)
   * @param tpTriggerBy  (optional)
   * @param slTriggerBy  (optional)
   * @param slSize  (optional)
   * @param tpSize  (optional)
   * @return Any
   */
  def linearPositionsTradingStop(symbol: Option[String] = None, side: Option[String] = None, takeProfit: Option[Double] = None, stopLoss: Option[Double] = None, trailingStop: Option[Double] = None, tpTriggerBy: Option[String] = None, slTriggerBy: Option[String] = None, slSize: Option[Double] = None, tpSize: Option[Double] = None): Option[Any] = {
    val await = Try(Await.result(linearPositionsTradingStopAsync(symbol, side, takeProfit, stopLoss, trailingStop, tpTriggerBy, slTriggerBy, slSize, tpSize), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Set tradingStop asynchronously
   * This will set tradingStop
   *
   * @param symbol  (optional)
   * @param side  (optional)
   * @param takeProfit  (optional)
   * @param stopLoss  (optional)
   * @param trailingStop  (optional)
   * @param tpTriggerBy  (optional)
   * @param slTriggerBy  (optional)
   * @param slSize  (optional)
   * @param tpSize  (optional)
   * @return Future(Any)
   */
  def linearPositionsTradingStopAsync(symbol: Option[String] = None, side: Option[String] = None, takeProfit: Option[Double] = None, stopLoss: Option[Double] = None, trailingStop: Option[Double] = None, tpTriggerBy: Option[String] = None, slTriggerBy: Option[String] = None, slSize: Option[Double] = None, tpSize: Option[Double] = None): Future[Any] = {
      helper.linearPositionsTradingStop(symbol, side, takeProfit, stopLoss, trailingStop, tpTriggerBy, slTriggerBy, slSize, tpSize)
  }

}

class LinearPositionsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def linearPositionsChangeMargin(symbol: Option[String] = None,
    side: Option[String] = None,
    margin: Option[Double] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/private/linear/position/add-margin"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def linearPositionsClosePnlRecords(symbol: Option[String] = None,
    startTime: Option[Long] = None,
    endTime: Option[Long] = None,
    execType: Option[String] = None,
    page: Option[Long] = None,
    limit: Option[Long] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/private/linear/trade/closed-pnl/list"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    symbol match {
      case Some(param) => queryParams += "symbol" -> param.toString
      case _ => queryParams
    }
    startTime match {
      case Some(param) => queryParams += "start_time" -> param.toString
      case _ => queryParams
    }
    endTime match {
      case Some(param) => queryParams += "end_time" -> param.toString
      case _ => queryParams
    }
    execType match {
      case Some(param) => queryParams += "exec_type" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def linearPositionsMyPosition(symbol: Option[String] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/private/linear/position/list"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    symbol match {
      case Some(param) => queryParams += "symbol" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def linearPositionsSaveLeverage(symbol: Option[String] = None,
    buyLeverage: Option[Double] = None,
    sellLeverage: Option[Double] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/private/linear/position/set-leverage"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def linearPositionsSetAutoAddMargin(symbol: Option[String] = None,
    side: Option[String] = None,
    autoAddMargin: Option[Boolean] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/private/linear/position/set-auto-add-margin"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def linearPositionsSwitchIsolated(symbol: Option[String] = None,
    isIsolated: Option[Boolean] = None,
    buyLeverage: Option[Double] = None,
    sellLeverage: Option[Double] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/private/linear/position/switch-isolated"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def linearPositionsSwitchMode(symbol: Option[String] = None,
    tpSlMode: Option[String] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/private/linear/tpsl/switch-mode"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def linearPositionsTradingStop(symbol: Option[String] = None,
    side: Option[String] = None,
    takeProfit: Option[Double] = None,
    stopLoss: Option[Double] = None,
    trailingStop: Option[Double] = None,
    tpTriggerBy: Option[String] = None,
    slTriggerBy: Option[String] = None,
    slSize: Option[Double] = None,
    tpSize: Option[Double] = None
    )(implicit reader: ClientResponseReader[Any]): Future[Any] = {
    // create path and map variables
    val path = (addFmt("/private/linear/position/trading-stop"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
