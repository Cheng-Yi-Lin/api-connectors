/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "LCPInfoBase.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

LCPInfoBase::LCPInfoBase()
{
    m_date = utility::conversions::to_string_t("");
    m_dateIsSet = false;
    m_Self_ratio = 0.0;
    m_Self_ratioIsSet = false;
    m_Platform_ratio = 0.0;
    m_Platform_ratioIsSet = false;
    m_Score = 0.0;
    m_ScoreIsSet = false;
}

LCPInfoBase::~LCPInfoBase()
{
}

void LCPInfoBase::validate()
{
    // TODO: implement validation
}

web::json::value LCPInfoBase::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_dateIsSet)
    {
        val[utility::conversions::to_string_t("date")] = ModelBase::toJson(m_date);
    }
    if(m_Self_ratioIsSet)
    {
        val[utility::conversions::to_string_t("self_ratio")] = ModelBase::toJson(m_Self_ratio);
    }
    if(m_Platform_ratioIsSet)
    {
        val[utility::conversions::to_string_t("platform_ratio")] = ModelBase::toJson(m_Platform_ratio);
    }
    if(m_ScoreIsSet)
    {
        val[utility::conversions::to_string_t("score")] = ModelBase::toJson(m_Score);
    }

    return val;
}

void LCPInfoBase::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("date")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("date")];
        if(!fieldValue.is_null())
        {
            setDate(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("self_ratio")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("self_ratio")];
        if(!fieldValue.is_null())
        {
            setSelfRatio(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("platform_ratio")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("platform_ratio")];
        if(!fieldValue.is_null())
        {
            setPlatformRatio(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("score")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("score")];
        if(!fieldValue.is_null())
        {
            setScore(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void LCPInfoBase::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("date"), m_date));
        
    }
    if(m_Self_ratioIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("self_ratio"), m_Self_ratio));
    }
    if(m_Platform_ratioIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("platform_ratio"), m_Platform_ratio));
    }
    if(m_ScoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("score"), m_Score));
    }
}

void LCPInfoBase::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("date")))
    {
        setDate(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("date"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("self_ratio")))
    {
        setSelfRatio(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("self_ratio"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("platform_ratio")))
    {
        setPlatformRatio(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("platform_ratio"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("score")))
    {
        setScore(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("score"))));
    }
}

utility::string_t LCPInfoBase::getDate() const
{
    return m_date;
}


void LCPInfoBase::setDate(utility::string_t value)
{
    m_date = value;
    m_dateIsSet = true;
}
bool LCPInfoBase::dateIsSet() const
{
    return m_dateIsSet;
}

void LCPInfoBase::unsetdate()
{
    m_dateIsSet = false;
}

double LCPInfoBase::getSelfRatio() const
{
    return m_Self_ratio;
}


void LCPInfoBase::setSelfRatio(double value)
{
    m_Self_ratio = value;
    m_Self_ratioIsSet = true;
}
bool LCPInfoBase::selfRatioIsSet() const
{
    return m_Self_ratioIsSet;
}

void LCPInfoBase::unsetSelf_ratio()
{
    m_Self_ratioIsSet = false;
}

double LCPInfoBase::getPlatformRatio() const
{
    return m_Platform_ratio;
}


void LCPInfoBase::setPlatformRatio(double value)
{
    m_Platform_ratio = value;
    m_Platform_ratioIsSet = true;
}
bool LCPInfoBase::platformRatioIsSet() const
{
    return m_Platform_ratioIsSet;
}

void LCPInfoBase::unsetPlatform_ratio()
{
    m_Platform_ratioIsSet = false;
}

double LCPInfoBase::getScore() const
{
    return m_Score;
}


void LCPInfoBase::setScore(double value)
{
    m_Score = value;
    m_ScoreIsSet = true;
}
bool LCPInfoBase::scoreIsSet() const
{
    return m_ScoreIsSet;
}

void LCPInfoBase::unsetScore()
{
    m_ScoreIsSet = false;
}

}
}
}
}

