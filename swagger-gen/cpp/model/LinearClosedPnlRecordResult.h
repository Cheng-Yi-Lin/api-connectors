/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * LinearClosedPnlRecordResult.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_LinearClosedPnlRecordResult_H_
#define IO_SWAGGER_CLIENT_MODEL_LinearClosedPnlRecordResult_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  LinearClosedPnlRecordResult
    : public ModelBase
{
public:
    LinearClosedPnlRecordResult();
    virtual ~LinearClosedPnlRecordResult();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LinearClosedPnlRecordResult members

    /// <summary>
    /// 
    /// </summary>
    double getAvgEntryPrice() const;
    bool avgEntryPriceIsSet() const;
    void unsetAvg_entry_price();
    void setAvgEntryPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getAvgExitPrice() const;
    bool avgExitPriceIsSet() const;
    void unsetAvg_exit_price();
    void setAvgExitPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getClosedPnl() const;
    bool closedPnlIsSet() const;
    void unsetClosed_pnl();
    void setClosedPnl(double value);
    /// <summary>
    /// 
    /// </summary>
    double getClosedSize() const;
    bool closedSizeIsSet() const;
    void unsetClosed_size();
    void setClosedSize(double value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreated_at();
    void setCreatedAt(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    double getCumEntryValue() const;
    bool cumEntryValueIsSet() const;
    void unsetCum_entry_value();
    void setCumEntryValue(double value);
    /// <summary>
    /// 
    /// </summary>
    double getCumExitValue() const;
    bool cumExitValueIsSet() const;
    void unsetCum_exit_value();
    void setCumExitValue(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getExecType() const;
    bool execTypeIsSet() const;
    void unsetExec_type();
    void setExecType(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getFillCount() const;
    bool fillCountIsSet() const;
    void unsetFill_count();
    void setFillCount(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    double getLeverage() const;
    bool leverageIsSet() const;
    void unsetLeverage();
    void setLeverage(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOrderId() const;
    bool orderIdIsSet() const;
    void unsetOrder_id();
    void setOrderId(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    double getOrderPrice() const;
    bool orderPriceIsSet() const;
    void unsetOrder_price();
    void setOrderPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOrderType() const;
    bool orderTypeIsSet() const;
    void unsetOrder_type();
    void setOrderType(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    double getQty() const;
    bool qtyIsSet() const;
    void unsetQty();
    void setQty(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSide() const;
    bool sideIsSet() const;
    void unsetSide();
    void setSide(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSymbol() const;
    bool symbolIsSet() const;
    void unsetSymbol();
    void setSymbol(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUser_id();
    void setUserId(int64_t value);

protected:
    double m_Avg_entry_price;
    bool m_Avg_entry_priceIsSet;
    double m_Avg_exit_price;
    bool m_Avg_exit_priceIsSet;
    double m_Closed_pnl;
    bool m_Closed_pnlIsSet;
    double m_Closed_size;
    bool m_Closed_sizeIsSet;
    int64_t m_Created_at;
    bool m_Created_atIsSet;
    double m_Cum_entry_value;
    bool m_Cum_entry_valueIsSet;
    double m_Cum_exit_value;
    bool m_Cum_exit_valueIsSet;
    utility::string_t m_Exec_type;
    bool m_Exec_typeIsSet;
    int32_t m_Fill_count;
    bool m_Fill_countIsSet;
    int64_t m_Id;
    bool m_IdIsSet;
    double m_Leverage;
    bool m_LeverageIsSet;
    utility::string_t m_Order_id;
    bool m_Order_idIsSet;
    double m_Order_price;
    bool m_Order_priceIsSet;
    utility::string_t m_Order_type;
    bool m_Order_typeIsSet;
    double m_Qty;
    bool m_QtyIsSet;
    utility::string_t m_Side;
    bool m_SideIsSet;
    utility::string_t m_Symbol;
    bool m_SymbolIsSet;
    int64_t m_User_id;
    bool m_User_idIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_LinearClosedPnlRecordResult_H_ */
