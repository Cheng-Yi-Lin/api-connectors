/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "AnnouncementInfo.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

AnnouncementInfo::AnnouncementInfo()
{
    m_Id = 0.0;
    m_IdIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Link = utility::conversions::to_string_t("");
    m_LinkIsSet = false;
    m_Summary = utility::conversions::to_string_t("");
    m_SummaryIsSet = false;
    m_Created_at = utility::conversions::to_string_t("");
    m_Created_atIsSet = false;
}

AnnouncementInfo::~AnnouncementInfo()
{
}

void AnnouncementInfo::validate()
{
    // TODO: implement validation
}

web::json::value AnnouncementInfo::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t("title")] = ModelBase::toJson(m_Title);
    }
    if(m_LinkIsSet)
    {
        val[utility::conversions::to_string_t("link")] = ModelBase::toJson(m_Link);
    }
    if(m_SummaryIsSet)
    {
        val[utility::conversions::to_string_t("summary")] = ModelBase::toJson(m_Summary);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t("created_at")] = ModelBase::toJson(m_Created_at);
    }

    return val;
}

void AnnouncementInfo::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("title")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("title")];
        if(!fieldValue.is_null())
        {
            setTitle(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("link")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("link")];
        if(!fieldValue.is_null())
        {
            setLink(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("summary")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("summary")];
        if(!fieldValue.is_null())
        {
            setSummary(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("created_at")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("created_at")];
        if(!fieldValue.is_null())
        {
            setCreatedAt(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void AnnouncementInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title"), m_Title));
        
    }
    if(m_LinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("link"), m_Link));
        
    }
    if(m_SummaryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("summary"), m_Summary));
        
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created_at"), m_Created_at));
        
    }
}

void AnnouncementInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title")))
    {
        setTitle(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("title"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("link")))
    {
        setLink(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("link"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("summary")))
    {
        setSummary(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("summary"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("created_at")))
    {
        setCreatedAt(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("created_at"))));
    }
}

double AnnouncementInfo::getId() const
{
    return m_Id;
}


void AnnouncementInfo::setId(double value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool AnnouncementInfo::idIsSet() const
{
    return m_IdIsSet;
}

void AnnouncementInfo::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t AnnouncementInfo::getTitle() const
{
    return m_Title;
}


void AnnouncementInfo::setTitle(utility::string_t value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool AnnouncementInfo::titleIsSet() const
{
    return m_TitleIsSet;
}

void AnnouncementInfo::unsetTitle()
{
    m_TitleIsSet = false;
}

utility::string_t AnnouncementInfo::getLink() const
{
    return m_Link;
}


void AnnouncementInfo::setLink(utility::string_t value)
{
    m_Link = value;
    m_LinkIsSet = true;
}
bool AnnouncementInfo::linkIsSet() const
{
    return m_LinkIsSet;
}

void AnnouncementInfo::unsetLink()
{
    m_LinkIsSet = false;
}

utility::string_t AnnouncementInfo::getSummary() const
{
    return m_Summary;
}


void AnnouncementInfo::setSummary(utility::string_t value)
{
    m_Summary = value;
    m_SummaryIsSet = true;
}
bool AnnouncementInfo::summaryIsSet() const
{
    return m_SummaryIsSet;
}

void AnnouncementInfo::unsetSummary()
{
    m_SummaryIsSet = false;
}

utility::string_t AnnouncementInfo::getCreatedAt() const
{
    return m_Created_at;
}


void AnnouncementInfo::setCreatedAt(utility::string_t value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}
bool AnnouncementInfo::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void AnnouncementInfo::unsetCreated_at()
{
    m_Created_atIsSet = false;
}

}
}
}
}

