/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ExchangeOrderList.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ExchangeOrderList::ExchangeOrderList()
{
    m_From_coin = utility::conversions::to_string_t("");
    m_From_coinIsSet = false;
    m_To_coin = utility::conversions::to_string_t("");
    m_To_coinIsSet = false;
    m_From_amount = 0.0;
    m_From_amountIsSet = false;
    m_To_amount = 0.0;
    m_To_amountIsSet = false;
    m_Exchange_rate = 0.0;
    m_Exchange_rateIsSet = false;
    m_From_fee = 0.0;
    m_From_feeIsSet = false;
    m_Created_at = utility::conversions::to_string_t("");
    m_Created_atIsSet = false;
}

ExchangeOrderList::~ExchangeOrderList()
{
}

void ExchangeOrderList::validate()
{
    // TODO: implement validation
}

web::json::value ExchangeOrderList::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_From_coinIsSet)
    {
        val[utility::conversions::to_string_t("from_coin")] = ModelBase::toJson(m_From_coin);
    }
    if(m_To_coinIsSet)
    {
        val[utility::conversions::to_string_t("to_coin")] = ModelBase::toJson(m_To_coin);
    }
    if(m_From_amountIsSet)
    {
        val[utility::conversions::to_string_t("from_amount")] = ModelBase::toJson(m_From_amount);
    }
    if(m_To_amountIsSet)
    {
        val[utility::conversions::to_string_t("to_amount")] = ModelBase::toJson(m_To_amount);
    }
    if(m_Exchange_rateIsSet)
    {
        val[utility::conversions::to_string_t("exchange_rate")] = ModelBase::toJson(m_Exchange_rate);
    }
    if(m_From_feeIsSet)
    {
        val[utility::conversions::to_string_t("from_fee")] = ModelBase::toJson(m_From_fee);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t("created_at")] = ModelBase::toJson(m_Created_at);
    }

    return val;
}

void ExchangeOrderList::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("from_coin")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("from_coin")];
        if(!fieldValue.is_null())
        {
            setFromCoin(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("to_coin")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("to_coin")];
        if(!fieldValue.is_null())
        {
            setToCoin(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("from_amount")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("from_amount")];
        if(!fieldValue.is_null())
        {
            setFromAmount(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("to_amount")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("to_amount")];
        if(!fieldValue.is_null())
        {
            setToAmount(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exchange_rate")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("exchange_rate")];
        if(!fieldValue.is_null())
        {
            setExchangeRate(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("from_fee")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("from_fee")];
        if(!fieldValue.is_null())
        {
            setFromFee(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("created_at")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("created_at")];
        if(!fieldValue.is_null())
        {
            setCreatedAt(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void ExchangeOrderList::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_From_coinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("from_coin"), m_From_coin));
        
    }
    if(m_To_coinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("to_coin"), m_To_coin));
        
    }
    if(m_From_amountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("from_amount"), m_From_amount));
    }
    if(m_To_amountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("to_amount"), m_To_amount));
    }
    if(m_Exchange_rateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exchange_rate"), m_Exchange_rate));
    }
    if(m_From_feeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("from_fee"), m_From_fee));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created_at"), m_Created_at));
        
    }
}

void ExchangeOrderList::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("from_coin")))
    {
        setFromCoin(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("from_coin"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("to_coin")))
    {
        setToCoin(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("to_coin"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("from_amount")))
    {
        setFromAmount(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("from_amount"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("to_amount")))
    {
        setToAmount(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("to_amount"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exchange_rate")))
    {
        setExchangeRate(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("exchange_rate"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("from_fee")))
    {
        setFromFee(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("from_fee"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("created_at")))
    {
        setCreatedAt(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("created_at"))));
    }
}

utility::string_t ExchangeOrderList::getFromCoin() const
{
    return m_From_coin;
}


void ExchangeOrderList::setFromCoin(utility::string_t value)
{
    m_From_coin = value;
    m_From_coinIsSet = true;
}
bool ExchangeOrderList::fromCoinIsSet() const
{
    return m_From_coinIsSet;
}

void ExchangeOrderList::unsetFrom_coin()
{
    m_From_coinIsSet = false;
}

utility::string_t ExchangeOrderList::getToCoin() const
{
    return m_To_coin;
}


void ExchangeOrderList::setToCoin(utility::string_t value)
{
    m_To_coin = value;
    m_To_coinIsSet = true;
}
bool ExchangeOrderList::toCoinIsSet() const
{
    return m_To_coinIsSet;
}

void ExchangeOrderList::unsetTo_coin()
{
    m_To_coinIsSet = false;
}

double ExchangeOrderList::getFromAmount() const
{
    return m_From_amount;
}


void ExchangeOrderList::setFromAmount(double value)
{
    m_From_amount = value;
    m_From_amountIsSet = true;
}
bool ExchangeOrderList::fromAmountIsSet() const
{
    return m_From_amountIsSet;
}

void ExchangeOrderList::unsetFrom_amount()
{
    m_From_amountIsSet = false;
}

double ExchangeOrderList::getToAmount() const
{
    return m_To_amount;
}


void ExchangeOrderList::setToAmount(double value)
{
    m_To_amount = value;
    m_To_amountIsSet = true;
}
bool ExchangeOrderList::toAmountIsSet() const
{
    return m_To_amountIsSet;
}

void ExchangeOrderList::unsetTo_amount()
{
    m_To_amountIsSet = false;
}

double ExchangeOrderList::getExchangeRate() const
{
    return m_Exchange_rate;
}


void ExchangeOrderList::setExchangeRate(double value)
{
    m_Exchange_rate = value;
    m_Exchange_rateIsSet = true;
}
bool ExchangeOrderList::exchangeRateIsSet() const
{
    return m_Exchange_rateIsSet;
}

void ExchangeOrderList::unsetExchange_rate()
{
    m_Exchange_rateIsSet = false;
}

double ExchangeOrderList::getFromFee() const
{
    return m_From_fee;
}


void ExchangeOrderList::setFromFee(double value)
{
    m_From_fee = value;
    m_From_feeIsSet = true;
}
bool ExchangeOrderList::fromFeeIsSet() const
{
    return m_From_feeIsSet;
}

void ExchangeOrderList::unsetFrom_fee()
{
    m_From_feeIsSet = false;
}

utility::string_t ExchangeOrderList::getCreatedAt() const
{
    return m_Created_at;
}


void ExchangeOrderList::setCreatedAt(utility::string_t value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}
bool ExchangeOrderList::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void ExchangeOrderList::unsetCreated_at()
{
    m_Created_atIsSet = false;
}

}
}
}
}

