/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "LinearFundingPredicted.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

LinearFundingPredicted::LinearFundingPredicted()
{
    m_Predicted_funding_rate = 0.0;
    m_Predicted_funding_rateIsSet = false;
    m_Predicted_funding_fee = 0.0;
    m_Predicted_funding_feeIsSet = false;
}

LinearFundingPredicted::~LinearFundingPredicted()
{
}

void LinearFundingPredicted::validate()
{
    // TODO: implement validation
}

web::json::value LinearFundingPredicted::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Predicted_funding_rateIsSet)
    {
        val[utility::conversions::to_string_t("predicted_funding_rate")] = ModelBase::toJson(m_Predicted_funding_rate);
    }
    if(m_Predicted_funding_feeIsSet)
    {
        val[utility::conversions::to_string_t("predicted_funding_fee")] = ModelBase::toJson(m_Predicted_funding_fee);
    }

    return val;
}

void LinearFundingPredicted::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("predicted_funding_rate")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("predicted_funding_rate")];
        if(!fieldValue.is_null())
        {
            setPredictedFundingRate(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("predicted_funding_fee")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("predicted_funding_fee")];
        if(!fieldValue.is_null())
        {
            setPredictedFundingFee(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void LinearFundingPredicted::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Predicted_funding_rateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("predicted_funding_rate"), m_Predicted_funding_rate));
    }
    if(m_Predicted_funding_feeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("predicted_funding_fee"), m_Predicted_funding_fee));
    }
}

void LinearFundingPredicted::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("predicted_funding_rate")))
    {
        setPredictedFundingRate(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("predicted_funding_rate"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("predicted_funding_fee")))
    {
        setPredictedFundingFee(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("predicted_funding_fee"))));
    }
}

double LinearFundingPredicted::getPredictedFundingRate() const
{
    return m_Predicted_funding_rate;
}


void LinearFundingPredicted::setPredictedFundingRate(double value)
{
    m_Predicted_funding_rate = value;
    m_Predicted_funding_rateIsSet = true;
}
bool LinearFundingPredicted::predictedFundingRateIsSet() const
{
    return m_Predicted_funding_rateIsSet;
}

void LinearFundingPredicted::unsetPredicted_funding_rate()
{
    m_Predicted_funding_rateIsSet = false;
}

double LinearFundingPredicted::getPredictedFundingFee() const
{
    return m_Predicted_funding_fee;
}


void LinearFundingPredicted::setPredictedFundingFee(double value)
{
    m_Predicted_funding_fee = value;
    m_Predicted_funding_feeIsSet = true;
}
bool LinearFundingPredicted::predictedFundingFeeIsSet() const
{
    return m_Predicted_funding_feeIsSet;
}

void LinearFundingPredicted::unsetPredicted_funding_fee()
{
    m_Predicted_funding_feeIsSet = false;
}

}
}
}
}

