/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "LinearTradeRecordItem.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

LinearTradeRecordItem::LinearTradeRecordItem()
{
    m_Closed_size = 0.0;
    m_Closed_sizeIsSet = false;
    m_Exec_fee = 0.0;
    m_Exec_feeIsSet = false;
    m_Exec_id = utility::conversions::to_string_t("");
    m_Exec_idIsSet = false;
    m_Exec_price = 0.0;
    m_Exec_priceIsSet = false;
    m_Exec_qty = 0.0;
    m_Exec_qtyIsSet = false;
    m_Exec_type = utility::conversions::to_string_t("");
    m_Exec_typeIsSet = false;
    m_Exec_value = 0.0;
    m_Exec_valueIsSet = false;
    m_Fee_rate = 0.0;
    m_Fee_rateIsSet = false;
    m_Last_liquidity_ind = utility::conversions::to_string_t("");
    m_Last_liquidity_indIsSet = false;
    m_Leaves_qty = 0.0;
    m_Leaves_qtyIsSet = false;
    m_Order_id = utility::conversions::to_string_t("");
    m_Order_idIsSet = false;
    m_Order_link_id = utility::conversions::to_string_t("");
    m_Order_link_idIsSet = false;
    m_Order_price = 0.0;
    m_Order_priceIsSet = false;
    m_Order_qty = 0.0;
    m_Order_qtyIsSet = false;
    m_Order_type = utility::conversions::to_string_t("");
    m_Order_typeIsSet = false;
    m_Price = 0.0;
    m_PriceIsSet = false;
    m_Side = utility::conversions::to_string_t("");
    m_SideIsSet = false;
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Trade_time = 0L;
    m_Trade_timeIsSet = false;
    m_Trade_time_ms = 0L;
    m_Trade_time_msIsSet = false;
}

LinearTradeRecordItem::~LinearTradeRecordItem()
{
}

void LinearTradeRecordItem::validate()
{
    // TODO: implement validation
}

web::json::value LinearTradeRecordItem::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Closed_sizeIsSet)
    {
        val[utility::conversions::to_string_t("closed_size")] = ModelBase::toJson(m_Closed_size);
    }
    if(m_Exec_feeIsSet)
    {
        val[utility::conversions::to_string_t("exec_fee")] = ModelBase::toJson(m_Exec_fee);
    }
    if(m_Exec_idIsSet)
    {
        val[utility::conversions::to_string_t("exec_id")] = ModelBase::toJson(m_Exec_id);
    }
    if(m_Exec_priceIsSet)
    {
        val[utility::conversions::to_string_t("exec_price")] = ModelBase::toJson(m_Exec_price);
    }
    if(m_Exec_qtyIsSet)
    {
        val[utility::conversions::to_string_t("exec_qty")] = ModelBase::toJson(m_Exec_qty);
    }
    if(m_Exec_typeIsSet)
    {
        val[utility::conversions::to_string_t("exec_type")] = ModelBase::toJson(m_Exec_type);
    }
    if(m_Exec_valueIsSet)
    {
        val[utility::conversions::to_string_t("exec_value")] = ModelBase::toJson(m_Exec_value);
    }
    if(m_Fee_rateIsSet)
    {
        val[utility::conversions::to_string_t("fee_rate")] = ModelBase::toJson(m_Fee_rate);
    }
    if(m_Last_liquidity_indIsSet)
    {
        val[utility::conversions::to_string_t("last_liquidity_ind")] = ModelBase::toJson(m_Last_liquidity_ind);
    }
    if(m_Leaves_qtyIsSet)
    {
        val[utility::conversions::to_string_t("leaves_qty")] = ModelBase::toJson(m_Leaves_qty);
    }
    if(m_Order_idIsSet)
    {
        val[utility::conversions::to_string_t("order_id")] = ModelBase::toJson(m_Order_id);
    }
    if(m_Order_link_idIsSet)
    {
        val[utility::conversions::to_string_t("order_link_id")] = ModelBase::toJson(m_Order_link_id);
    }
    if(m_Order_priceIsSet)
    {
        val[utility::conversions::to_string_t("order_price")] = ModelBase::toJson(m_Order_price);
    }
    if(m_Order_qtyIsSet)
    {
        val[utility::conversions::to_string_t("order_qty")] = ModelBase::toJson(m_Order_qty);
    }
    if(m_Order_typeIsSet)
    {
        val[utility::conversions::to_string_t("order_type")] = ModelBase::toJson(m_Order_type);
    }
    if(m_PriceIsSet)
    {
        val[utility::conversions::to_string_t("price")] = ModelBase::toJson(m_Price);
    }
    if(m_SideIsSet)
    {
        val[utility::conversions::to_string_t("side")] = ModelBase::toJson(m_Side);
    }
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t("symbol")] = ModelBase::toJson(m_Symbol);
    }
    if(m_Trade_timeIsSet)
    {
        val[utility::conversions::to_string_t("trade_time")] = ModelBase::toJson(m_Trade_time);
    }
    if(m_Trade_time_msIsSet)
    {
        val[utility::conversions::to_string_t("trade_time_ms")] = ModelBase::toJson(m_Trade_time_ms);
    }

    return val;
}

void LinearTradeRecordItem::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("closed_size")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("closed_size")];
        if(!fieldValue.is_null())
        {
            setClosedSize(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exec_fee")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("exec_fee")];
        if(!fieldValue.is_null())
        {
            setExecFee(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exec_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("exec_id")];
        if(!fieldValue.is_null())
        {
            setExecId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exec_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("exec_price")];
        if(!fieldValue.is_null())
        {
            setExecPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exec_qty")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("exec_qty")];
        if(!fieldValue.is_null())
        {
            setExecQty(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exec_type")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("exec_type")];
        if(!fieldValue.is_null())
        {
            setExecType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exec_value")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("exec_value")];
        if(!fieldValue.is_null())
        {
            setExecValue(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fee_rate")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("fee_rate")];
        if(!fieldValue.is_null())
        {
            setFeeRate(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("last_liquidity_ind")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("last_liquidity_ind")];
        if(!fieldValue.is_null())
        {
            setLastLiquidityInd(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("leaves_qty")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("leaves_qty")];
        if(!fieldValue.is_null())
        {
            setLeavesQty(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("order_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("order_id")];
        if(!fieldValue.is_null())
        {
            setOrderId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("order_link_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("order_link_id")];
        if(!fieldValue.is_null())
        {
            setOrderLinkId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("order_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("order_price")];
        if(!fieldValue.is_null())
        {
            setOrderPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("order_qty")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("order_qty")];
        if(!fieldValue.is_null())
        {
            setOrderQty(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("order_type")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("order_type")];
        if(!fieldValue.is_null())
        {
            setOrderType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("price")];
        if(!fieldValue.is_null())
        {
            setPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("side")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("side")];
        if(!fieldValue.is_null())
        {
            setSide(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("symbol")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("symbol")];
        if(!fieldValue.is_null())
        {
            setSymbol(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trade_time")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("trade_time")];
        if(!fieldValue.is_null())
        {
            setTradeTime(ModelBase::int64_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trade_time_ms")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("trade_time_ms")];
        if(!fieldValue.is_null())
        {
            setTradeTimeMs(ModelBase::int64_tFromJson(fieldValue));
        }
    }
}

void LinearTradeRecordItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Closed_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("closed_size"), m_Closed_size));
    }
    if(m_Exec_feeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exec_fee"), m_Exec_fee));
    }
    if(m_Exec_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exec_id"), m_Exec_id));
        
    }
    if(m_Exec_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exec_price"), m_Exec_price));
    }
    if(m_Exec_qtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exec_qty"), m_Exec_qty));
    }
    if(m_Exec_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exec_type"), m_Exec_type));
        
    }
    if(m_Exec_valueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exec_value"), m_Exec_value));
    }
    if(m_Fee_rateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fee_rate"), m_Fee_rate));
    }
    if(m_Last_liquidity_indIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("last_liquidity_ind"), m_Last_liquidity_ind));
        
    }
    if(m_Leaves_qtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("leaves_qty"), m_Leaves_qty));
    }
    if(m_Order_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_id"), m_Order_id));
        
    }
    if(m_Order_link_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_link_id"), m_Order_link_id));
        
    }
    if(m_Order_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_price"), m_Order_price));
    }
    if(m_Order_qtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_qty"), m_Order_qty));
    }
    if(m_Order_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_type"), m_Order_type));
        
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("price"), m_Price));
    }
    if(m_SideIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("side"), m_Side));
        
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbol"), m_Symbol));
        
    }
    if(m_Trade_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trade_time"), m_Trade_time));
    }
    if(m_Trade_time_msIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trade_time_ms"), m_Trade_time_ms));
    }
}

void LinearTradeRecordItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("closed_size")))
    {
        setClosedSize(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("closed_size"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exec_fee")))
    {
        setExecFee(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("exec_fee"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exec_id")))
    {
        setExecId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("exec_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exec_price")))
    {
        setExecPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("exec_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exec_qty")))
    {
        setExecQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("exec_qty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exec_type")))
    {
        setExecType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("exec_type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exec_value")))
    {
        setExecValue(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("exec_value"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fee_rate")))
    {
        setFeeRate(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("fee_rate"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("last_liquidity_ind")))
    {
        setLastLiquidityInd(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("last_liquidity_ind"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("leaves_qty")))
    {
        setLeavesQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("leaves_qty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("order_id")))
    {
        setOrderId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("order_link_id")))
    {
        setOrderLinkId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_link_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("order_price")))
    {
        setOrderPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("order_qty")))
    {
        setOrderQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_qty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("order_type")))
    {
        setOrderType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("price")))
    {
        setPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("side")))
    {
        setSide(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("side"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("symbol")))
    {
        setSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbol"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trade_time")))
    {
        setTradeTime(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("trade_time"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trade_time_ms")))
    {
        setTradeTimeMs(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("trade_time_ms"))));
    }
}

double LinearTradeRecordItem::getClosedSize() const
{
    return m_Closed_size;
}


void LinearTradeRecordItem::setClosedSize(double value)
{
    m_Closed_size = value;
    m_Closed_sizeIsSet = true;
}
bool LinearTradeRecordItem::closedSizeIsSet() const
{
    return m_Closed_sizeIsSet;
}

void LinearTradeRecordItem::unsetClosed_size()
{
    m_Closed_sizeIsSet = false;
}

double LinearTradeRecordItem::getExecFee() const
{
    return m_Exec_fee;
}


void LinearTradeRecordItem::setExecFee(double value)
{
    m_Exec_fee = value;
    m_Exec_feeIsSet = true;
}
bool LinearTradeRecordItem::execFeeIsSet() const
{
    return m_Exec_feeIsSet;
}

void LinearTradeRecordItem::unsetExec_fee()
{
    m_Exec_feeIsSet = false;
}

utility::string_t LinearTradeRecordItem::getExecId() const
{
    return m_Exec_id;
}


void LinearTradeRecordItem::setExecId(utility::string_t value)
{
    m_Exec_id = value;
    m_Exec_idIsSet = true;
}
bool LinearTradeRecordItem::execIdIsSet() const
{
    return m_Exec_idIsSet;
}

void LinearTradeRecordItem::unsetExec_id()
{
    m_Exec_idIsSet = false;
}

double LinearTradeRecordItem::getExecPrice() const
{
    return m_Exec_price;
}


void LinearTradeRecordItem::setExecPrice(double value)
{
    m_Exec_price = value;
    m_Exec_priceIsSet = true;
}
bool LinearTradeRecordItem::execPriceIsSet() const
{
    return m_Exec_priceIsSet;
}

void LinearTradeRecordItem::unsetExec_price()
{
    m_Exec_priceIsSet = false;
}

double LinearTradeRecordItem::getExecQty() const
{
    return m_Exec_qty;
}


void LinearTradeRecordItem::setExecQty(double value)
{
    m_Exec_qty = value;
    m_Exec_qtyIsSet = true;
}
bool LinearTradeRecordItem::execQtyIsSet() const
{
    return m_Exec_qtyIsSet;
}

void LinearTradeRecordItem::unsetExec_qty()
{
    m_Exec_qtyIsSet = false;
}

utility::string_t LinearTradeRecordItem::getExecType() const
{
    return m_Exec_type;
}


void LinearTradeRecordItem::setExecType(utility::string_t value)
{
    m_Exec_type = value;
    m_Exec_typeIsSet = true;
}
bool LinearTradeRecordItem::execTypeIsSet() const
{
    return m_Exec_typeIsSet;
}

void LinearTradeRecordItem::unsetExec_type()
{
    m_Exec_typeIsSet = false;
}

double LinearTradeRecordItem::getExecValue() const
{
    return m_Exec_value;
}


void LinearTradeRecordItem::setExecValue(double value)
{
    m_Exec_value = value;
    m_Exec_valueIsSet = true;
}
bool LinearTradeRecordItem::execValueIsSet() const
{
    return m_Exec_valueIsSet;
}

void LinearTradeRecordItem::unsetExec_value()
{
    m_Exec_valueIsSet = false;
}

double LinearTradeRecordItem::getFeeRate() const
{
    return m_Fee_rate;
}


void LinearTradeRecordItem::setFeeRate(double value)
{
    m_Fee_rate = value;
    m_Fee_rateIsSet = true;
}
bool LinearTradeRecordItem::feeRateIsSet() const
{
    return m_Fee_rateIsSet;
}

void LinearTradeRecordItem::unsetFee_rate()
{
    m_Fee_rateIsSet = false;
}

utility::string_t LinearTradeRecordItem::getLastLiquidityInd() const
{
    return m_Last_liquidity_ind;
}


void LinearTradeRecordItem::setLastLiquidityInd(utility::string_t value)
{
    m_Last_liquidity_ind = value;
    m_Last_liquidity_indIsSet = true;
}
bool LinearTradeRecordItem::lastLiquidityIndIsSet() const
{
    return m_Last_liquidity_indIsSet;
}

void LinearTradeRecordItem::unsetLast_liquidity_ind()
{
    m_Last_liquidity_indIsSet = false;
}

double LinearTradeRecordItem::getLeavesQty() const
{
    return m_Leaves_qty;
}


void LinearTradeRecordItem::setLeavesQty(double value)
{
    m_Leaves_qty = value;
    m_Leaves_qtyIsSet = true;
}
bool LinearTradeRecordItem::leavesQtyIsSet() const
{
    return m_Leaves_qtyIsSet;
}

void LinearTradeRecordItem::unsetLeaves_qty()
{
    m_Leaves_qtyIsSet = false;
}

utility::string_t LinearTradeRecordItem::getOrderId() const
{
    return m_Order_id;
}


void LinearTradeRecordItem::setOrderId(utility::string_t value)
{
    m_Order_id = value;
    m_Order_idIsSet = true;
}
bool LinearTradeRecordItem::orderIdIsSet() const
{
    return m_Order_idIsSet;
}

void LinearTradeRecordItem::unsetOrder_id()
{
    m_Order_idIsSet = false;
}

utility::string_t LinearTradeRecordItem::getOrderLinkId() const
{
    return m_Order_link_id;
}


void LinearTradeRecordItem::setOrderLinkId(utility::string_t value)
{
    m_Order_link_id = value;
    m_Order_link_idIsSet = true;
}
bool LinearTradeRecordItem::orderLinkIdIsSet() const
{
    return m_Order_link_idIsSet;
}

void LinearTradeRecordItem::unsetOrder_link_id()
{
    m_Order_link_idIsSet = false;
}

double LinearTradeRecordItem::getOrderPrice() const
{
    return m_Order_price;
}


void LinearTradeRecordItem::setOrderPrice(double value)
{
    m_Order_price = value;
    m_Order_priceIsSet = true;
}
bool LinearTradeRecordItem::orderPriceIsSet() const
{
    return m_Order_priceIsSet;
}

void LinearTradeRecordItem::unsetOrder_price()
{
    m_Order_priceIsSet = false;
}

double LinearTradeRecordItem::getOrderQty() const
{
    return m_Order_qty;
}


void LinearTradeRecordItem::setOrderQty(double value)
{
    m_Order_qty = value;
    m_Order_qtyIsSet = true;
}
bool LinearTradeRecordItem::orderQtyIsSet() const
{
    return m_Order_qtyIsSet;
}

void LinearTradeRecordItem::unsetOrder_qty()
{
    m_Order_qtyIsSet = false;
}

utility::string_t LinearTradeRecordItem::getOrderType() const
{
    return m_Order_type;
}


void LinearTradeRecordItem::setOrderType(utility::string_t value)
{
    m_Order_type = value;
    m_Order_typeIsSet = true;
}
bool LinearTradeRecordItem::orderTypeIsSet() const
{
    return m_Order_typeIsSet;
}

void LinearTradeRecordItem::unsetOrder_type()
{
    m_Order_typeIsSet = false;
}

double LinearTradeRecordItem::getPrice() const
{
    return m_Price;
}


void LinearTradeRecordItem::setPrice(double value)
{
    m_Price = value;
    m_PriceIsSet = true;
}
bool LinearTradeRecordItem::priceIsSet() const
{
    return m_PriceIsSet;
}

void LinearTradeRecordItem::unsetPrice()
{
    m_PriceIsSet = false;
}

utility::string_t LinearTradeRecordItem::getSide() const
{
    return m_Side;
}


void LinearTradeRecordItem::setSide(utility::string_t value)
{
    m_Side = value;
    m_SideIsSet = true;
}
bool LinearTradeRecordItem::sideIsSet() const
{
    return m_SideIsSet;
}

void LinearTradeRecordItem::unsetSide()
{
    m_SideIsSet = false;
}

utility::string_t LinearTradeRecordItem::getSymbol() const
{
    return m_Symbol;
}


void LinearTradeRecordItem::setSymbol(utility::string_t value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}
bool LinearTradeRecordItem::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void LinearTradeRecordItem::unsetSymbol()
{
    m_SymbolIsSet = false;
}

int64_t LinearTradeRecordItem::getTradeTime() const
{
    return m_Trade_time;
}


void LinearTradeRecordItem::setTradeTime(int64_t value)
{
    m_Trade_time = value;
    m_Trade_timeIsSet = true;
}
bool LinearTradeRecordItem::tradeTimeIsSet() const
{
    return m_Trade_timeIsSet;
}

void LinearTradeRecordItem::unsetTrade_time()
{
    m_Trade_timeIsSet = false;
}

int64_t LinearTradeRecordItem::getTradeTimeMs() const
{
    return m_Trade_time_ms;
}


void LinearTradeRecordItem::setTradeTimeMs(int64_t value)
{
    m_Trade_time_ms = value;
    m_Trade_time_msIsSet = true;
}
bool LinearTradeRecordItem::tradeTimeMsIsSet() const
{
    return m_Trade_time_msIsSet;
}

void LinearTradeRecordItem::unsetTrade_time_ms()
{
    m_Trade_time_msIsSet = false;
}

}
}
}
}

