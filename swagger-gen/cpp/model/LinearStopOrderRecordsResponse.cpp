/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "LinearStopOrderRecordsResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

LinearStopOrderRecordsResponse::LinearStopOrderRecordsResponse()
{
    m_Current_page = 0L;
    m_Current_pageIsSet = false;
    m_Last_page = 0L;
    m_Last_pageIsSet = false;
    m_DataIsSet = false;
}

LinearStopOrderRecordsResponse::~LinearStopOrderRecordsResponse()
{
}

void LinearStopOrderRecordsResponse::validate()
{
    // TODO: implement validation
}

web::json::value LinearStopOrderRecordsResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Current_pageIsSet)
    {
        val[utility::conversions::to_string_t("current_page")] = ModelBase::toJson(m_Current_page);
    }
    if(m_Last_pageIsSet)
    {
        val[utility::conversions::to_string_t("last_page")] = ModelBase::toJson(m_Last_page);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Data )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("data")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void LinearStopOrderRecordsResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("current_page")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("current_page")];
        if(!fieldValue.is_null())
        {
            setCurrentPage(ModelBase::int64_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("last_page")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("last_page")];
        if(!fieldValue.is_null())
        {
            setLastPage(ModelBase::int64_tFromJson(fieldValue));
        }
    }
    {
        m_Data.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("data")))
        {
        for( auto& item : val[utility::conversions::to_string_t("data")].as_array() )
        {
            if(item.is_null())
            {
                m_Data.push_back( std::shared_ptr<LinearListStopOrderResult>(nullptr) );
            }
            else
            {
                std::shared_ptr<LinearListStopOrderResult> newItem(new LinearListStopOrderResult());
                newItem->fromJson(item);
                m_Data.push_back( newItem );
            }
        }
        }
    }
}

void LinearStopOrderRecordsResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Current_pageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("current_page"), m_Current_page));
    }
    if(m_Last_pageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("last_page"), m_Last_page));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Data )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("data"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void LinearStopOrderRecordsResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("current_page")))
    {
        setCurrentPage(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("current_page"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("last_page")))
    {
        setLastPage(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("last_page"))));
    }
    {
        m_Data.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("data")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("data"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Data.push_back( std::shared_ptr<LinearListStopOrderResult>(nullptr) );
            }
            else
            {
                std::shared_ptr<LinearListStopOrderResult> newItem(new LinearListStopOrderResult());
                newItem->fromJson(item);
                m_Data.push_back( newItem );
            }
        }
        }
    }
}

int64_t LinearStopOrderRecordsResponse::getCurrentPage() const
{
    return m_Current_page;
}


void LinearStopOrderRecordsResponse::setCurrentPage(int64_t value)
{
    m_Current_page = value;
    m_Current_pageIsSet = true;
}
bool LinearStopOrderRecordsResponse::currentPageIsSet() const
{
    return m_Current_pageIsSet;
}

void LinearStopOrderRecordsResponse::unsetCurrent_page()
{
    m_Current_pageIsSet = false;
}

int64_t LinearStopOrderRecordsResponse::getLastPage() const
{
    return m_Last_page;
}


void LinearStopOrderRecordsResponse::setLastPage(int64_t value)
{
    m_Last_page = value;
    m_Last_pageIsSet = true;
}
bool LinearStopOrderRecordsResponse::lastPageIsSet() const
{
    return m_Last_pageIsSet;
}

void LinearStopOrderRecordsResponse::unsetLast_page()
{
    m_Last_pageIsSet = false;
}

std::vector<std::shared_ptr<LinearListStopOrderResult>>& LinearStopOrderRecordsResponse::getData()
{
    return m_Data;
}

void LinearStopOrderRecordsResponse::setData(std::vector<std::shared_ptr<LinearListStopOrderResult>> value)
{
    m_Data = value;
    m_DataIsSet = true;
}
bool LinearStopOrderRecordsResponse::dataIsSet() const
{
    return m_DataIsSet;
}

void LinearStopOrderRecordsResponse::unsetData()
{
    m_DataIsSet = false;
}

}
}
}
}

