/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ClosedPnlInfo.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ClosedPnlInfo::ClosedPnlInfo()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_User_id = 0;
    m_User_idIsSet = false;
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Order_id = utility::conversions::to_string_t("");
    m_Order_idIsSet = false;
    m_Side = utility::conversions::to_string_t("");
    m_SideIsSet = false;
    m_Qty = 0;
    m_QtyIsSet = false;
    m_Order_price = 0;
    m_Order_priceIsSet = false;
    m_Order_type = utility::conversions::to_string_t("");
    m_Order_typeIsSet = false;
    m_Exec_type = utility::conversions::to_string_t("");
    m_Exec_typeIsSet = false;
    m_Closed_size = 0;
    m_Closed_sizeIsSet = false;
    m_Cum_entry_value = 0.0;
    m_Cum_entry_valueIsSet = false;
    m_Avg_entry_price = 0;
    m_Avg_entry_priceIsSet = false;
    m_Cum_exit_value = 0.0;
    m_Cum_exit_valueIsSet = false;
    m_Avg_exit_price = 0;
    m_Avg_exit_priceIsSet = false;
    m_Closed_pnl = 0.0;
    m_Closed_pnlIsSet = false;
    m_Fill_count = 0;
    m_Fill_countIsSet = false;
    m_Leverage = 0;
    m_LeverageIsSet = false;
    m_Created_at = 0;
    m_Created_atIsSet = false;
}

ClosedPnlInfo::~ClosedPnlInfo()
{
}

void ClosedPnlInfo::validate()
{
    // TODO: implement validation
}

web::json::value ClosedPnlInfo::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t("user_id")] = ModelBase::toJson(m_User_id);
    }
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t("symbol")] = ModelBase::toJson(m_Symbol);
    }
    if(m_Order_idIsSet)
    {
        val[utility::conversions::to_string_t("order_id")] = ModelBase::toJson(m_Order_id);
    }
    if(m_SideIsSet)
    {
        val[utility::conversions::to_string_t("side")] = ModelBase::toJson(m_Side);
    }
    if(m_QtyIsSet)
    {
        val[utility::conversions::to_string_t("qty")] = ModelBase::toJson(m_Qty);
    }
    if(m_Order_priceIsSet)
    {
        val[utility::conversions::to_string_t("order_price")] = ModelBase::toJson(m_Order_price);
    }
    if(m_Order_typeIsSet)
    {
        val[utility::conversions::to_string_t("order_type")] = ModelBase::toJson(m_Order_type);
    }
    if(m_Exec_typeIsSet)
    {
        val[utility::conversions::to_string_t("exec_type")] = ModelBase::toJson(m_Exec_type);
    }
    if(m_Closed_sizeIsSet)
    {
        val[utility::conversions::to_string_t("closed_size")] = ModelBase::toJson(m_Closed_size);
    }
    if(m_Cum_entry_valueIsSet)
    {
        val[utility::conversions::to_string_t("cum_entry_value")] = ModelBase::toJson(m_Cum_entry_value);
    }
    if(m_Avg_entry_priceIsSet)
    {
        val[utility::conversions::to_string_t("avg_entry_price")] = ModelBase::toJson(m_Avg_entry_price);
    }
    if(m_Cum_exit_valueIsSet)
    {
        val[utility::conversions::to_string_t("cum_exit_value")] = ModelBase::toJson(m_Cum_exit_value);
    }
    if(m_Avg_exit_priceIsSet)
    {
        val[utility::conversions::to_string_t("avg_exit_price")] = ModelBase::toJson(m_Avg_exit_price);
    }
    if(m_Closed_pnlIsSet)
    {
        val[utility::conversions::to_string_t("closed_pnl")] = ModelBase::toJson(m_Closed_pnl);
    }
    if(m_Fill_countIsSet)
    {
        val[utility::conversions::to_string_t("fill_count")] = ModelBase::toJson(m_Fill_count);
    }
    if(m_LeverageIsSet)
    {
        val[utility::conversions::to_string_t("leverage")] = ModelBase::toJson(m_Leverage);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t("created_at")] = ModelBase::toJson(m_Created_at);
    }

    return val;
}

void ClosedPnlInfo::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("user_id")];
        if(!fieldValue.is_null())
        {
            setUserId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("symbol")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("symbol")];
        if(!fieldValue.is_null())
        {
            setSymbol(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("order_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("order_id")];
        if(!fieldValue.is_null())
        {
            setOrderId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("side")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("side")];
        if(!fieldValue.is_null())
        {
            setSide(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("qty")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("qty")];
        if(!fieldValue.is_null())
        {
            setQty(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("order_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("order_price")];
        if(!fieldValue.is_null())
        {
            setOrderPrice(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("order_type")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("order_type")];
        if(!fieldValue.is_null())
        {
            setOrderType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exec_type")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("exec_type")];
        if(!fieldValue.is_null())
        {
            setExecType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("closed_size")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("closed_size")];
        if(!fieldValue.is_null())
        {
            setClosedSize(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cum_entry_value")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("cum_entry_value")];
        if(!fieldValue.is_null())
        {
            setCumEntryValue(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("avg_entry_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("avg_entry_price")];
        if(!fieldValue.is_null())
        {
            setAvgEntryPrice(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cum_exit_value")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("cum_exit_value")];
        if(!fieldValue.is_null())
        {
            setCumExitValue(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("avg_exit_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("avg_exit_price")];
        if(!fieldValue.is_null())
        {
            setAvgExitPrice(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("closed_pnl")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("closed_pnl")];
        if(!fieldValue.is_null())
        {
            setClosedPnl(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fill_count")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("fill_count")];
        if(!fieldValue.is_null())
        {
            setFillCount(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("leverage")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("leverage")];
        if(!fieldValue.is_null())
        {
            setLeverage(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("created_at")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("created_at")];
        if(!fieldValue.is_null())
        {
            setCreatedAt(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void ClosedPnlInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user_id"), m_User_id));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbol"), m_Symbol));
        
    }
    if(m_Order_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_id"), m_Order_id));
        
    }
    if(m_SideIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("side"), m_Side));
        
    }
    if(m_QtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("qty"), m_Qty));
    }
    if(m_Order_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_price"), m_Order_price));
    }
    if(m_Order_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_type"), m_Order_type));
        
    }
    if(m_Exec_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exec_type"), m_Exec_type));
        
    }
    if(m_Closed_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("closed_size"), m_Closed_size));
    }
    if(m_Cum_entry_valueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cum_entry_value"), m_Cum_entry_value));
    }
    if(m_Avg_entry_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("avg_entry_price"), m_Avg_entry_price));
    }
    if(m_Cum_exit_valueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cum_exit_value"), m_Cum_exit_value));
    }
    if(m_Avg_exit_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("avg_exit_price"), m_Avg_exit_price));
    }
    if(m_Closed_pnlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("closed_pnl"), m_Closed_pnl));
    }
    if(m_Fill_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fill_count"), m_Fill_count));
    }
    if(m_LeverageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("leverage"), m_Leverage));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created_at"), m_Created_at));
    }
}

void ClosedPnlInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user_id")))
    {
        setUserId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("user_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("symbol")))
    {
        setSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbol"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("order_id")))
    {
        setOrderId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("side")))
    {
        setSide(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("side"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("qty")))
    {
        setQty(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("qty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("order_price")))
    {
        setOrderPrice(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("order_type")))
    {
        setOrderType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exec_type")))
    {
        setExecType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("exec_type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("closed_size")))
    {
        setClosedSize(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("closed_size"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cum_entry_value")))
    {
        setCumEntryValue(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("cum_entry_value"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("avg_entry_price")))
    {
        setAvgEntryPrice(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("avg_entry_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cum_exit_value")))
    {
        setCumExitValue(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("cum_exit_value"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("avg_exit_price")))
    {
        setAvgExitPrice(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("avg_exit_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("closed_pnl")))
    {
        setClosedPnl(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("closed_pnl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fill_count")))
    {
        setFillCount(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("fill_count"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("leverage")))
    {
        setLeverage(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("leverage"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("created_at")))
    {
        setCreatedAt(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("created_at"))));
    }
}

int32_t ClosedPnlInfo::getId() const
{
    return m_Id;
}


void ClosedPnlInfo::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool ClosedPnlInfo::idIsSet() const
{
    return m_IdIsSet;
}

void ClosedPnlInfo::unsetId()
{
    m_IdIsSet = false;
}

int32_t ClosedPnlInfo::getUserId() const
{
    return m_User_id;
}


void ClosedPnlInfo::setUserId(int32_t value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}
bool ClosedPnlInfo::userIdIsSet() const
{
    return m_User_idIsSet;
}

void ClosedPnlInfo::unsetUser_id()
{
    m_User_idIsSet = false;
}

utility::string_t ClosedPnlInfo::getSymbol() const
{
    return m_Symbol;
}


void ClosedPnlInfo::setSymbol(utility::string_t value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}
bool ClosedPnlInfo::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void ClosedPnlInfo::unsetSymbol()
{
    m_SymbolIsSet = false;
}

utility::string_t ClosedPnlInfo::getOrderId() const
{
    return m_Order_id;
}


void ClosedPnlInfo::setOrderId(utility::string_t value)
{
    m_Order_id = value;
    m_Order_idIsSet = true;
}
bool ClosedPnlInfo::orderIdIsSet() const
{
    return m_Order_idIsSet;
}

void ClosedPnlInfo::unsetOrder_id()
{
    m_Order_idIsSet = false;
}

utility::string_t ClosedPnlInfo::getSide() const
{
    return m_Side;
}


void ClosedPnlInfo::setSide(utility::string_t value)
{
    m_Side = value;
    m_SideIsSet = true;
}
bool ClosedPnlInfo::sideIsSet() const
{
    return m_SideIsSet;
}

void ClosedPnlInfo::unsetSide()
{
    m_SideIsSet = false;
}

int32_t ClosedPnlInfo::getQty() const
{
    return m_Qty;
}


void ClosedPnlInfo::setQty(int32_t value)
{
    m_Qty = value;
    m_QtyIsSet = true;
}
bool ClosedPnlInfo::qtyIsSet() const
{
    return m_QtyIsSet;
}

void ClosedPnlInfo::unsetQty()
{
    m_QtyIsSet = false;
}

int32_t ClosedPnlInfo::getOrderPrice() const
{
    return m_Order_price;
}


void ClosedPnlInfo::setOrderPrice(int32_t value)
{
    m_Order_price = value;
    m_Order_priceIsSet = true;
}
bool ClosedPnlInfo::orderPriceIsSet() const
{
    return m_Order_priceIsSet;
}

void ClosedPnlInfo::unsetOrder_price()
{
    m_Order_priceIsSet = false;
}

utility::string_t ClosedPnlInfo::getOrderType() const
{
    return m_Order_type;
}


void ClosedPnlInfo::setOrderType(utility::string_t value)
{
    m_Order_type = value;
    m_Order_typeIsSet = true;
}
bool ClosedPnlInfo::orderTypeIsSet() const
{
    return m_Order_typeIsSet;
}

void ClosedPnlInfo::unsetOrder_type()
{
    m_Order_typeIsSet = false;
}

utility::string_t ClosedPnlInfo::getExecType() const
{
    return m_Exec_type;
}


void ClosedPnlInfo::setExecType(utility::string_t value)
{
    m_Exec_type = value;
    m_Exec_typeIsSet = true;
}
bool ClosedPnlInfo::execTypeIsSet() const
{
    return m_Exec_typeIsSet;
}

void ClosedPnlInfo::unsetExec_type()
{
    m_Exec_typeIsSet = false;
}

int32_t ClosedPnlInfo::getClosedSize() const
{
    return m_Closed_size;
}


void ClosedPnlInfo::setClosedSize(int32_t value)
{
    m_Closed_size = value;
    m_Closed_sizeIsSet = true;
}
bool ClosedPnlInfo::closedSizeIsSet() const
{
    return m_Closed_sizeIsSet;
}

void ClosedPnlInfo::unsetClosed_size()
{
    m_Closed_sizeIsSet = false;
}

double ClosedPnlInfo::getCumEntryValue() const
{
    return m_Cum_entry_value;
}


void ClosedPnlInfo::setCumEntryValue(double value)
{
    m_Cum_entry_value = value;
    m_Cum_entry_valueIsSet = true;
}
bool ClosedPnlInfo::cumEntryValueIsSet() const
{
    return m_Cum_entry_valueIsSet;
}

void ClosedPnlInfo::unsetCum_entry_value()
{
    m_Cum_entry_valueIsSet = false;
}

int32_t ClosedPnlInfo::getAvgEntryPrice() const
{
    return m_Avg_entry_price;
}


void ClosedPnlInfo::setAvgEntryPrice(int32_t value)
{
    m_Avg_entry_price = value;
    m_Avg_entry_priceIsSet = true;
}
bool ClosedPnlInfo::avgEntryPriceIsSet() const
{
    return m_Avg_entry_priceIsSet;
}

void ClosedPnlInfo::unsetAvg_entry_price()
{
    m_Avg_entry_priceIsSet = false;
}

double ClosedPnlInfo::getCumExitValue() const
{
    return m_Cum_exit_value;
}


void ClosedPnlInfo::setCumExitValue(double value)
{
    m_Cum_exit_value = value;
    m_Cum_exit_valueIsSet = true;
}
bool ClosedPnlInfo::cumExitValueIsSet() const
{
    return m_Cum_exit_valueIsSet;
}

void ClosedPnlInfo::unsetCum_exit_value()
{
    m_Cum_exit_valueIsSet = false;
}

int32_t ClosedPnlInfo::getAvgExitPrice() const
{
    return m_Avg_exit_price;
}


void ClosedPnlInfo::setAvgExitPrice(int32_t value)
{
    m_Avg_exit_price = value;
    m_Avg_exit_priceIsSet = true;
}
bool ClosedPnlInfo::avgExitPriceIsSet() const
{
    return m_Avg_exit_priceIsSet;
}

void ClosedPnlInfo::unsetAvg_exit_price()
{
    m_Avg_exit_priceIsSet = false;
}

double ClosedPnlInfo::getClosedPnl() const
{
    return m_Closed_pnl;
}


void ClosedPnlInfo::setClosedPnl(double value)
{
    m_Closed_pnl = value;
    m_Closed_pnlIsSet = true;
}
bool ClosedPnlInfo::closedPnlIsSet() const
{
    return m_Closed_pnlIsSet;
}

void ClosedPnlInfo::unsetClosed_pnl()
{
    m_Closed_pnlIsSet = false;
}

int32_t ClosedPnlInfo::getFillCount() const
{
    return m_Fill_count;
}


void ClosedPnlInfo::setFillCount(int32_t value)
{
    m_Fill_count = value;
    m_Fill_countIsSet = true;
}
bool ClosedPnlInfo::fillCountIsSet() const
{
    return m_Fill_countIsSet;
}

void ClosedPnlInfo::unsetFill_count()
{
    m_Fill_countIsSet = false;
}

int32_t ClosedPnlInfo::getLeverage() const
{
    return m_Leverage;
}


void ClosedPnlInfo::setLeverage(int32_t value)
{
    m_Leverage = value;
    m_LeverageIsSet = true;
}
bool ClosedPnlInfo::leverageIsSet() const
{
    return m_LeverageIsSet;
}

void ClosedPnlInfo::unsetLeverage()
{
    m_LeverageIsSet = false;
}

int32_t ClosedPnlInfo::getCreatedAt() const
{
    return m_Created_at;
}


void ClosedPnlInfo::setCreatedAt(int32_t value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}
bool ClosedPnlInfo::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void ClosedPnlInfo::unsetCreated_at()
{
    m_Created_atIsSet = false;
}

}
}
}
}

