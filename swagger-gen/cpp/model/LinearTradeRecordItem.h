/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * LinearTradeRecordItem.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_LinearTradeRecordItem_H_
#define IO_SWAGGER_CLIENT_MODEL_LinearTradeRecordItem_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  LinearTradeRecordItem
    : public ModelBase
{
public:
    LinearTradeRecordItem();
    virtual ~LinearTradeRecordItem();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LinearTradeRecordItem members

    /// <summary>
    /// 
    /// </summary>
    double getClosedSize() const;
    bool closedSizeIsSet() const;
    void unsetClosed_size();
    void setClosedSize(double value);
    /// <summary>
    /// 
    /// </summary>
    double getExecFee() const;
    bool execFeeIsSet() const;
    void unsetExec_fee();
    void setExecFee(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getExecId() const;
    bool execIdIsSet() const;
    void unsetExec_id();
    void setExecId(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    double getExecPrice() const;
    bool execPriceIsSet() const;
    void unsetExec_price();
    void setExecPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getExecQty() const;
    bool execQtyIsSet() const;
    void unsetExec_qty();
    void setExecQty(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getExecType() const;
    bool execTypeIsSet() const;
    void unsetExec_type();
    void setExecType(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    double getExecValue() const;
    bool execValueIsSet() const;
    void unsetExec_value();
    void setExecValue(double value);
    /// <summary>
    /// 
    /// </summary>
    double getFeeRate() const;
    bool feeRateIsSet() const;
    void unsetFee_rate();
    void setFeeRate(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLastLiquidityInd() const;
    bool lastLiquidityIndIsSet() const;
    void unsetLast_liquidity_ind();
    void setLastLiquidityInd(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    double getLeavesQty() const;
    bool leavesQtyIsSet() const;
    void unsetLeaves_qty();
    void setLeavesQty(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOrderId() const;
    bool orderIdIsSet() const;
    void unsetOrder_id();
    void setOrderId(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOrderLinkId() const;
    bool orderLinkIdIsSet() const;
    void unsetOrder_link_id();
    void setOrderLinkId(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    double getOrderPrice() const;
    bool orderPriceIsSet() const;
    void unsetOrder_price();
    void setOrderPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getOrderQty() const;
    bool orderQtyIsSet() const;
    void unsetOrder_qty();
    void setOrderQty(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOrderType() const;
    bool orderTypeIsSet() const;
    void unsetOrder_type();
    void setOrderType(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    double getPrice() const;
    bool priceIsSet() const;
    void unsetPrice();
    void setPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSide() const;
    bool sideIsSet() const;
    void unsetSide();
    void setSide(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSymbol() const;
    bool symbolIsSet() const;
    void unsetSymbol();
    void setSymbol(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getTradeTime() const;
    bool tradeTimeIsSet() const;
    void unsetTrade_time();
    void setTradeTime(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getTradeTimeMs() const;
    bool tradeTimeMsIsSet() const;
    void unsetTrade_time_ms();
    void setTradeTimeMs(int64_t value);

protected:
    double m_Closed_size;
    bool m_Closed_sizeIsSet;
    double m_Exec_fee;
    bool m_Exec_feeIsSet;
    utility::string_t m_Exec_id;
    bool m_Exec_idIsSet;
    double m_Exec_price;
    bool m_Exec_priceIsSet;
    double m_Exec_qty;
    bool m_Exec_qtyIsSet;
    utility::string_t m_Exec_type;
    bool m_Exec_typeIsSet;
    double m_Exec_value;
    bool m_Exec_valueIsSet;
    double m_Fee_rate;
    bool m_Fee_rateIsSet;
    utility::string_t m_Last_liquidity_ind;
    bool m_Last_liquidity_indIsSet;
    double m_Leaves_qty;
    bool m_Leaves_qtyIsSet;
    utility::string_t m_Order_id;
    bool m_Order_idIsSet;
    utility::string_t m_Order_link_id;
    bool m_Order_link_idIsSet;
    double m_Order_price;
    bool m_Order_priceIsSet;
    double m_Order_qty;
    bool m_Order_qtyIsSet;
    utility::string_t m_Order_type;
    bool m_Order_typeIsSet;
    double m_Price;
    bool m_PriceIsSet;
    utility::string_t m_Side;
    bool m_SideIsSet;
    utility::string_t m_Symbol;
    bool m_SymbolIsSet;
    int64_t m_Trade_time;
    bool m_Trade_timeIsSet;
    int64_t m_Trade_time_ms;
    bool m_Trade_time_msIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_LinearTradeRecordItem_H_ */
