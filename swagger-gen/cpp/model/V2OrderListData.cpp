/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "V2OrderListData.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

V2OrderListData::V2OrderListData()
{
    m_DataIsSet = false;
    m_Cursor = utility::conversions::to_string_t("");
    m_CursorIsSet = false;
}

V2OrderListData::~V2OrderListData()
{
}

void V2OrderListData::validate()
{
    // TODO: implement validation
}

web::json::value V2OrderListData::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Data )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("data")] = web::json::value::array(jsonArray);
        }
    }
    if(m_CursorIsSet)
    {
        val[utility::conversions::to_string_t("cursor")] = ModelBase::toJson(m_Cursor);
    }

    return val;
}

void V2OrderListData::fromJson(web::json::value& val)
{
    {
        m_Data.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("data")))
        {
        for( auto& item : val[utility::conversions::to_string_t("data")].as_array() )
        {
            if(item.is_null())
            {
                m_Data.push_back( std::shared_ptr<V2OrderRes>(nullptr) );
            }
            else
            {
                std::shared_ptr<V2OrderRes> newItem(new V2OrderRes());
                newItem->fromJson(item);
                m_Data.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cursor")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("cursor")];
        if(!fieldValue.is_null())
        {
            setCursor(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void V2OrderListData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Data )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("data"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_CursorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cursor"), m_Cursor));
        
    }
}

void V2OrderListData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        m_Data.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("data")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("data"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Data.push_back( std::shared_ptr<V2OrderRes>(nullptr) );
            }
            else
            {
                std::shared_ptr<V2OrderRes> newItem(new V2OrderRes());
                newItem->fromJson(item);
                m_Data.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cursor")))
    {
        setCursor(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("cursor"))));
    }
}

std::vector<std::shared_ptr<V2OrderRes>>& V2OrderListData::getData()
{
    return m_Data;
}

void V2OrderListData::setData(std::vector<std::shared_ptr<V2OrderRes>> value)
{
    m_Data = value;
    m_DataIsSet = true;
}
bool V2OrderListData::dataIsSet() const
{
    return m_DataIsSet;
}

void V2OrderListData::unsetData()
{
    m_DataIsSet = false;
}

utility::string_t V2OrderListData::getCursor() const
{
    return m_Cursor;
}


void V2OrderListData::setCursor(utility::string_t value)
{
    m_Cursor = value;
    m_CursorIsSet = true;
}
bool V2OrderListData::cursorIsSet() const
{
    return m_CursorIsSet;
}

void V2OrderListData::unsetCursor()
{
    m_CursorIsSet = false;
}

}
}
}
}

