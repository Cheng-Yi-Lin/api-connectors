/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "LinearPositionListResult.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

LinearPositionListResult::LinearPositionListResult()
{
    m_Bust_price = 0.0;
    m_Bust_priceIsSet = false;
    m_Cum_realised_pnl = 0.0;
    m_Cum_realised_pnlIsSet = false;
    m_Entry_price = 0.0;
    m_Entry_priceIsSet = false;
    m_Free_qty = 0.0;
    m_Free_qtyIsSet = false;
    m_Leverage = 0.0;
    m_LeverageIsSet = false;
    m_Liq_price = 0.0;
    m_Liq_priceIsSet = false;
    m_Occ_closing_fee = 0.0;
    m_Occ_closing_feeIsSet = false;
    m_Position_margin = 0.0;
    m_Position_marginIsSet = false;
    m_Position_value = 0.0;
    m_Position_valueIsSet = false;
    m_Realised_pnl = 0.0;
    m_Realised_pnlIsSet = false;
    m_Side = utility::conversions::to_string_t("");
    m_SideIsSet = false;
    m_Size = 0.0;
    m_SizeIsSet = false;
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_User_id = 0L;
    m_User_idIsSet = false;
    m_Tp_sl_mode = utility::conversions::to_string_t("");
    m_Tp_sl_modeIsSet = false;
}

LinearPositionListResult::~LinearPositionListResult()
{
}

void LinearPositionListResult::validate()
{
    // TODO: implement validation
}

web::json::value LinearPositionListResult::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Bust_priceIsSet)
    {
        val[utility::conversions::to_string_t("bust_price")] = ModelBase::toJson(m_Bust_price);
    }
    if(m_Cum_realised_pnlIsSet)
    {
        val[utility::conversions::to_string_t("cum_realised_pnl")] = ModelBase::toJson(m_Cum_realised_pnl);
    }
    if(m_Entry_priceIsSet)
    {
        val[utility::conversions::to_string_t("entry_price")] = ModelBase::toJson(m_Entry_price);
    }
    if(m_Free_qtyIsSet)
    {
        val[utility::conversions::to_string_t("free_qty")] = ModelBase::toJson(m_Free_qty);
    }
    if(m_LeverageIsSet)
    {
        val[utility::conversions::to_string_t("leverage")] = ModelBase::toJson(m_Leverage);
    }
    if(m_Liq_priceIsSet)
    {
        val[utility::conversions::to_string_t("liq_price")] = ModelBase::toJson(m_Liq_price);
    }
    if(m_Occ_closing_feeIsSet)
    {
        val[utility::conversions::to_string_t("occ_closing_fee")] = ModelBase::toJson(m_Occ_closing_fee);
    }
    if(m_Position_marginIsSet)
    {
        val[utility::conversions::to_string_t("position_margin")] = ModelBase::toJson(m_Position_margin);
    }
    if(m_Position_valueIsSet)
    {
        val[utility::conversions::to_string_t("position_value")] = ModelBase::toJson(m_Position_value);
    }
    if(m_Realised_pnlIsSet)
    {
        val[utility::conversions::to_string_t("realised_pnl")] = ModelBase::toJson(m_Realised_pnl);
    }
    if(m_SideIsSet)
    {
        val[utility::conversions::to_string_t("side")] = ModelBase::toJson(m_Side);
    }
    if(m_SizeIsSet)
    {
        val[utility::conversions::to_string_t("size")] = ModelBase::toJson(m_Size);
    }
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t("symbol")] = ModelBase::toJson(m_Symbol);
    }
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t("user_id")] = ModelBase::toJson(m_User_id);
    }
    if(m_Tp_sl_modeIsSet)
    {
        val[utility::conversions::to_string_t("tp_sl_mode")] = ModelBase::toJson(m_Tp_sl_mode);
    }

    return val;
}

void LinearPositionListResult::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("bust_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("bust_price")];
        if(!fieldValue.is_null())
        {
            setBustPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cum_realised_pnl")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("cum_realised_pnl")];
        if(!fieldValue.is_null())
        {
            setCumRealisedPnl(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("entry_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("entry_price")];
        if(!fieldValue.is_null())
        {
            setEntryPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("free_qty")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("free_qty")];
        if(!fieldValue.is_null())
        {
            setFreeQty(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("leverage")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("leverage")];
        if(!fieldValue.is_null())
        {
            setLeverage(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("liq_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("liq_price")];
        if(!fieldValue.is_null())
        {
            setLiqPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("occ_closing_fee")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("occ_closing_fee")];
        if(!fieldValue.is_null())
        {
            setOccClosingFee(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("position_margin")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("position_margin")];
        if(!fieldValue.is_null())
        {
            setPositionMargin(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("position_value")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("position_value")];
        if(!fieldValue.is_null())
        {
            setPositionValue(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("realised_pnl")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("realised_pnl")];
        if(!fieldValue.is_null())
        {
            setRealisedPnl(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("side")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("side")];
        if(!fieldValue.is_null())
        {
            setSide(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("size")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("size")];
        if(!fieldValue.is_null())
        {
            setSize(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("symbol")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("symbol")];
        if(!fieldValue.is_null())
        {
            setSymbol(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("user_id")];
        if(!fieldValue.is_null())
        {
            setUserId(ModelBase::int64_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tp_sl_mode")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("tp_sl_mode")];
        if(!fieldValue.is_null())
        {
            setTpSlMode(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void LinearPositionListResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Bust_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bust_price"), m_Bust_price));
    }
    if(m_Cum_realised_pnlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cum_realised_pnl"), m_Cum_realised_pnl));
    }
    if(m_Entry_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("entry_price"), m_Entry_price));
    }
    if(m_Free_qtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("free_qty"), m_Free_qty));
    }
    if(m_LeverageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("leverage"), m_Leverage));
    }
    if(m_Liq_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("liq_price"), m_Liq_price));
    }
    if(m_Occ_closing_feeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("occ_closing_fee"), m_Occ_closing_fee));
    }
    if(m_Position_marginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("position_margin"), m_Position_margin));
    }
    if(m_Position_valueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("position_value"), m_Position_value));
    }
    if(m_Realised_pnlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("realised_pnl"), m_Realised_pnl));
    }
    if(m_SideIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("side"), m_Side));
        
    }
    if(m_SizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("size"), m_Size));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbol"), m_Symbol));
        
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user_id"), m_User_id));
    }
    if(m_Tp_sl_modeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tp_sl_mode"), m_Tp_sl_mode));
        
    }
}

void LinearPositionListResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("bust_price")))
    {
        setBustPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("bust_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cum_realised_pnl")))
    {
        setCumRealisedPnl(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("cum_realised_pnl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("entry_price")))
    {
        setEntryPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("entry_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("free_qty")))
    {
        setFreeQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("free_qty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("leverage")))
    {
        setLeverage(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("leverage"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("liq_price")))
    {
        setLiqPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("liq_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("occ_closing_fee")))
    {
        setOccClosingFee(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("occ_closing_fee"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("position_margin")))
    {
        setPositionMargin(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("position_margin"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("position_value")))
    {
        setPositionValue(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("position_value"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("realised_pnl")))
    {
        setRealisedPnl(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("realised_pnl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("side")))
    {
        setSide(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("side"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("size")))
    {
        setSize(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("size"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("symbol")))
    {
        setSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbol"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user_id")))
    {
        setUserId(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("user_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tp_sl_mode")))
    {
        setTpSlMode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tp_sl_mode"))));
    }
}

double LinearPositionListResult::getBustPrice() const
{
    return m_Bust_price;
}


void LinearPositionListResult::setBustPrice(double value)
{
    m_Bust_price = value;
    m_Bust_priceIsSet = true;
}
bool LinearPositionListResult::bustPriceIsSet() const
{
    return m_Bust_priceIsSet;
}

void LinearPositionListResult::unsetBust_price()
{
    m_Bust_priceIsSet = false;
}

double LinearPositionListResult::getCumRealisedPnl() const
{
    return m_Cum_realised_pnl;
}


void LinearPositionListResult::setCumRealisedPnl(double value)
{
    m_Cum_realised_pnl = value;
    m_Cum_realised_pnlIsSet = true;
}
bool LinearPositionListResult::cumRealisedPnlIsSet() const
{
    return m_Cum_realised_pnlIsSet;
}

void LinearPositionListResult::unsetCum_realised_pnl()
{
    m_Cum_realised_pnlIsSet = false;
}

double LinearPositionListResult::getEntryPrice() const
{
    return m_Entry_price;
}


void LinearPositionListResult::setEntryPrice(double value)
{
    m_Entry_price = value;
    m_Entry_priceIsSet = true;
}
bool LinearPositionListResult::entryPriceIsSet() const
{
    return m_Entry_priceIsSet;
}

void LinearPositionListResult::unsetEntry_price()
{
    m_Entry_priceIsSet = false;
}

double LinearPositionListResult::getFreeQty() const
{
    return m_Free_qty;
}


void LinearPositionListResult::setFreeQty(double value)
{
    m_Free_qty = value;
    m_Free_qtyIsSet = true;
}
bool LinearPositionListResult::freeQtyIsSet() const
{
    return m_Free_qtyIsSet;
}

void LinearPositionListResult::unsetFree_qty()
{
    m_Free_qtyIsSet = false;
}

double LinearPositionListResult::getLeverage() const
{
    return m_Leverage;
}


void LinearPositionListResult::setLeverage(double value)
{
    m_Leverage = value;
    m_LeverageIsSet = true;
}
bool LinearPositionListResult::leverageIsSet() const
{
    return m_LeverageIsSet;
}

void LinearPositionListResult::unsetLeverage()
{
    m_LeverageIsSet = false;
}

double LinearPositionListResult::getLiqPrice() const
{
    return m_Liq_price;
}


void LinearPositionListResult::setLiqPrice(double value)
{
    m_Liq_price = value;
    m_Liq_priceIsSet = true;
}
bool LinearPositionListResult::liqPriceIsSet() const
{
    return m_Liq_priceIsSet;
}

void LinearPositionListResult::unsetLiq_price()
{
    m_Liq_priceIsSet = false;
}

double LinearPositionListResult::getOccClosingFee() const
{
    return m_Occ_closing_fee;
}


void LinearPositionListResult::setOccClosingFee(double value)
{
    m_Occ_closing_fee = value;
    m_Occ_closing_feeIsSet = true;
}
bool LinearPositionListResult::occClosingFeeIsSet() const
{
    return m_Occ_closing_feeIsSet;
}

void LinearPositionListResult::unsetOcc_closing_fee()
{
    m_Occ_closing_feeIsSet = false;
}

double LinearPositionListResult::getPositionMargin() const
{
    return m_Position_margin;
}


void LinearPositionListResult::setPositionMargin(double value)
{
    m_Position_margin = value;
    m_Position_marginIsSet = true;
}
bool LinearPositionListResult::positionMarginIsSet() const
{
    return m_Position_marginIsSet;
}

void LinearPositionListResult::unsetPosition_margin()
{
    m_Position_marginIsSet = false;
}

double LinearPositionListResult::getPositionValue() const
{
    return m_Position_value;
}


void LinearPositionListResult::setPositionValue(double value)
{
    m_Position_value = value;
    m_Position_valueIsSet = true;
}
bool LinearPositionListResult::positionValueIsSet() const
{
    return m_Position_valueIsSet;
}

void LinearPositionListResult::unsetPosition_value()
{
    m_Position_valueIsSet = false;
}

double LinearPositionListResult::getRealisedPnl() const
{
    return m_Realised_pnl;
}


void LinearPositionListResult::setRealisedPnl(double value)
{
    m_Realised_pnl = value;
    m_Realised_pnlIsSet = true;
}
bool LinearPositionListResult::realisedPnlIsSet() const
{
    return m_Realised_pnlIsSet;
}

void LinearPositionListResult::unsetRealised_pnl()
{
    m_Realised_pnlIsSet = false;
}

utility::string_t LinearPositionListResult::getSide() const
{
    return m_Side;
}


void LinearPositionListResult::setSide(utility::string_t value)
{
    m_Side = value;
    m_SideIsSet = true;
}
bool LinearPositionListResult::sideIsSet() const
{
    return m_SideIsSet;
}

void LinearPositionListResult::unsetSide()
{
    m_SideIsSet = false;
}

double LinearPositionListResult::getSize() const
{
    return m_Size;
}


void LinearPositionListResult::setSize(double value)
{
    m_Size = value;
    m_SizeIsSet = true;
}
bool LinearPositionListResult::sizeIsSet() const
{
    return m_SizeIsSet;
}

void LinearPositionListResult::unsetSize()
{
    m_SizeIsSet = false;
}

utility::string_t LinearPositionListResult::getSymbol() const
{
    return m_Symbol;
}


void LinearPositionListResult::setSymbol(utility::string_t value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}
bool LinearPositionListResult::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void LinearPositionListResult::unsetSymbol()
{
    m_SymbolIsSet = false;
}

int64_t LinearPositionListResult::getUserId() const
{
    return m_User_id;
}


void LinearPositionListResult::setUserId(int64_t value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}
bool LinearPositionListResult::userIdIsSet() const
{
    return m_User_idIsSet;
}

void LinearPositionListResult::unsetUser_id()
{
    m_User_idIsSet = false;
}

utility::string_t LinearPositionListResult::getTpSlMode() const
{
    return m_Tp_sl_mode;
}


void LinearPositionListResult::setTpSlMode(utility::string_t value)
{
    m_Tp_sl_mode = value;
    m_Tp_sl_modeIsSet = true;
}
bool LinearPositionListResult::tpSlModeIsSet() const
{
    return m_Tp_sl_modeIsSet;
}

void LinearPositionListResult::unsetTp_sl_mode()
{
    m_Tp_sl_modeIsSet = false;
}

}
}
}
}

