/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "LiqRecordsInfo.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

LiqRecordsInfo::LiqRecordsInfo()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Qty = 0;
    m_QtyIsSet = false;
    m_Side = utility::conversions::to_string_t("");
    m_SideIsSet = false;
    m_Time = 0;
    m_TimeIsSet = false;
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Price = 0;
    m_PriceIsSet = false;
}

LiqRecordsInfo::~LiqRecordsInfo()
{
}

void LiqRecordsInfo::validate()
{
    // TODO: implement validation
}

web::json::value LiqRecordsInfo::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_QtyIsSet)
    {
        val[utility::conversions::to_string_t("qty")] = ModelBase::toJson(m_Qty);
    }
    if(m_SideIsSet)
    {
        val[utility::conversions::to_string_t("side")] = ModelBase::toJson(m_Side);
    }
    if(m_TimeIsSet)
    {
        val[utility::conversions::to_string_t("time")] = ModelBase::toJson(m_Time);
    }
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t("symbol")] = ModelBase::toJson(m_Symbol);
    }
    if(m_PriceIsSet)
    {
        val[utility::conversions::to_string_t("price")] = ModelBase::toJson(m_Price);
    }

    return val;
}

void LiqRecordsInfo::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("qty")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("qty")];
        if(!fieldValue.is_null())
        {
            setQty(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("side")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("side")];
        if(!fieldValue.is_null())
        {
            setSide(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("time")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("time")];
        if(!fieldValue.is_null())
        {
            setTime(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("symbol")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("symbol")];
        if(!fieldValue.is_null())
        {
            setSymbol(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("price")];
        if(!fieldValue.is_null())
        {
            setPrice(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void LiqRecordsInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_QtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("qty"), m_Qty));
    }
    if(m_SideIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("side"), m_Side));
        
    }
    if(m_TimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("time"), m_Time));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbol"), m_Symbol));
        
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("price"), m_Price));
    }
}

void LiqRecordsInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("qty")))
    {
        setQty(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("qty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("side")))
    {
        setSide(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("side"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("time")))
    {
        setTime(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("time"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("symbol")))
    {
        setSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbol"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("price")))
    {
        setPrice(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("price"))));
    }
}

int32_t LiqRecordsInfo::getId() const
{
    return m_Id;
}


void LiqRecordsInfo::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool LiqRecordsInfo::idIsSet() const
{
    return m_IdIsSet;
}

void LiqRecordsInfo::unsetId()
{
    m_IdIsSet = false;
}

int32_t LiqRecordsInfo::getQty() const
{
    return m_Qty;
}


void LiqRecordsInfo::setQty(int32_t value)
{
    m_Qty = value;
    m_QtyIsSet = true;
}
bool LiqRecordsInfo::qtyIsSet() const
{
    return m_QtyIsSet;
}

void LiqRecordsInfo::unsetQty()
{
    m_QtyIsSet = false;
}

utility::string_t LiqRecordsInfo::getSide() const
{
    return m_Side;
}


void LiqRecordsInfo::setSide(utility::string_t value)
{
    m_Side = value;
    m_SideIsSet = true;
}
bool LiqRecordsInfo::sideIsSet() const
{
    return m_SideIsSet;
}

void LiqRecordsInfo::unsetSide()
{
    m_SideIsSet = false;
}

int32_t LiqRecordsInfo::getTime() const
{
    return m_Time;
}


void LiqRecordsInfo::setTime(int32_t value)
{
    m_Time = value;
    m_TimeIsSet = true;
}
bool LiqRecordsInfo::timeIsSet() const
{
    return m_TimeIsSet;
}

void LiqRecordsInfo::unsetTime()
{
    m_TimeIsSet = false;
}

utility::string_t LiqRecordsInfo::getSymbol() const
{
    return m_Symbol;
}


void LiqRecordsInfo::setSymbol(utility::string_t value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}
bool LiqRecordsInfo::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void LiqRecordsInfo::unsetSymbol()
{
    m_SymbolIsSet = false;
}

int32_t LiqRecordsInfo::getPrice() const
{
    return m_Price;
}


void LiqRecordsInfo::setPrice(int32_t value)
{
    m_Price = value;
    m_PriceIsSet = true;
}
bool LiqRecordsInfo::priceIsSet() const
{
    return m_PriceIsSet;
}

void LiqRecordsInfo::unsetPrice()
{
    m_PriceIsSet = false;
}

}
}
}
}

