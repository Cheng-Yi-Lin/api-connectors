/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "LinearCreateOrderResult.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

LinearCreateOrderResult::LinearCreateOrderResult()
{
    m_Created_time = utility::conversions::to_string_t("");
    m_Created_timeIsSet = false;
    m_Cum_exec_fee = 0.0;
    m_Cum_exec_feeIsSet = false;
    m_Cum_exec_qty = 0.0;
    m_Cum_exec_qtyIsSet = false;
    m_Cum_exec_value = 0.0;
    m_Cum_exec_valueIsSet = false;
    m_Last_exec_price = 0.0;
    m_Last_exec_priceIsSet = false;
    m_Order_id = utility::conversions::to_string_t("");
    m_Order_idIsSet = false;
    m_Order_link_id = utility::conversions::to_string_t("");
    m_Order_link_idIsSet = false;
    m_Order_status = utility::conversions::to_string_t("");
    m_Order_statusIsSet = false;
    m_Order_type = utility::conversions::to_string_t("");
    m_Order_typeIsSet = false;
    m_Price = 0.0;
    m_PriceIsSet = false;
    m_Qty = 0.0;
    m_QtyIsSet = false;
    m_Reduce_only = false;
    m_Reduce_onlyIsSet = false;
    m_Side = utility::conversions::to_string_t("");
    m_SideIsSet = false;
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Time_in_force = utility::conversions::to_string_t("");
    m_Time_in_forceIsSet = false;
    m_Updated_time = utility::conversions::to_string_t("");
    m_Updated_timeIsSet = false;
    m_User_id = 0L;
    m_User_idIsSet = false;
    m_Take_profit = 0.0;
    m_Take_profitIsSet = false;
    m_Stop_loss = 0.0;
    m_Stop_lossIsSet = false;
    m_Tp_trigger_by = utility::conversions::to_string_t("");
    m_Tp_trigger_byIsSet = false;
    m_Sl_trigger_by = utility::conversions::to_string_t("");
    m_Sl_trigger_byIsSet = false;
}

LinearCreateOrderResult::~LinearCreateOrderResult()
{
}

void LinearCreateOrderResult::validate()
{
    // TODO: implement validation
}

web::json::value LinearCreateOrderResult::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Created_timeIsSet)
    {
        val[utility::conversions::to_string_t("created_time")] = ModelBase::toJson(m_Created_time);
    }
    if(m_Cum_exec_feeIsSet)
    {
        val[utility::conversions::to_string_t("cum_exec_fee")] = ModelBase::toJson(m_Cum_exec_fee);
    }
    if(m_Cum_exec_qtyIsSet)
    {
        val[utility::conversions::to_string_t("cum_exec_qty")] = ModelBase::toJson(m_Cum_exec_qty);
    }
    if(m_Cum_exec_valueIsSet)
    {
        val[utility::conversions::to_string_t("cum_exec_value")] = ModelBase::toJson(m_Cum_exec_value);
    }
    if(m_Last_exec_priceIsSet)
    {
        val[utility::conversions::to_string_t("last_exec_price")] = ModelBase::toJson(m_Last_exec_price);
    }
    if(m_Order_idIsSet)
    {
        val[utility::conversions::to_string_t("order_id")] = ModelBase::toJson(m_Order_id);
    }
    if(m_Order_link_idIsSet)
    {
        val[utility::conversions::to_string_t("order_link_id")] = ModelBase::toJson(m_Order_link_id);
    }
    if(m_Order_statusIsSet)
    {
        val[utility::conversions::to_string_t("order_status")] = ModelBase::toJson(m_Order_status);
    }
    if(m_Order_typeIsSet)
    {
        val[utility::conversions::to_string_t("order_type")] = ModelBase::toJson(m_Order_type);
    }
    if(m_PriceIsSet)
    {
        val[utility::conversions::to_string_t("price")] = ModelBase::toJson(m_Price);
    }
    if(m_QtyIsSet)
    {
        val[utility::conversions::to_string_t("qty")] = ModelBase::toJson(m_Qty);
    }
    if(m_Reduce_onlyIsSet)
    {
        val[utility::conversions::to_string_t("reduce_only")] = ModelBase::toJson(m_Reduce_only);
    }
    if(m_SideIsSet)
    {
        val[utility::conversions::to_string_t("side")] = ModelBase::toJson(m_Side);
    }
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t("symbol")] = ModelBase::toJson(m_Symbol);
    }
    if(m_Time_in_forceIsSet)
    {
        val[utility::conversions::to_string_t("time_in_force")] = ModelBase::toJson(m_Time_in_force);
    }
    if(m_Updated_timeIsSet)
    {
        val[utility::conversions::to_string_t("updated_time")] = ModelBase::toJson(m_Updated_time);
    }
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t("user_id")] = ModelBase::toJson(m_User_id);
    }
    if(m_Take_profitIsSet)
    {
        val[utility::conversions::to_string_t("take_profit")] = ModelBase::toJson(m_Take_profit);
    }
    if(m_Stop_lossIsSet)
    {
        val[utility::conversions::to_string_t("stop_loss")] = ModelBase::toJson(m_Stop_loss);
    }
    if(m_Tp_trigger_byIsSet)
    {
        val[utility::conversions::to_string_t("tp_trigger_by")] = ModelBase::toJson(m_Tp_trigger_by);
    }
    if(m_Sl_trigger_byIsSet)
    {
        val[utility::conversions::to_string_t("sl_trigger_by")] = ModelBase::toJson(m_Sl_trigger_by);
    }

    return val;
}

void LinearCreateOrderResult::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("created_time")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("created_time")];
        if(!fieldValue.is_null())
        {
            setCreatedTime(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cum_exec_fee")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("cum_exec_fee")];
        if(!fieldValue.is_null())
        {
            setCumExecFee(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cum_exec_qty")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("cum_exec_qty")];
        if(!fieldValue.is_null())
        {
            setCumExecQty(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cum_exec_value")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("cum_exec_value")];
        if(!fieldValue.is_null())
        {
            setCumExecValue(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("last_exec_price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("last_exec_price")];
        if(!fieldValue.is_null())
        {
            setLastExecPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("order_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("order_id")];
        if(!fieldValue.is_null())
        {
            setOrderId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("order_link_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("order_link_id")];
        if(!fieldValue.is_null())
        {
            setOrderLinkId(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("order_status")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("order_status")];
        if(!fieldValue.is_null())
        {
            setOrderStatus(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("order_type")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("order_type")];
        if(!fieldValue.is_null())
        {
            setOrderType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("price")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("price")];
        if(!fieldValue.is_null())
        {
            setPrice(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("qty")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("qty")];
        if(!fieldValue.is_null())
        {
            setQty(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("reduce_only")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("reduce_only")];
        if(!fieldValue.is_null())
        {
            setReduceOnly(ModelBase::boolFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("side")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("side")];
        if(!fieldValue.is_null())
        {
            setSide(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("symbol")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("symbol")];
        if(!fieldValue.is_null())
        {
            setSymbol(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("time_in_force")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("time_in_force")];
        if(!fieldValue.is_null())
        {
            setTimeInForce(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updated_time")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("updated_time")];
        if(!fieldValue.is_null())
        {
            setUpdatedTime(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user_id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("user_id")];
        if(!fieldValue.is_null())
        {
            setUserId(ModelBase::int64_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("take_profit")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("take_profit")];
        if(!fieldValue.is_null())
        {
            setTakeProfit(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("stop_loss")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("stop_loss")];
        if(!fieldValue.is_null())
        {
            setStopLoss(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tp_trigger_by")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("tp_trigger_by")];
        if(!fieldValue.is_null())
        {
            setTpTriggerBy(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sl_trigger_by")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("sl_trigger_by")];
        if(!fieldValue.is_null())
        {
            setSlTriggerBy(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void LinearCreateOrderResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Created_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created_time"), m_Created_time));
        
    }
    if(m_Cum_exec_feeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cum_exec_fee"), m_Cum_exec_fee));
    }
    if(m_Cum_exec_qtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cum_exec_qty"), m_Cum_exec_qty));
    }
    if(m_Cum_exec_valueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cum_exec_value"), m_Cum_exec_value));
    }
    if(m_Last_exec_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("last_exec_price"), m_Last_exec_price));
    }
    if(m_Order_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_id"), m_Order_id));
        
    }
    if(m_Order_link_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_link_id"), m_Order_link_id));
        
    }
    if(m_Order_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_status"), m_Order_status));
        
    }
    if(m_Order_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order_type"), m_Order_type));
        
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("price"), m_Price));
    }
    if(m_QtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("qty"), m_Qty));
    }
    if(m_Reduce_onlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("reduce_only"), m_Reduce_only));
    }
    if(m_SideIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("side"), m_Side));
        
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbol"), m_Symbol));
        
    }
    if(m_Time_in_forceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("time_in_force"), m_Time_in_force));
        
    }
    if(m_Updated_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updated_time"), m_Updated_time));
        
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user_id"), m_User_id));
    }
    if(m_Take_profitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("take_profit"), m_Take_profit));
    }
    if(m_Stop_lossIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stop_loss"), m_Stop_loss));
    }
    if(m_Tp_trigger_byIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tp_trigger_by"), m_Tp_trigger_by));
        
    }
    if(m_Sl_trigger_byIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sl_trigger_by"), m_Sl_trigger_by));
        
    }
}

void LinearCreateOrderResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("created_time")))
    {
        setCreatedTime(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("created_time"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cum_exec_fee")))
    {
        setCumExecFee(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("cum_exec_fee"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cum_exec_qty")))
    {
        setCumExecQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("cum_exec_qty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cum_exec_value")))
    {
        setCumExecValue(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("cum_exec_value"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("last_exec_price")))
    {
        setLastExecPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("last_exec_price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("order_id")))
    {
        setOrderId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("order_link_id")))
    {
        setOrderLinkId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_link_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("order_status")))
    {
        setOrderStatus(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_status"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("order_type")))
    {
        setOrderType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("order_type"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("price")))
    {
        setPrice(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("price"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("qty")))
    {
        setQty(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("qty"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("reduce_only")))
    {
        setReduceOnly(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("reduce_only"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("side")))
    {
        setSide(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("side"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("symbol")))
    {
        setSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbol"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("time_in_force")))
    {
        setTimeInForce(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("time_in_force"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updated_time")))
    {
        setUpdatedTime(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("updated_time"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user_id")))
    {
        setUserId(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("user_id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("take_profit")))
    {
        setTakeProfit(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("take_profit"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stop_loss")))
    {
        setStopLoss(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("stop_loss"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tp_trigger_by")))
    {
        setTpTriggerBy(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tp_trigger_by"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sl_trigger_by")))
    {
        setSlTriggerBy(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sl_trigger_by"))));
    }
}

utility::string_t LinearCreateOrderResult::getCreatedTime() const
{
    return m_Created_time;
}


void LinearCreateOrderResult::setCreatedTime(utility::string_t value)
{
    m_Created_time = value;
    m_Created_timeIsSet = true;
}
bool LinearCreateOrderResult::createdTimeIsSet() const
{
    return m_Created_timeIsSet;
}

void LinearCreateOrderResult::unsetCreated_time()
{
    m_Created_timeIsSet = false;
}

double LinearCreateOrderResult::getCumExecFee() const
{
    return m_Cum_exec_fee;
}


void LinearCreateOrderResult::setCumExecFee(double value)
{
    m_Cum_exec_fee = value;
    m_Cum_exec_feeIsSet = true;
}
bool LinearCreateOrderResult::cumExecFeeIsSet() const
{
    return m_Cum_exec_feeIsSet;
}

void LinearCreateOrderResult::unsetCum_exec_fee()
{
    m_Cum_exec_feeIsSet = false;
}

double LinearCreateOrderResult::getCumExecQty() const
{
    return m_Cum_exec_qty;
}


void LinearCreateOrderResult::setCumExecQty(double value)
{
    m_Cum_exec_qty = value;
    m_Cum_exec_qtyIsSet = true;
}
bool LinearCreateOrderResult::cumExecQtyIsSet() const
{
    return m_Cum_exec_qtyIsSet;
}

void LinearCreateOrderResult::unsetCum_exec_qty()
{
    m_Cum_exec_qtyIsSet = false;
}

double LinearCreateOrderResult::getCumExecValue() const
{
    return m_Cum_exec_value;
}


void LinearCreateOrderResult::setCumExecValue(double value)
{
    m_Cum_exec_value = value;
    m_Cum_exec_valueIsSet = true;
}
bool LinearCreateOrderResult::cumExecValueIsSet() const
{
    return m_Cum_exec_valueIsSet;
}

void LinearCreateOrderResult::unsetCum_exec_value()
{
    m_Cum_exec_valueIsSet = false;
}

double LinearCreateOrderResult::getLastExecPrice() const
{
    return m_Last_exec_price;
}


void LinearCreateOrderResult::setLastExecPrice(double value)
{
    m_Last_exec_price = value;
    m_Last_exec_priceIsSet = true;
}
bool LinearCreateOrderResult::lastExecPriceIsSet() const
{
    return m_Last_exec_priceIsSet;
}

void LinearCreateOrderResult::unsetLast_exec_price()
{
    m_Last_exec_priceIsSet = false;
}

utility::string_t LinearCreateOrderResult::getOrderId() const
{
    return m_Order_id;
}


void LinearCreateOrderResult::setOrderId(utility::string_t value)
{
    m_Order_id = value;
    m_Order_idIsSet = true;
}
bool LinearCreateOrderResult::orderIdIsSet() const
{
    return m_Order_idIsSet;
}

void LinearCreateOrderResult::unsetOrder_id()
{
    m_Order_idIsSet = false;
}

utility::string_t LinearCreateOrderResult::getOrderLinkId() const
{
    return m_Order_link_id;
}


void LinearCreateOrderResult::setOrderLinkId(utility::string_t value)
{
    m_Order_link_id = value;
    m_Order_link_idIsSet = true;
}
bool LinearCreateOrderResult::orderLinkIdIsSet() const
{
    return m_Order_link_idIsSet;
}

void LinearCreateOrderResult::unsetOrder_link_id()
{
    m_Order_link_idIsSet = false;
}

utility::string_t LinearCreateOrderResult::getOrderStatus() const
{
    return m_Order_status;
}


void LinearCreateOrderResult::setOrderStatus(utility::string_t value)
{
    m_Order_status = value;
    m_Order_statusIsSet = true;
}
bool LinearCreateOrderResult::orderStatusIsSet() const
{
    return m_Order_statusIsSet;
}

void LinearCreateOrderResult::unsetOrder_status()
{
    m_Order_statusIsSet = false;
}

utility::string_t LinearCreateOrderResult::getOrderType() const
{
    return m_Order_type;
}


void LinearCreateOrderResult::setOrderType(utility::string_t value)
{
    m_Order_type = value;
    m_Order_typeIsSet = true;
}
bool LinearCreateOrderResult::orderTypeIsSet() const
{
    return m_Order_typeIsSet;
}

void LinearCreateOrderResult::unsetOrder_type()
{
    m_Order_typeIsSet = false;
}

double LinearCreateOrderResult::getPrice() const
{
    return m_Price;
}


void LinearCreateOrderResult::setPrice(double value)
{
    m_Price = value;
    m_PriceIsSet = true;
}
bool LinearCreateOrderResult::priceIsSet() const
{
    return m_PriceIsSet;
}

void LinearCreateOrderResult::unsetPrice()
{
    m_PriceIsSet = false;
}

double LinearCreateOrderResult::getQty() const
{
    return m_Qty;
}


void LinearCreateOrderResult::setQty(double value)
{
    m_Qty = value;
    m_QtyIsSet = true;
}
bool LinearCreateOrderResult::qtyIsSet() const
{
    return m_QtyIsSet;
}

void LinearCreateOrderResult::unsetQty()
{
    m_QtyIsSet = false;
}

bool LinearCreateOrderResult::isReduceOnly() const
{
    return m_Reduce_only;
}


void LinearCreateOrderResult::setReduceOnly(bool value)
{
    m_Reduce_only = value;
    m_Reduce_onlyIsSet = true;
}
bool LinearCreateOrderResult::reduceOnlyIsSet() const
{
    return m_Reduce_onlyIsSet;
}

void LinearCreateOrderResult::unsetReduce_only()
{
    m_Reduce_onlyIsSet = false;
}

utility::string_t LinearCreateOrderResult::getSide() const
{
    return m_Side;
}


void LinearCreateOrderResult::setSide(utility::string_t value)
{
    m_Side = value;
    m_SideIsSet = true;
}
bool LinearCreateOrderResult::sideIsSet() const
{
    return m_SideIsSet;
}

void LinearCreateOrderResult::unsetSide()
{
    m_SideIsSet = false;
}

utility::string_t LinearCreateOrderResult::getSymbol() const
{
    return m_Symbol;
}


void LinearCreateOrderResult::setSymbol(utility::string_t value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}
bool LinearCreateOrderResult::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void LinearCreateOrderResult::unsetSymbol()
{
    m_SymbolIsSet = false;
}

utility::string_t LinearCreateOrderResult::getTimeInForce() const
{
    return m_Time_in_force;
}


void LinearCreateOrderResult::setTimeInForce(utility::string_t value)
{
    m_Time_in_force = value;
    m_Time_in_forceIsSet = true;
}
bool LinearCreateOrderResult::timeInForceIsSet() const
{
    return m_Time_in_forceIsSet;
}

void LinearCreateOrderResult::unsetTime_in_force()
{
    m_Time_in_forceIsSet = false;
}

utility::string_t LinearCreateOrderResult::getUpdatedTime() const
{
    return m_Updated_time;
}


void LinearCreateOrderResult::setUpdatedTime(utility::string_t value)
{
    m_Updated_time = value;
    m_Updated_timeIsSet = true;
}
bool LinearCreateOrderResult::updatedTimeIsSet() const
{
    return m_Updated_timeIsSet;
}

void LinearCreateOrderResult::unsetUpdated_time()
{
    m_Updated_timeIsSet = false;
}

int64_t LinearCreateOrderResult::getUserId() const
{
    return m_User_id;
}


void LinearCreateOrderResult::setUserId(int64_t value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}
bool LinearCreateOrderResult::userIdIsSet() const
{
    return m_User_idIsSet;
}

void LinearCreateOrderResult::unsetUser_id()
{
    m_User_idIsSet = false;
}

double LinearCreateOrderResult::getTakeProfit() const
{
    return m_Take_profit;
}


void LinearCreateOrderResult::setTakeProfit(double value)
{
    m_Take_profit = value;
    m_Take_profitIsSet = true;
}
bool LinearCreateOrderResult::takeProfitIsSet() const
{
    return m_Take_profitIsSet;
}

void LinearCreateOrderResult::unsetTake_profit()
{
    m_Take_profitIsSet = false;
}

double LinearCreateOrderResult::getStopLoss() const
{
    return m_Stop_loss;
}


void LinearCreateOrderResult::setStopLoss(double value)
{
    m_Stop_loss = value;
    m_Stop_lossIsSet = true;
}
bool LinearCreateOrderResult::stopLossIsSet() const
{
    return m_Stop_lossIsSet;
}

void LinearCreateOrderResult::unsetStop_loss()
{
    m_Stop_lossIsSet = false;
}

utility::string_t LinearCreateOrderResult::getTpTriggerBy() const
{
    return m_Tp_trigger_by;
}


void LinearCreateOrderResult::setTpTriggerBy(utility::string_t value)
{
    m_Tp_trigger_by = value;
    m_Tp_trigger_byIsSet = true;
}
bool LinearCreateOrderResult::tpTriggerByIsSet() const
{
    return m_Tp_trigger_byIsSet;
}

void LinearCreateOrderResult::unsetTp_trigger_by()
{
    m_Tp_trigger_byIsSet = false;
}

utility::string_t LinearCreateOrderResult::getSlTriggerBy() const
{
    return m_Sl_trigger_by;
}


void LinearCreateOrderResult::setSlTriggerBy(utility::string_t value)
{
    m_Sl_trigger_by = value;
    m_Sl_trigger_byIsSet = true;
}
bool LinearCreateOrderResult::slTriggerByIsSet() const
{
    return m_Sl_trigger_byIsSet;
}

void LinearCreateOrderResult::unsetSl_trigger_by()
{
    m_Sl_trigger_byIsSet = false;
}

}
}
}
}

