/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "AccountRatioInfo.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

AccountRatioInfo::AccountRatioInfo()
{
    m_Buy_ratio = 0;
    m_Buy_ratioIsSet = false;
    m_Sell_ratio = 0;
    m_Sell_ratioIsSet = false;
    m_Timestamp = 0;
    m_TimestampIsSet = false;
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
}

AccountRatioInfo::~AccountRatioInfo()
{
}

void AccountRatioInfo::validate()
{
    // TODO: implement validation
}

web::json::value AccountRatioInfo::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Buy_ratioIsSet)
    {
        val[utility::conversions::to_string_t("buy_ratio")] = ModelBase::toJson(m_Buy_ratio);
    }
    if(m_Sell_ratioIsSet)
    {
        val[utility::conversions::to_string_t("sell_ratio")] = ModelBase::toJson(m_Sell_ratio);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t("timestamp")] = ModelBase::toJson(m_Timestamp);
    }
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t("symbol")] = ModelBase::toJson(m_Symbol);
    }

    return val;
}

void AccountRatioInfo::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("buy_ratio")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("buy_ratio")];
        if(!fieldValue.is_null())
        {
            setBuyRatio(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sell_ratio")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("sell_ratio")];
        if(!fieldValue.is_null())
        {
            setSellRatio(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timestamp")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("timestamp")];
        if(!fieldValue.is_null())
        {
            setTimestamp(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("symbol")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("symbol")];
        if(!fieldValue.is_null())
        {
            setSymbol(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void AccountRatioInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Buy_ratioIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("buy_ratio"), m_Buy_ratio));
    }
    if(m_Sell_ratioIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sell_ratio"), m_Sell_ratio));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timestamp"), m_Timestamp));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbol"), m_Symbol));
        
    }
}

void AccountRatioInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("buy_ratio")))
    {
        setBuyRatio(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("buy_ratio"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sell_ratio")))
    {
        setSellRatio(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sell_ratio"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timestamp")))
    {
        setTimestamp(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("timestamp"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("symbol")))
    {
        setSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbol"))));
    }
}

int32_t AccountRatioInfo::getBuyRatio() const
{
    return m_Buy_ratio;
}


void AccountRatioInfo::setBuyRatio(int32_t value)
{
    m_Buy_ratio = value;
    m_Buy_ratioIsSet = true;
}
bool AccountRatioInfo::buyRatioIsSet() const
{
    return m_Buy_ratioIsSet;
}

void AccountRatioInfo::unsetBuy_ratio()
{
    m_Buy_ratioIsSet = false;
}

int32_t AccountRatioInfo::getSellRatio() const
{
    return m_Sell_ratio;
}


void AccountRatioInfo::setSellRatio(int32_t value)
{
    m_Sell_ratio = value;
    m_Sell_ratioIsSet = true;
}
bool AccountRatioInfo::sellRatioIsSet() const
{
    return m_Sell_ratioIsSet;
}

void AccountRatioInfo::unsetSell_ratio()
{
    m_Sell_ratioIsSet = false;
}

int32_t AccountRatioInfo::getTimestamp() const
{
    return m_Timestamp;
}


void AccountRatioInfo::setTimestamp(int32_t value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}
bool AccountRatioInfo::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void AccountRatioInfo::unsetTimestamp()
{
    m_TimestampIsSet = false;
}

utility::string_t AccountRatioInfo::getSymbol() const
{
    return m_Symbol;
}


void AccountRatioInfo::setSymbol(utility::string_t value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}
bool AccountRatioInfo::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void AccountRatioInfo::unsetSymbol()
{
    m_SymbolIsSet = false;
}

}
}
}
}

