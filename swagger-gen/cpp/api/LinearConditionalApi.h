/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * LinearConditionalApi.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_API_LinearConditionalApi_H_
#define IO_SWAGGER_CLIENT_API_LinearConditionalApi_H_


#include "../ApiClient.h"

#include "Object.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  LinearConditionalApi
{
public:
    LinearConditionalApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~LinearConditionalApi();
    /// <summary>
    /// Cancel Active Order
    /// </summary>
    /// <remarks>
    /// This will cancel linear active order
    /// </remarks>
    /// <param name="stopOrderId"> (optional)</param>
    /// <param name="orderLinkId"> (optional)</param>
    /// <param name="symbol"> (optional)</param>
    pplx::task<std::shared_ptr<Object>> linearConditional_cancel(
        boost::optional<utility::string_t> stopOrderId,
        boost::optional<utility::string_t> orderLinkId,
        boost::optional<utility::string_t> symbol
    );
    /// <summary>
    /// Cancel all stop orders.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbol">Contract type.</param>
    pplx::task<std::shared_ptr<Object>> linearConditional_cancelAll(
        utility::string_t symbol
    );
    /// <summary>
    /// Get linear Stop Orders
    /// </summary>
    /// <remarks>
    /// This will get linear active orders
    /// </remarks>
    /// <param name="stopOrderId"> (optional)</param>
    /// <param name="orderLinkId"> (optional)</param>
    /// <param name="symbol"> (optional)</param>
    /// <param name="order"> (optional)</param>
    /// <param name="page"> (optional)</param>
    /// <param name="limit"> (optional)</param>
    /// <param name="stopOrderStatus"> (optional)</param>
    pplx::task<std::shared_ptr<Object>> linearConditional_getOrders(
        boost::optional<utility::string_t> stopOrderId,
        boost::optional<utility::string_t> orderLinkId,
        boost::optional<utility::string_t> symbol,
        boost::optional<utility::string_t> order,
        boost::optional<utility::string_t> page,
        boost::optional<utility::string_t> limit,
        boost::optional<utility::string_t> stopOrderStatus
    );
    /// <summary>
    /// Create linear stop Order
    /// </summary>
    /// <remarks>
    /// This will create linear stop order
    /// </remarks>
    /// <param name="symbol"> (optional)</param>
    /// <param name="side"> (optional)</param>
    /// <param name="orderType"> (optional)</param>
    /// <param name="qty"> (optional)</param>
    /// <param name="price"> (optional)</param>
    /// <param name="basePrice"> (optional)</param>
    /// <param name="stopPx"> (optional)</param>
    /// <param name="timeInForce"> (optional)</param>
    /// <param name="triggerBy"> (optional)</param>
    /// <param name="reduceOnly"> (optional)</param>
    /// <param name="closeOnTrigger"> (optional)</param>
    /// <param name="orderLinkId"> (optional)</param>
    /// <param name="takeProfit"> (optional)</param>
    /// <param name="stopLoss"> (optional)</param>
    /// <param name="tpTriggerBy"> (optional)</param>
    /// <param name="slTriggerBy"> (optional)</param>
    pplx::task<std::shared_ptr<Object>> linearConditional_new(
        boost::optional<utility::string_t> symbol,
        boost::optional<utility::string_t> side,
        boost::optional<utility::string_t> orderType,
        boost::optional<double> qty,
        boost::optional<double> price,
        boost::optional<double> basePrice,
        boost::optional<double> stopPx,
        boost::optional<utility::string_t> timeInForce,
        boost::optional<utility::string_t> triggerBy,
        boost::optional<bool> reduceOnly,
        boost::optional<bool> closeOnTrigger,
        boost::optional<utility::string_t> orderLinkId,
        boost::optional<double> takeProfit,
        boost::optional<double> stopLoss,
        boost::optional<utility::string_t> tpTriggerBy,
        boost::optional<utility::string_t> slTriggerBy
    );
    /// <summary>
    /// Get Stop Orders(real-time)
    /// </summary>
    /// <remarks>
    /// This will get linear stop orders(real-time)
    /// </remarks>
    /// <param name="symbol"> (optional)</param>
    /// <param name="stopOrderId"> (optional)</param>
    /// <param name="orderLinkId"> (optional)</param>
    pplx::task<std::shared_ptr<Object>> linearConditional_query(
        boost::optional<utility::string_t> symbol,
        boost::optional<utility::string_t> stopOrderId,
        boost::optional<utility::string_t> orderLinkId
    );
    /// <summary>
    /// Replace conditional order
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="symbol"></param>
    /// <param name="stopOrderId"> (optional)</param>
    /// <param name="orderLinkId"> (optional)</param>
    /// <param name="pRQty"> (optional)</param>
    /// <param name="pRPrice"> (optional)</param>
    /// <param name="pRTriggerPrice"> (optional)</param>
    pplx::task<std::shared_ptr<Object>> linearConditional_replace(
        utility::string_t symbol,
        boost::optional<utility::string_t> stopOrderId,
        boost::optional<utility::string_t> orderLinkId,
        boost::optional<utility::string_t> pRQty,
        boost::optional<double> pRPrice,
        boost::optional<double> pRTriggerPrice
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_API_LinearConditionalApi_H_ */

