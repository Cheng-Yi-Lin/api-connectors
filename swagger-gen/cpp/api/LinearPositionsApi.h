/**
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.8.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * LinearPositionsApi.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_API_LinearPositionsApi_H_
#define IO_SWAGGER_CLIENT_API_LinearPositionsApi_H_


#include "../ApiClient.h"

#include "Object.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  LinearPositionsApi
{
public:
    LinearPositionsApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~LinearPositionsApi();
    /// <summary>
    /// Add/Reduce Margin
    /// </summary>
    /// <remarks>
    /// This will Add/Reduce Margin
    /// </remarks>
    /// <param name="symbol"> (optional)</param>
    /// <param name="side"> (optional)</param>
    /// <param name="margin"> (optional)</param>
    pplx::task<std::shared_ptr<Object>> linearPositions_changeMargin(
        boost::optional<utility::string_t> symbol,
        boost::optional<utility::string_t> side,
        boost::optional<double> margin
    );
    /// <summary>
    /// Get user&#39;s closed profit and loss records.
    /// </summary>
    /// <remarks>
    /// This will get user&#39;s closed profit and loss records.
    /// </remarks>
    /// <param name="symbol"> (optional)</param>
    /// <param name="startTime"> (optional)</param>
    /// <param name="endTime"> (optional)</param>
    /// <param name="execType"> (optional)</param>
    /// <param name="page"> (optional)</param>
    /// <param name="limit"> (optional)</param>
    pplx::task<std::shared_ptr<Object>> linearPositions_closePnlRecords(
        boost::optional<utility::string_t> symbol,
        boost::optional<int64_t> startTime,
        boost::optional<int64_t> endTime,
        boost::optional<utility::string_t> execType,
        boost::optional<int64_t> page,
        boost::optional<int64_t> limit
    );
    /// <summary>
    /// Get my position list.
    /// </summary>
    /// <remarks>
    /// This will get my position list.
    /// </remarks>
    /// <param name="symbol"> (optional)</param>
    pplx::task<std::shared_ptr<Object>> linearPositions_myPosition(
        boost::optional<utility::string_t> symbol
    );
    /// <summary>
    /// Set leverage
    /// </summary>
    /// <remarks>
    /// This will Set Leverage
    /// </remarks>
    /// <param name="symbol"> (optional)</param>
    /// <param name="buyLeverage"> (optional)</param>
    /// <param name="sellLeverage"> (optional)</param>
    pplx::task<std::shared_ptr<Object>> linearPositions_saveLeverage(
        boost::optional<utility::string_t> symbol,
        boost::optional<double> buyLeverage,
        boost::optional<double> sellLeverage
    );
    /// <summary>
    /// Set auto add margin
    /// </summary>
    /// <remarks>
    /// This will Set auto add margin
    /// </remarks>
    /// <param name="symbol"> (optional)</param>
    /// <param name="side"> (optional)</param>
    /// <param name="autoAddMargin"> (optional)</param>
    pplx::task<std::shared_ptr<Object>> linearPositions_setAutoAddMargin(
        boost::optional<utility::string_t> symbol,
        boost::optional<utility::string_t> side,
        boost::optional<bool> autoAddMargin
    );
    /// <summary>
    /// Switch isolated
    /// </summary>
    /// <remarks>
    /// This will switch isolated
    /// </remarks>
    /// <param name="symbol"> (optional)</param>
    /// <param name="isIsolated"> (optional)</param>
    /// <param name="buyLeverage"> (optional)</param>
    /// <param name="sellLeverage"> (optional)</param>
    pplx::task<std::shared_ptr<Object>> linearPositions_switchIsolated(
        boost::optional<utility::string_t> symbol,
        boost::optional<bool> isIsolated,
        boost::optional<double> buyLeverage,
        boost::optional<double> sellLeverage
    );
    /// <summary>
    /// Switch Mode
    /// </summary>
    /// <remarks>
    /// This will Switch TP/SL Mode
    /// </remarks>
    /// <param name="symbol"> (optional)</param>
    /// <param name="tpSlMode"> (optional)</param>
    pplx::task<std::shared_ptr<Object>> linearPositions_switchMode(
        boost::optional<utility::string_t> symbol,
        boost::optional<utility::string_t> tpSlMode
    );
    /// <summary>
    /// Set tradingStop
    /// </summary>
    /// <remarks>
    /// This will set tradingStop
    /// </remarks>
    /// <param name="symbol"> (optional)</param>
    /// <param name="side"> (optional)</param>
    /// <param name="takeProfit"> (optional)</param>
    /// <param name="stopLoss"> (optional)</param>
    /// <param name="trailingStop"> (optional)</param>
    /// <param name="tpTriggerBy"> (optional)</param>
    /// <param name="slTriggerBy"> (optional)</param>
    /// <param name="slSize"> (optional)</param>
    /// <param name="tpSize"> (optional)</param>
    pplx::task<std::shared_ptr<Object>> linearPositions_tradingStop(
        boost::optional<utility::string_t> symbol,
        boost::optional<utility::string_t> side,
        boost::optional<double> takeProfit,
        boost::optional<double> stopLoss,
        boost::optional<double> trailingStop,
        boost::optional<utility::string_t> tpTriggerBy,
        boost::optional<utility::string_t> slTriggerBy,
        boost::optional<double> slSize,
        boost::optional<double> tpSize
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_API_LinearPositionsApi_H_ */

