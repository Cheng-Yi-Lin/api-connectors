#import <Foundation/Foundation.h>
#import "SWGApi.h"

/**
* Bybit API
* ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
*
* OpenAPI spec version: 0.2.10
* Contact: support@bybit.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGLinearConditionalApi: NSObject <SWGApi>

extern NSString* kSWGLinearConditionalApiErrorDomain;
extern NSInteger kSWGLinearConditionalApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Cancel Active Order
/// This will cancel linear active order
///
/// @param stopOrderId  (optional)
/// @param orderLinkId  (optional)
/// @param symbol  (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return NSObject*
-(NSURLSessionTask*) linearConditionalCancelWithStopOrderId: (NSString*) stopOrderId
    orderLinkId: (NSString*) orderLinkId
    symbol: (NSString*) symbol
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Cancel all stop orders.
/// 
///
/// @param symbol Contract type.
/// 
///  code:200 message:"Request was successful"
///
/// @return NSObject*
-(NSURLSessionTask*) linearConditionalCancelAllWithSymbol: (NSString*) symbol
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Get linear Stop Orders
/// This will get linear active orders
///
/// @param stopOrderId  (optional)
/// @param orderLinkId  (optional)
/// @param symbol  (optional)
/// @param order  (optional)
/// @param page  (optional)
/// @param limit  (optional)
/// @param stopOrderStatus  (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return NSObject*
-(NSURLSessionTask*) linearConditionalGetOrdersWithStopOrderId: (NSString*) stopOrderId
    orderLinkId: (NSString*) orderLinkId
    symbol: (NSString*) symbol
    order: (NSString*) order
    page: (NSString*) page
    limit: (NSString*) limit
    stopOrderStatus: (NSString*) stopOrderStatus
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Create linear stop Order
/// This will create linear stop order
///
/// @param symbol  (optional)
/// @param side  (optional)
/// @param orderType  (optional)
/// @param qty  (optional)
/// @param price  (optional)
/// @param basePrice  (optional)
/// @param stopPx  (optional)
/// @param timeInForce  (optional)
/// @param triggerBy  (optional)
/// @param reduceOnly  (optional)
/// @param closeOnTrigger  (optional)
/// @param orderLinkId  (optional)
/// @param takeProfit  (optional)
/// @param stopLoss  (optional)
/// @param tpTriggerBy  (optional)
/// @param slTriggerBy  (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return NSObject*
-(NSURLSessionTask*) linearConditionalNewWithSymbol: (NSString*) symbol
    side: (NSString*) side
    orderType: (NSString*) orderType
    qty: (NSNumber*) qty
    price: (NSNumber*) price
    basePrice: (NSNumber*) basePrice
    stopPx: (NSNumber*) stopPx
    timeInForce: (NSString*) timeInForce
    triggerBy: (NSString*) triggerBy
    reduceOnly: (NSNumber*) reduceOnly
    closeOnTrigger: (NSNumber*) closeOnTrigger
    orderLinkId: (NSString*) orderLinkId
    takeProfit: (NSNumber*) takeProfit
    stopLoss: (NSNumber*) stopLoss
    tpTriggerBy: (NSString*) tpTriggerBy
    slTriggerBy: (NSString*) slTriggerBy
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Get Stop Orders(real-time)
/// This will get linear stop orders(real-time)
///
/// @param symbol  (optional)
/// @param stopOrderId  (optional)
/// @param orderLinkId  (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return NSObject*
-(NSURLSessionTask*) linearConditionalQueryWithSymbol: (NSString*) symbol
    stopOrderId: (NSString*) stopOrderId
    orderLinkId: (NSString*) orderLinkId
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// Replace conditional order
/// 
///
/// @param symbol 
/// @param stopOrderId  (optional)
/// @param orderLinkId  (optional)
/// @param pRQty  (optional)
/// @param pRPrice  (optional)
/// @param pRTriggerPrice  (optional)
/// 
///  code:200 message:"Request was successful"
///
/// @return NSObject*
-(NSURLSessionTask*) linearConditionalReplaceWithSymbol: (NSString*) symbol
    stopOrderId: (NSString*) stopOrderId
    orderLinkId: (NSString*) orderLinkId
    pRQty: (NSString*) pRQty
    pRPrice: (NSNumber*) pRPrice
    pRTriggerPrice: (NSNumber*) pRTriggerPrice
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;



@end
