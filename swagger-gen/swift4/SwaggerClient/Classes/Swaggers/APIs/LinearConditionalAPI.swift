//
// LinearConditionalAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class LinearConditionalAPI {
    /**
     Cancel Active Order
     
     - parameter stopOrderId: (form)  (optional)
     - parameter orderLinkId: (form)  (optional)
     - parameter symbol: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func linearConditionalCancel(stopOrderId: String? = nil, orderLinkId: String? = nil, symbol: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        linearConditionalCancelWithRequestBuilder(stopOrderId: stopOrderId, orderLinkId: orderLinkId, symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Cancel Active Order
     - POST /private/linear/stop-order/cancel
     - This will cancel linear active order
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apiKey
     - API Key:
       - type: apiKey sign (QUERY)
       - name: apiSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: timestamp
     - examples: [{contentType=application/json, example=""}]
     
     - parameter stopOrderId: (form)  (optional)
     - parameter orderLinkId: (form)  (optional)
     - parameter symbol: (form)  (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func linearConditionalCancelWithRequestBuilder(stopOrderId: String? = nil, orderLinkId: String? = nil, symbol: String? = nil) -> RequestBuilder<Any> {
        let path = "/private/linear/stop-order/cancel"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "stop_order_id": stopOrderId,
            "order_link_id": orderLinkId,
            "symbol": symbol
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Cancel all stop orders.
     
     - parameter symbol: (form) Contract type. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func linearConditionalCancelAll(symbol: String, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        linearConditionalCancelAllWithRequestBuilder(symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Cancel all stop orders.
     - POST /private/linear/stop-order/cancel-all
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apiKey
     - API Key:
       - type: apiKey sign (QUERY)
       - name: apiSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: timestamp
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (form) Contract type. 

     - returns: RequestBuilder<Any> 
     */
    open class func linearConditionalCancelAllWithRequestBuilder(symbol: String) -> RequestBuilder<Any> {
        let path = "/private/linear/stop-order/cancel-all"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "symbol": symbol
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get linear Stop Orders
     
     - parameter stopOrderId: (query)  (optional)
     - parameter orderLinkId: (query)  (optional)
     - parameter symbol: (query)  (optional)
     - parameter order: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter stopOrderStatus: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func linearConditionalGetOrders(stopOrderId: String? = nil, orderLinkId: String? = nil, symbol: String? = nil, order: String? = nil, page: String? = nil, limit: String? = nil, stopOrderStatus: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        linearConditionalGetOrdersWithRequestBuilder(stopOrderId: stopOrderId, orderLinkId: orderLinkId, symbol: symbol, order: order, page: page, limit: limit, stopOrderStatus: stopOrderStatus).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get linear Stop Orders
     - GET /private/linear/stop-order/list
     - This will get linear active orders
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apiKey
     - API Key:
       - type: apiKey sign (QUERY)
       - name: apiSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: timestamp
     - examples: [{contentType=application/json, example=""}]
     
     - parameter stopOrderId: (query)  (optional)
     - parameter orderLinkId: (query)  (optional)
     - parameter symbol: (query)  (optional)
     - parameter order: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter stopOrderStatus: (query)  (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func linearConditionalGetOrdersWithRequestBuilder(stopOrderId: String? = nil, orderLinkId: String? = nil, symbol: String? = nil, order: String? = nil, page: String? = nil, limit: String? = nil, stopOrderStatus: String? = nil) -> RequestBuilder<Any> {
        let path = "/private/linear/stop-order/list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "stop_order_id": stopOrderId, 
            "order_link_id": orderLinkId, 
            "symbol": symbol, 
            "order": order, 
            "page": page, 
            "limit": limit, 
            "stop_order_status": stopOrderStatus
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create linear stop Order
     
     - parameter symbol: (form)  (optional)
     - parameter side: (form)  (optional)
     - parameter orderType: (form)  (optional)
     - parameter qty: (form)  (optional)
     - parameter price: (form)  (optional)
     - parameter basePrice: (form)  (optional)
     - parameter stopPx: (form)  (optional)
     - parameter timeInForce: (form)  (optional)
     - parameter triggerBy: (form)  (optional)
     - parameter reduceOnly: (form)  (optional)
     - parameter closeOnTrigger: (form)  (optional)
     - parameter orderLinkId: (form)  (optional)
     - parameter takeProfit: (form)  (optional)
     - parameter stopLoss: (form)  (optional)
     - parameter tpTriggerBy: (form)  (optional)
     - parameter slTriggerBy: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func linearConditionalNew(symbol: String? = nil, side: String? = nil, orderType: String? = nil, qty: Double? = nil, price: Double? = nil, basePrice: Double? = nil, stopPx: Double? = nil, timeInForce: String? = nil, triggerBy: String? = nil, reduceOnly: Bool? = nil, closeOnTrigger: Bool? = nil, orderLinkId: String? = nil, takeProfit: Double? = nil, stopLoss: Double? = nil, tpTriggerBy: String? = nil, slTriggerBy: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        linearConditionalNewWithRequestBuilder(symbol: symbol, side: side, orderType: orderType, qty: qty, price: price, basePrice: basePrice, stopPx: stopPx, timeInForce: timeInForce, triggerBy: triggerBy, reduceOnly: reduceOnly, closeOnTrigger: closeOnTrigger, orderLinkId: orderLinkId, takeProfit: takeProfit, stopLoss: stopLoss, tpTriggerBy: tpTriggerBy, slTriggerBy: slTriggerBy).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create linear stop Order
     - POST /private/linear/stop-order/create
     - This will create linear stop order
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apiKey
     - API Key:
       - type: apiKey sign (QUERY)
       - name: apiSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: timestamp
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (form)  (optional)
     - parameter side: (form)  (optional)
     - parameter orderType: (form)  (optional)
     - parameter qty: (form)  (optional)
     - parameter price: (form)  (optional)
     - parameter basePrice: (form)  (optional)
     - parameter stopPx: (form)  (optional)
     - parameter timeInForce: (form)  (optional)
     - parameter triggerBy: (form)  (optional)
     - parameter reduceOnly: (form)  (optional)
     - parameter closeOnTrigger: (form)  (optional)
     - parameter orderLinkId: (form)  (optional)
     - parameter takeProfit: (form)  (optional)
     - parameter stopLoss: (form)  (optional)
     - parameter tpTriggerBy: (form)  (optional)
     - parameter slTriggerBy: (form)  (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func linearConditionalNewWithRequestBuilder(symbol: String? = nil, side: String? = nil, orderType: String? = nil, qty: Double? = nil, price: Double? = nil, basePrice: Double? = nil, stopPx: Double? = nil, timeInForce: String? = nil, triggerBy: String? = nil, reduceOnly: Bool? = nil, closeOnTrigger: Bool? = nil, orderLinkId: String? = nil, takeProfit: Double? = nil, stopLoss: Double? = nil, tpTriggerBy: String? = nil, slTriggerBy: String? = nil) -> RequestBuilder<Any> {
        let path = "/private/linear/stop-order/create"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "symbol": symbol,
            "side": side,
            "order_type": orderType,
            "qty": qty,
            "price": price,
            "base_price": basePrice,
            "stop_px": stopPx,
            "time_in_force": timeInForce,
            "trigger_by": triggerBy,
            "reduce_only": reduceOnly,
            "close_on_trigger": closeOnTrigger,
            "order_link_id": orderLinkId,
            "take_profit": takeProfit,
            "stop_loss": stopLoss,
            "tp_trigger_by": tpTriggerBy,
            "sl_trigger_by": slTriggerBy
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Stop Orders(real-time)
     
     - parameter symbol: (query)  (optional)
     - parameter stopOrderId: (query)  (optional)
     - parameter orderLinkId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func linearConditionalQuery(symbol: String? = nil, stopOrderId: String? = nil, orderLinkId: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        linearConditionalQueryWithRequestBuilder(symbol: symbol, stopOrderId: stopOrderId, orderLinkId: orderLinkId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Stop Orders(real-time)
     - GET /private/linear/stop-order/search
     - This will get linear stop orders(real-time)
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apiKey
     - API Key:
       - type: apiKey sign (QUERY)
       - name: apiSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: timestamp
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (query)  (optional)
     - parameter stopOrderId: (query)  (optional)
     - parameter orderLinkId: (query)  (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func linearConditionalQueryWithRequestBuilder(symbol: String? = nil, stopOrderId: String? = nil, orderLinkId: String? = nil) -> RequestBuilder<Any> {
        let path = "/private/linear/stop-order/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "symbol": symbol, 
            "stop_order_id": stopOrderId, 
            "order_link_id": orderLinkId
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Replace conditional order
     
     - parameter symbol: (form)  
     - parameter stopOrderId: (form)  (optional)
     - parameter orderLinkId: (form)  (optional)
     - parameter pRQty: (form)  (optional)
     - parameter pRPrice: (form)  (optional)
     - parameter pRTriggerPrice: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func linearConditionalReplace(symbol: String, stopOrderId: String? = nil, orderLinkId: String? = nil, pRQty: String? = nil, pRPrice: Double? = nil, pRTriggerPrice: Double? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        linearConditionalReplaceWithRequestBuilder(symbol: symbol, stopOrderId: stopOrderId, orderLinkId: orderLinkId, pRQty: pRQty, pRPrice: pRPrice, pRTriggerPrice: pRTriggerPrice).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Replace conditional order
     - POST /private/linear/stop-order/replace
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apiKey
     - API Key:
       - type: apiKey sign (QUERY)
       - name: apiSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: timestamp
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (form)  
     - parameter stopOrderId: (form)  (optional)
     - parameter orderLinkId: (form)  (optional)
     - parameter pRQty: (form)  (optional)
     - parameter pRPrice: (form)  (optional)
     - parameter pRTriggerPrice: (form)  (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func linearConditionalReplaceWithRequestBuilder(symbol: String, stopOrderId: String? = nil, orderLinkId: String? = nil, pRQty: String? = nil, pRPrice: Double? = nil, pRTriggerPrice: Double? = nil) -> RequestBuilder<Any> {
        let path = "/private/linear/stop-order/replace"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "symbol": symbol,
            "stop_order_id": stopOrderId,
            "order_link_id": orderLinkId,
            "p_r_qty": pRQty,
            "p_r_price": pRPrice,
            "p_r_trigger_price": pRTriggerPrice
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
