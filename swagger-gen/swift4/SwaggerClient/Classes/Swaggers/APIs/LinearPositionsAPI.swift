//
// LinearPositionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class LinearPositionsAPI {
    /**
     Add/Reduce Margin
     
     - parameter symbol: (form)  (optional)
     - parameter side: (form)  (optional)
     - parameter margin: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func linearPositionsChangeMargin(symbol: String? = nil, side: String? = nil, margin: Double? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        linearPositionsChangeMarginWithRequestBuilder(symbol: symbol, side: side, margin: margin).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add/Reduce Margin
     - POST /private/linear/position/add-margin
     - This will Add/Reduce Margin
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apiKey
     - API Key:
       - type: apiKey sign (QUERY)
       - name: apiSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: timestamp
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (form)  (optional)
     - parameter side: (form)  (optional)
     - parameter margin: (form)  (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func linearPositionsChangeMarginWithRequestBuilder(symbol: String? = nil, side: String? = nil, margin: Double? = nil) -> RequestBuilder<Any> {
        let path = "/private/linear/position/add-margin"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "symbol": symbol,
            "side": side,
            "margin": margin
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get user's closed profit and loss records.
     
     - parameter symbol: (query)  (optional)
     - parameter startTime: (query)  (optional)
     - parameter endTime: (query)  (optional)
     - parameter execType: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func linearPositionsClosePnlRecords(symbol: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil, execType: String? = nil, page: Int64? = nil, limit: Int64? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        linearPositionsClosePnlRecordsWithRequestBuilder(symbol: symbol, startTime: startTime, endTime: endTime, execType: execType, page: page, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get user's closed profit and loss records.
     - GET /private/linear/trade/closed-pnl/list
     - This will get user's closed profit and loss records.
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apiKey
     - API Key:
       - type: apiKey sign (QUERY)
       - name: apiSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: timestamp
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (query)  (optional)
     - parameter startTime: (query)  (optional)
     - parameter endTime: (query)  (optional)
     - parameter execType: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func linearPositionsClosePnlRecordsWithRequestBuilder(symbol: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil, execType: String? = nil, page: Int64? = nil, limit: Int64? = nil) -> RequestBuilder<Any> {
        let path = "/private/linear/trade/closed-pnl/list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "symbol": symbol, 
            "start_time": startTime?.encodeToJSON(), 
            "end_time": endTime?.encodeToJSON(), 
            "exec_type": execType, 
            "page": page?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get my position list.
     
     - parameter symbol: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func linearPositionsMyPosition(symbol: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        linearPositionsMyPositionWithRequestBuilder(symbol: symbol).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get my position list.
     - GET /private/linear/position/list
     - This will get my position list.
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apiKey
     - API Key:
       - type: apiKey sign (QUERY)
       - name: apiSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: timestamp
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (query)  (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func linearPositionsMyPositionWithRequestBuilder(symbol: String? = nil) -> RequestBuilder<Any> {
        let path = "/private/linear/position/list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "symbol": symbol
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set leverage
     
     - parameter symbol: (form)  (optional)
     - parameter buyLeverage: (form)  (optional)
     - parameter sellLeverage: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func linearPositionsSaveLeverage(symbol: String? = nil, buyLeverage: Double? = nil, sellLeverage: Double? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        linearPositionsSaveLeverageWithRequestBuilder(symbol: symbol, buyLeverage: buyLeverage, sellLeverage: sellLeverage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Set leverage
     - POST /private/linear/position/set-leverage
     - This will Set Leverage
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apiKey
     - API Key:
       - type: apiKey sign (QUERY)
       - name: apiSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: timestamp
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (form)  (optional)
     - parameter buyLeverage: (form)  (optional)
     - parameter sellLeverage: (form)  (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func linearPositionsSaveLeverageWithRequestBuilder(symbol: String? = nil, buyLeverage: Double? = nil, sellLeverage: Double? = nil) -> RequestBuilder<Any> {
        let path = "/private/linear/position/set-leverage"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "symbol": symbol,
            "buy_leverage": buyLeverage,
            "sell_leverage": sellLeverage
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set auto add margin
     
     - parameter symbol: (form)  (optional)
     - parameter side: (form)  (optional)
     - parameter autoAddMargin: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func linearPositionsSetAutoAddMargin(symbol: String? = nil, side: String? = nil, autoAddMargin: Bool? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        linearPositionsSetAutoAddMarginWithRequestBuilder(symbol: symbol, side: side, autoAddMargin: autoAddMargin).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Set auto add margin
     - POST /private/linear/position/set-auto-add-margin
     - This will Set auto add margin
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apiKey
     - API Key:
       - type: apiKey sign (QUERY)
       - name: apiSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: timestamp
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (form)  (optional)
     - parameter side: (form)  (optional)
     - parameter autoAddMargin: (form)  (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func linearPositionsSetAutoAddMarginWithRequestBuilder(symbol: String? = nil, side: String? = nil, autoAddMargin: Bool? = nil) -> RequestBuilder<Any> {
        let path = "/private/linear/position/set-auto-add-margin"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "symbol": symbol,
            "side": side,
            "auto_add_margin": autoAddMargin
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Switch isolated
     
     - parameter symbol: (form)  (optional)
     - parameter isIsolated: (form)  (optional)
     - parameter buyLeverage: (form)  (optional)
     - parameter sellLeverage: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func linearPositionsSwitchIsolated(symbol: String? = nil, isIsolated: Bool? = nil, buyLeverage: Double? = nil, sellLeverage: Double? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        linearPositionsSwitchIsolatedWithRequestBuilder(symbol: symbol, isIsolated: isIsolated, buyLeverage: buyLeverage, sellLeverage: sellLeverage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Switch isolated
     - POST /private/linear/position/switch-isolated
     - This will switch isolated
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apiKey
     - API Key:
       - type: apiKey sign (QUERY)
       - name: apiSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: timestamp
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (form)  (optional)
     - parameter isIsolated: (form)  (optional)
     - parameter buyLeverage: (form)  (optional)
     - parameter sellLeverage: (form)  (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func linearPositionsSwitchIsolatedWithRequestBuilder(symbol: String? = nil, isIsolated: Bool? = nil, buyLeverage: Double? = nil, sellLeverage: Double? = nil) -> RequestBuilder<Any> {
        let path = "/private/linear/position/switch-isolated"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "symbol": symbol,
            "is_isolated": isIsolated,
            "buy_leverage": buyLeverage,
            "sell_leverage": sellLeverage
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Switch Mode
     
     - parameter symbol: (form)  (optional)
     - parameter tpSlMode: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func linearPositionsSwitchMode(symbol: String? = nil, tpSlMode: String? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        linearPositionsSwitchModeWithRequestBuilder(symbol: symbol, tpSlMode: tpSlMode).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Switch Mode
     - POST /private/linear/tpsl/switch-mode
     - This will Switch TP/SL Mode
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apiKey
     - API Key:
       - type: apiKey sign (QUERY)
       - name: apiSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: timestamp
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (form)  (optional)
     - parameter tpSlMode: (form)  (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func linearPositionsSwitchModeWithRequestBuilder(symbol: String? = nil, tpSlMode: String? = nil) -> RequestBuilder<Any> {
        let path = "/private/linear/tpsl/switch-mode"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "symbol": symbol,
            "tp_sl_mode": tpSlMode
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set tradingStop
     
     - parameter symbol: (form)  (optional)
     - parameter side: (form)  (optional)
     - parameter takeProfit: (form)  (optional)
     - parameter stopLoss: (form)  (optional)
     - parameter trailingStop: (form)  (optional)
     - parameter tpTriggerBy: (form)  (optional)
     - parameter slTriggerBy: (form)  (optional)
     - parameter slSize: (form)  (optional)
     - parameter tpSize: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func linearPositionsTradingStop(symbol: String? = nil, side: String? = nil, takeProfit: Double? = nil, stopLoss: Double? = nil, trailingStop: Double? = nil, tpTriggerBy: String? = nil, slTriggerBy: String? = nil, slSize: Double? = nil, tpSize: Double? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        linearPositionsTradingStopWithRequestBuilder(symbol: symbol, side: side, takeProfit: takeProfit, stopLoss: stopLoss, trailingStop: trailingStop, tpTriggerBy: tpTriggerBy, slTriggerBy: slTriggerBy, slSize: slSize, tpSize: tpSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Set tradingStop
     - POST /private/linear/position/trading-stop
     - This will set tradingStop
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apiKey
     - API Key:
       - type: apiKey sign (QUERY)
       - name: apiSignature
     - API Key:
       - type: apiKey timestamp (QUERY)
       - name: timestamp
     - examples: [{contentType=application/json, example=""}]
     
     - parameter symbol: (form)  (optional)
     - parameter side: (form)  (optional)
     - parameter takeProfit: (form)  (optional)
     - parameter stopLoss: (form)  (optional)
     - parameter trailingStop: (form)  (optional)
     - parameter tpTriggerBy: (form)  (optional)
     - parameter slTriggerBy: (form)  (optional)
     - parameter slSize: (form)  (optional)
     - parameter tpSize: (form)  (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func linearPositionsTradingStopWithRequestBuilder(symbol: String? = nil, side: String? = nil, takeProfit: Double? = nil, stopLoss: Double? = nil, trailingStop: Double? = nil, tpTriggerBy: String? = nil, slTriggerBy: String? = nil, slSize: Double? = nil, tpSize: Double? = nil) -> RequestBuilder<Any> {
        let path = "/private/linear/position/trading-stop"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "symbol": symbol,
            "side": side,
            "take_profit": takeProfit,
            "stop_loss": stopLoss,
            "trailing_stop": trailingStop,
            "tp_trigger_by": tpTriggerBy,
            "sl_trigger_by": slTriggerBy,
            "sl_size": slSize,
            "tp_size": tpSize
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
