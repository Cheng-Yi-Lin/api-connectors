/*
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.12
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import com.google.gson.reflect.TypeToken;
import io.swagger.client.*;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LinearPositionsApi {
    private ApiClient apiClient;

    public LinearPositionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LinearPositionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for linearPositionsChangeMargin
     * @param symbol  (optional)
     * @param side  (optional)
     * @param margin  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call linearPositionsChangeMarginCall(String symbol, String side, Double margin, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/private/linear/position/add-margin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);
        if (side != null)
        localVarFormParams.put("side", side);
        if (margin != null)
        localVarFormParams.put("margin", margin);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call linearPositionsChangeMarginValidateBeforeCall(String symbol, String side, Double margin, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = linearPositionsChangeMarginCall(symbol, side, margin, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add/Reduce Margin
     * This will Add/Reduce Margin
     * @param symbol  (optional)
     * @param side  (optional)
     * @param margin  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object linearPositionsChangeMargin(String symbol, String side, Double margin) throws ApiException {
        ApiResponse<Object> resp = linearPositionsChangeMarginWithHttpInfo(symbol, side, margin);
        return resp.getData();
    }

    /**
     * Add/Reduce Margin
     * This will Add/Reduce Margin
     * @param symbol  (optional)
     * @param side  (optional)
     * @param margin  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> linearPositionsChangeMarginWithHttpInfo(String symbol, String side, Double margin) throws ApiException {
        com.squareup.okhttp.Call call = linearPositionsChangeMarginValidateBeforeCall(symbol, side, margin, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add/Reduce Margin (asynchronously)
     * This will Add/Reduce Margin
     * @param symbol  (optional)
     * @param side  (optional)
     * @param margin  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call linearPositionsChangeMarginAsync(String symbol, String side, Double margin, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = linearPositionsChangeMarginValidateBeforeCall(symbol, side, margin, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for linearPositionsClosePnlRecords
     * @param symbol  (optional)
     * @param startTime  (optional)
     * @param endTime  (optional)
     * @param execType  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call linearPositionsClosePnlRecordsCall(String symbol, Long startTime, Long endTime, String execType, Long page, Long limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/private/linear/trade/closed-pnl/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_time", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_time", endTime));
        if (execType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exec_type", execType));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call linearPositionsClosePnlRecordsValidateBeforeCall(String symbol, Long startTime, Long endTime, String execType, Long page, Long limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = linearPositionsClosePnlRecordsCall(symbol, startTime, endTime, execType, page, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get user&#39;s closed profit and loss records.
     * This will get user&#39;s closed profit and loss records.
     * @param symbol  (optional)
     * @param startTime  (optional)
     * @param endTime  (optional)
     * @param execType  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object linearPositionsClosePnlRecords(String symbol, Long startTime, Long endTime, String execType, Long page, Long limit) throws ApiException {
        ApiResponse<Object> resp = linearPositionsClosePnlRecordsWithHttpInfo(symbol, startTime, endTime, execType, page, limit);
        return resp.getData();
    }

    /**
     * Get user&#39;s closed profit and loss records.
     * This will get user&#39;s closed profit and loss records.
     * @param symbol  (optional)
     * @param startTime  (optional)
     * @param endTime  (optional)
     * @param execType  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> linearPositionsClosePnlRecordsWithHttpInfo(String symbol, Long startTime, Long endTime, String execType, Long page, Long limit) throws ApiException {
        com.squareup.okhttp.Call call = linearPositionsClosePnlRecordsValidateBeforeCall(symbol, startTime, endTime, execType, page, limit, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get user&#39;s closed profit and loss records. (asynchronously)
     * This will get user&#39;s closed profit and loss records.
     * @param symbol  (optional)
     * @param startTime  (optional)
     * @param endTime  (optional)
     * @param execType  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call linearPositionsClosePnlRecordsAsync(String symbol, Long startTime, Long endTime, String execType, Long page, Long limit, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = linearPositionsClosePnlRecordsValidateBeforeCall(symbol, startTime, endTime, execType, page, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for linearPositionsMyPosition
     * @param symbol  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call linearPositionsMyPositionCall(String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/private/linear/position/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call linearPositionsMyPositionValidateBeforeCall(String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = linearPositionsMyPositionCall(symbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get my position list.
     * This will get my position list.
     * @param symbol  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object linearPositionsMyPosition(String symbol) throws ApiException {
        ApiResponse<Object> resp = linearPositionsMyPositionWithHttpInfo(symbol);
        return resp.getData();
    }

    /**
     * Get my position list.
     * This will get my position list.
     * @param symbol  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> linearPositionsMyPositionWithHttpInfo(String symbol) throws ApiException {
        com.squareup.okhttp.Call call = linearPositionsMyPositionValidateBeforeCall(symbol, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get my position list. (asynchronously)
     * This will get my position list.
     * @param symbol  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call linearPositionsMyPositionAsync(String symbol, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = linearPositionsMyPositionValidateBeforeCall(symbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for linearPositionsSaveLeverage
     * @param symbol  (optional)
     * @param buyLeverage  (optional)
     * @param sellLeverage  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call linearPositionsSaveLeverageCall(String symbol, Double buyLeverage, Double sellLeverage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/private/linear/position/set-leverage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);
        if (buyLeverage != null)
        localVarFormParams.put("buy_leverage", buyLeverage);
        if (sellLeverage != null)
        localVarFormParams.put("sell_leverage", sellLeverage);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call linearPositionsSaveLeverageValidateBeforeCall(String symbol, Double buyLeverage, Double sellLeverage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = linearPositionsSaveLeverageCall(symbol, buyLeverage, sellLeverage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set leverage
     * This will Set Leverage
     * @param symbol  (optional)
     * @param buyLeverage  (optional)
     * @param sellLeverage  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object linearPositionsSaveLeverage(String symbol, Double buyLeverage, Double sellLeverage) throws ApiException {
        ApiResponse<Object> resp = linearPositionsSaveLeverageWithHttpInfo(symbol, buyLeverage, sellLeverage);
        return resp.getData();
    }

    /**
     * Set leverage
     * This will Set Leverage
     * @param symbol  (optional)
     * @param buyLeverage  (optional)
     * @param sellLeverage  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> linearPositionsSaveLeverageWithHttpInfo(String symbol, Double buyLeverage, Double sellLeverage) throws ApiException {
        com.squareup.okhttp.Call call = linearPositionsSaveLeverageValidateBeforeCall(symbol, buyLeverage, sellLeverage, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set leverage (asynchronously)
     * This will Set Leverage
     * @param symbol  (optional)
     * @param buyLeverage  (optional)
     * @param sellLeverage  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call linearPositionsSaveLeverageAsync(String symbol, Double buyLeverage, Double sellLeverage, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = linearPositionsSaveLeverageValidateBeforeCall(symbol, buyLeverage, sellLeverage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for linearPositionsSetAutoAddMargin
     * @param symbol  (optional)
     * @param side  (optional)
     * @param autoAddMargin  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call linearPositionsSetAutoAddMarginCall(String symbol, String side, Boolean autoAddMargin, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/private/linear/position/set-auto-add-margin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);
        if (side != null)
        localVarFormParams.put("side", side);
        if (autoAddMargin != null)
        localVarFormParams.put("auto_add_margin", autoAddMargin);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call linearPositionsSetAutoAddMarginValidateBeforeCall(String symbol, String side, Boolean autoAddMargin, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = linearPositionsSetAutoAddMarginCall(symbol, side, autoAddMargin, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set auto add margin
     * This will Set auto add margin
     * @param symbol  (optional)
     * @param side  (optional)
     * @param autoAddMargin  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object linearPositionsSetAutoAddMargin(String symbol, String side, Boolean autoAddMargin) throws ApiException {
        ApiResponse<Object> resp = linearPositionsSetAutoAddMarginWithHttpInfo(symbol, side, autoAddMargin);
        return resp.getData();
    }

    /**
     * Set auto add margin
     * This will Set auto add margin
     * @param symbol  (optional)
     * @param side  (optional)
     * @param autoAddMargin  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> linearPositionsSetAutoAddMarginWithHttpInfo(String symbol, String side, Boolean autoAddMargin) throws ApiException {
        com.squareup.okhttp.Call call = linearPositionsSetAutoAddMarginValidateBeforeCall(symbol, side, autoAddMargin, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set auto add margin (asynchronously)
     * This will Set auto add margin
     * @param symbol  (optional)
     * @param side  (optional)
     * @param autoAddMargin  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call linearPositionsSetAutoAddMarginAsync(String symbol, String side, Boolean autoAddMargin, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = linearPositionsSetAutoAddMarginValidateBeforeCall(symbol, side, autoAddMargin, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for linearPositionsSwitchIsolated
     * @param symbol  (optional)
     * @param isIsolated  (optional)
     * @param buyLeverage  (optional)
     * @param sellLeverage  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call linearPositionsSwitchIsolatedCall(String symbol, Boolean isIsolated, Double buyLeverage, Double sellLeverage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/private/linear/position/switch-isolated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);
        if (isIsolated != null)
        localVarFormParams.put("is_isolated", isIsolated);
        if (buyLeverage != null)
        localVarFormParams.put("buy_leverage", buyLeverage);
        if (sellLeverage != null)
        localVarFormParams.put("sell_leverage", sellLeverage);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call linearPositionsSwitchIsolatedValidateBeforeCall(String symbol, Boolean isIsolated, Double buyLeverage, Double sellLeverage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = linearPositionsSwitchIsolatedCall(symbol, isIsolated, buyLeverage, sellLeverage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Switch isolated
     * This will switch isolated
     * @param symbol  (optional)
     * @param isIsolated  (optional)
     * @param buyLeverage  (optional)
     * @param sellLeverage  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object linearPositionsSwitchIsolated(String symbol, Boolean isIsolated, Double buyLeverage, Double sellLeverage) throws ApiException {
        ApiResponse<Object> resp = linearPositionsSwitchIsolatedWithHttpInfo(symbol, isIsolated, buyLeverage, sellLeverage);
        return resp.getData();
    }

    /**
     * Switch isolated
     * This will switch isolated
     * @param symbol  (optional)
     * @param isIsolated  (optional)
     * @param buyLeverage  (optional)
     * @param sellLeverage  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> linearPositionsSwitchIsolatedWithHttpInfo(String symbol, Boolean isIsolated, Double buyLeverage, Double sellLeverage) throws ApiException {
        com.squareup.okhttp.Call call = linearPositionsSwitchIsolatedValidateBeforeCall(symbol, isIsolated, buyLeverage, sellLeverage, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Switch isolated (asynchronously)
     * This will switch isolated
     * @param symbol  (optional)
     * @param isIsolated  (optional)
     * @param buyLeverage  (optional)
     * @param sellLeverage  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call linearPositionsSwitchIsolatedAsync(String symbol, Boolean isIsolated, Double buyLeverage, Double sellLeverage, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = linearPositionsSwitchIsolatedValidateBeforeCall(symbol, isIsolated, buyLeverage, sellLeverage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for linearPositionsSwitchMode
     * @param symbol  (optional)
     * @param tpSlMode  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call linearPositionsSwitchModeCall(String symbol, String tpSlMode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/private/linear/tpsl/switch-mode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);
        if (tpSlMode != null)
        localVarFormParams.put("tp_sl_mode", tpSlMode);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call linearPositionsSwitchModeValidateBeforeCall(String symbol, String tpSlMode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = linearPositionsSwitchModeCall(symbol, tpSlMode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Switch Mode
     * This will Switch TP/SL Mode
     * @param symbol  (optional)
     * @param tpSlMode  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object linearPositionsSwitchMode(String symbol, String tpSlMode) throws ApiException {
        ApiResponse<Object> resp = linearPositionsSwitchModeWithHttpInfo(symbol, tpSlMode);
        return resp.getData();
    }

    /**
     * Switch Mode
     * This will Switch TP/SL Mode
     * @param symbol  (optional)
     * @param tpSlMode  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> linearPositionsSwitchModeWithHttpInfo(String symbol, String tpSlMode) throws ApiException {
        com.squareup.okhttp.Call call = linearPositionsSwitchModeValidateBeforeCall(symbol, tpSlMode, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Switch Mode (asynchronously)
     * This will Switch TP/SL Mode
     * @param symbol  (optional)
     * @param tpSlMode  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call linearPositionsSwitchModeAsync(String symbol, String tpSlMode, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = linearPositionsSwitchModeValidateBeforeCall(symbol, tpSlMode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for linearPositionsTradingStop
     * @param symbol  (optional)
     * @param side  (optional)
     * @param takeProfit  (optional)
     * @param stopLoss  (optional)
     * @param trailingStop  (optional)
     * @param tpTriggerBy  (optional)
     * @param slTriggerBy  (optional)
     * @param slSize  (optional)
     * @param tpSize  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call linearPositionsTradingStopCall(String symbol, String side, Double takeProfit, Double stopLoss, Double trailingStop, String tpTriggerBy, String slTriggerBy, Double slSize, Double tpSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/private/linear/position/trading-stop";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);
        if (side != null)
        localVarFormParams.put("side", side);
        if (takeProfit != null)
        localVarFormParams.put("take_profit", takeProfit);
        if (stopLoss != null)
        localVarFormParams.put("stop_loss", stopLoss);
        if (trailingStop != null)
        localVarFormParams.put("trailing_stop", trailingStop);
        if (tpTriggerBy != null)
        localVarFormParams.put("tp_trigger_by", tpTriggerBy);
        if (slTriggerBy != null)
        localVarFormParams.put("sl_trigger_by", slTriggerBy);
        if (slSize != null)
        localVarFormParams.put("sl_size", slSize);
        if (tpSize != null)
        localVarFormParams.put("tp_size", tpSize);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call linearPositionsTradingStopValidateBeforeCall(String symbol, String side, Double takeProfit, Double stopLoss, Double trailingStop, String tpTriggerBy, String slTriggerBy, Double slSize, Double tpSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = linearPositionsTradingStopCall(symbol, side, takeProfit, stopLoss, trailingStop, tpTriggerBy, slTriggerBy, slSize, tpSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set tradingStop
     * This will set tradingStop
     * @param symbol  (optional)
     * @param side  (optional)
     * @param takeProfit  (optional)
     * @param stopLoss  (optional)
     * @param trailingStop  (optional)
     * @param tpTriggerBy  (optional)
     * @param slTriggerBy  (optional)
     * @param slSize  (optional)
     * @param tpSize  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object linearPositionsTradingStop(String symbol, String side, Double takeProfit, Double stopLoss, Double trailingStop, String tpTriggerBy, String slTriggerBy, Double slSize, Double tpSize) throws ApiException {
        ApiResponse<Object> resp = linearPositionsTradingStopWithHttpInfo(symbol, side, takeProfit, stopLoss, trailingStop, tpTriggerBy, slTriggerBy, slSize, tpSize);
        return resp.getData();
    }

    /**
     * Set tradingStop
     * This will set tradingStop
     * @param symbol  (optional)
     * @param side  (optional)
     * @param takeProfit  (optional)
     * @param stopLoss  (optional)
     * @param trailingStop  (optional)
     * @param tpTriggerBy  (optional)
     * @param slTriggerBy  (optional)
     * @param slSize  (optional)
     * @param tpSize  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> linearPositionsTradingStopWithHttpInfo(String symbol, String side, Double takeProfit, Double stopLoss, Double trailingStop, String tpTriggerBy, String slTriggerBy, Double slSize, Double tpSize) throws ApiException {
        com.squareup.okhttp.Call call = linearPositionsTradingStopValidateBeforeCall(symbol, side, takeProfit, stopLoss, trailingStop, tpTriggerBy, slTriggerBy, slSize, tpSize, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set tradingStop (asynchronously)
     * This will set tradingStop
     * @param symbol  (optional)
     * @param side  (optional)
     * @param takeProfit  (optional)
     * @param stopLoss  (optional)
     * @param trailingStop  (optional)
     * @param tpTriggerBy  (optional)
     * @param slTriggerBy  (optional)
     * @param slSize  (optional)
     * @param tpSize  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call linearPositionsTradingStopAsync(String symbol, String side, Double takeProfit, Double stopLoss, Double trailingStop, String tpTriggerBy, String slTriggerBy, Double slSize, Double tpSize, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = linearPositionsTradingStopValidateBeforeCall(symbol, side, takeProfit, stopLoss, trailingStop, tpTriggerBy, slTriggerBy, slSize, tpSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
