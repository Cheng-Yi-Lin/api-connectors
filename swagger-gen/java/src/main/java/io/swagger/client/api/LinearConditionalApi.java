/*
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LinearConditionalApi {
    private ApiClient apiClient;

    public LinearConditionalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LinearConditionalApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for linearConditionalCancel
     * @param stopOrderId  (optional)
     * @param orderLinkId  (optional)
     * @param symbol  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call linearConditionalCancelCall(String stopOrderId, String orderLinkId, String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/private/linear/stop-order/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (stopOrderId != null)
        localVarFormParams.put("stop_order_id", stopOrderId);
        if (orderLinkId != null)
        localVarFormParams.put("order_link_id", orderLinkId);
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call linearConditionalCancelValidateBeforeCall(String stopOrderId, String orderLinkId, String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = linearConditionalCancelCall(stopOrderId, orderLinkId, symbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cancel Active Order
     * This will cancel linear active order
     * @param stopOrderId  (optional)
     * @param orderLinkId  (optional)
     * @param symbol  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object linearConditionalCancel(String stopOrderId, String orderLinkId, String symbol) throws ApiException {
        ApiResponse<Object> resp = linearConditionalCancelWithHttpInfo(stopOrderId, orderLinkId, symbol);
        return resp.getData();
    }

    /**
     * Cancel Active Order
     * This will cancel linear active order
     * @param stopOrderId  (optional)
     * @param orderLinkId  (optional)
     * @param symbol  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> linearConditionalCancelWithHttpInfo(String stopOrderId, String orderLinkId, String symbol) throws ApiException {
        com.squareup.okhttp.Call call = linearConditionalCancelValidateBeforeCall(stopOrderId, orderLinkId, symbol, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel Active Order (asynchronously)
     * This will cancel linear active order
     * @param stopOrderId  (optional)
     * @param orderLinkId  (optional)
     * @param symbol  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call linearConditionalCancelAsync(String stopOrderId, String orderLinkId, String symbol, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = linearConditionalCancelValidateBeforeCall(stopOrderId, orderLinkId, symbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for linearConditionalCancelAll
     * @param symbol Contract type. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call linearConditionalCancelAllCall(String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/private/linear/stop-order/cancel-all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call linearConditionalCancelAllValidateBeforeCall(String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling linearConditionalCancelAll(Async)");
        }
        

        com.squareup.okhttp.Call call = linearConditionalCancelAllCall(symbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cancel all stop orders.
     * 
     * @param symbol Contract type. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object linearConditionalCancelAll(String symbol) throws ApiException {
        ApiResponse<Object> resp = linearConditionalCancelAllWithHttpInfo(symbol);
        return resp.getData();
    }

    /**
     * Cancel all stop orders.
     * 
     * @param symbol Contract type. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> linearConditionalCancelAllWithHttpInfo(String symbol) throws ApiException {
        com.squareup.okhttp.Call call = linearConditionalCancelAllValidateBeforeCall(symbol, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel all stop orders. (asynchronously)
     * 
     * @param symbol Contract type. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call linearConditionalCancelAllAsync(String symbol, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = linearConditionalCancelAllValidateBeforeCall(symbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for linearConditionalGetOrders
     * @param stopOrderId  (optional)
     * @param orderLinkId  (optional)
     * @param symbol  (optional)
     * @param order  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param stopOrderStatus  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call linearConditionalGetOrdersCall(String stopOrderId, String orderLinkId, String symbol, String order, String page, String limit, String stopOrderStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/private/linear/stop-order/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (stopOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stop_order_id", stopOrderId));
        if (orderLinkId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_link_id", orderLinkId));
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order", order));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (stopOrderStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stop_order_status", stopOrderStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call linearConditionalGetOrdersValidateBeforeCall(String stopOrderId, String orderLinkId, String symbol, String order, String page, String limit, String stopOrderStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = linearConditionalGetOrdersCall(stopOrderId, orderLinkId, symbol, order, page, limit, stopOrderStatus, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get linear Stop Orders
     * This will get linear active orders
     * @param stopOrderId  (optional)
     * @param orderLinkId  (optional)
     * @param symbol  (optional)
     * @param order  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param stopOrderStatus  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object linearConditionalGetOrders(String stopOrderId, String orderLinkId, String symbol, String order, String page, String limit, String stopOrderStatus) throws ApiException {
        ApiResponse<Object> resp = linearConditionalGetOrdersWithHttpInfo(stopOrderId, orderLinkId, symbol, order, page, limit, stopOrderStatus);
        return resp.getData();
    }

    /**
     * Get linear Stop Orders
     * This will get linear active orders
     * @param stopOrderId  (optional)
     * @param orderLinkId  (optional)
     * @param symbol  (optional)
     * @param order  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param stopOrderStatus  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> linearConditionalGetOrdersWithHttpInfo(String stopOrderId, String orderLinkId, String symbol, String order, String page, String limit, String stopOrderStatus) throws ApiException {
        com.squareup.okhttp.Call call = linearConditionalGetOrdersValidateBeforeCall(stopOrderId, orderLinkId, symbol, order, page, limit, stopOrderStatus, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get linear Stop Orders (asynchronously)
     * This will get linear active orders
     * @param stopOrderId  (optional)
     * @param orderLinkId  (optional)
     * @param symbol  (optional)
     * @param order  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param stopOrderStatus  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call linearConditionalGetOrdersAsync(String stopOrderId, String orderLinkId, String symbol, String order, String page, String limit, String stopOrderStatus, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = linearConditionalGetOrdersValidateBeforeCall(stopOrderId, orderLinkId, symbol, order, page, limit, stopOrderStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for linearConditionalNew
     * @param symbol  (optional)
     * @param side  (optional)
     * @param orderType  (optional)
     * @param qty  (optional)
     * @param price  (optional)
     * @param basePrice  (optional)
     * @param stopPx  (optional)
     * @param timeInForce  (optional)
     * @param triggerBy  (optional)
     * @param reduceOnly  (optional)
     * @param closeOnTrigger  (optional)
     * @param orderLinkId  (optional)
     * @param takeProfit  (optional)
     * @param stopLoss  (optional)
     * @param tpTriggerBy  (optional)
     * @param slTriggerBy  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call linearConditionalNewCall(String symbol, String side, String orderType, Double qty, Double price, Double basePrice, Double stopPx, String timeInForce, String triggerBy, Boolean reduceOnly, Boolean closeOnTrigger, String orderLinkId, Double takeProfit, Double stopLoss, String tpTriggerBy, String slTriggerBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/private/linear/stop-order/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);
        if (side != null)
        localVarFormParams.put("side", side);
        if (orderType != null)
        localVarFormParams.put("order_type", orderType);
        if (qty != null)
        localVarFormParams.put("qty", qty);
        if (price != null)
        localVarFormParams.put("price", price);
        if (basePrice != null)
        localVarFormParams.put("base_price", basePrice);
        if (stopPx != null)
        localVarFormParams.put("stop_px", stopPx);
        if (timeInForce != null)
        localVarFormParams.put("time_in_force", timeInForce);
        if (triggerBy != null)
        localVarFormParams.put("trigger_by", triggerBy);
        if (reduceOnly != null)
        localVarFormParams.put("reduce_only", reduceOnly);
        if (closeOnTrigger != null)
        localVarFormParams.put("close_on_trigger", closeOnTrigger);
        if (orderLinkId != null)
        localVarFormParams.put("order_link_id", orderLinkId);
        if (takeProfit != null)
        localVarFormParams.put("take_profit", takeProfit);
        if (stopLoss != null)
        localVarFormParams.put("stop_loss", stopLoss);
        if (tpTriggerBy != null)
        localVarFormParams.put("tp_trigger_by", tpTriggerBy);
        if (slTriggerBy != null)
        localVarFormParams.put("sl_trigger_by", slTriggerBy);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call linearConditionalNewValidateBeforeCall(String symbol, String side, String orderType, Double qty, Double price, Double basePrice, Double stopPx, String timeInForce, String triggerBy, Boolean reduceOnly, Boolean closeOnTrigger, String orderLinkId, Double takeProfit, Double stopLoss, String tpTriggerBy, String slTriggerBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = linearConditionalNewCall(symbol, side, orderType, qty, price, basePrice, stopPx, timeInForce, triggerBy, reduceOnly, closeOnTrigger, orderLinkId, takeProfit, stopLoss, tpTriggerBy, slTriggerBy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create linear stop Order
     * This will create linear stop order
     * @param symbol  (optional)
     * @param side  (optional)
     * @param orderType  (optional)
     * @param qty  (optional)
     * @param price  (optional)
     * @param basePrice  (optional)
     * @param stopPx  (optional)
     * @param timeInForce  (optional)
     * @param triggerBy  (optional)
     * @param reduceOnly  (optional)
     * @param closeOnTrigger  (optional)
     * @param orderLinkId  (optional)
     * @param takeProfit  (optional)
     * @param stopLoss  (optional)
     * @param tpTriggerBy  (optional)
     * @param slTriggerBy  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object linearConditionalNew(String symbol, String side, String orderType, Double qty, Double price, Double basePrice, Double stopPx, String timeInForce, String triggerBy, Boolean reduceOnly, Boolean closeOnTrigger, String orderLinkId, Double takeProfit, Double stopLoss, String tpTriggerBy, String slTriggerBy) throws ApiException {
        ApiResponse<Object> resp = linearConditionalNewWithHttpInfo(symbol, side, orderType, qty, price, basePrice, stopPx, timeInForce, triggerBy, reduceOnly, closeOnTrigger, orderLinkId, takeProfit, stopLoss, tpTriggerBy, slTriggerBy);
        return resp.getData();
    }

    /**
     * Create linear stop Order
     * This will create linear stop order
     * @param symbol  (optional)
     * @param side  (optional)
     * @param orderType  (optional)
     * @param qty  (optional)
     * @param price  (optional)
     * @param basePrice  (optional)
     * @param stopPx  (optional)
     * @param timeInForce  (optional)
     * @param triggerBy  (optional)
     * @param reduceOnly  (optional)
     * @param closeOnTrigger  (optional)
     * @param orderLinkId  (optional)
     * @param takeProfit  (optional)
     * @param stopLoss  (optional)
     * @param tpTriggerBy  (optional)
     * @param slTriggerBy  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> linearConditionalNewWithHttpInfo(String symbol, String side, String orderType, Double qty, Double price, Double basePrice, Double stopPx, String timeInForce, String triggerBy, Boolean reduceOnly, Boolean closeOnTrigger, String orderLinkId, Double takeProfit, Double stopLoss, String tpTriggerBy, String slTriggerBy) throws ApiException {
        com.squareup.okhttp.Call call = linearConditionalNewValidateBeforeCall(symbol, side, orderType, qty, price, basePrice, stopPx, timeInForce, triggerBy, reduceOnly, closeOnTrigger, orderLinkId, takeProfit, stopLoss, tpTriggerBy, slTriggerBy, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create linear stop Order (asynchronously)
     * This will create linear stop order
     * @param symbol  (optional)
     * @param side  (optional)
     * @param orderType  (optional)
     * @param qty  (optional)
     * @param price  (optional)
     * @param basePrice  (optional)
     * @param stopPx  (optional)
     * @param timeInForce  (optional)
     * @param triggerBy  (optional)
     * @param reduceOnly  (optional)
     * @param closeOnTrigger  (optional)
     * @param orderLinkId  (optional)
     * @param takeProfit  (optional)
     * @param stopLoss  (optional)
     * @param tpTriggerBy  (optional)
     * @param slTriggerBy  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call linearConditionalNewAsync(String symbol, String side, String orderType, Double qty, Double price, Double basePrice, Double stopPx, String timeInForce, String triggerBy, Boolean reduceOnly, Boolean closeOnTrigger, String orderLinkId, Double takeProfit, Double stopLoss, String tpTriggerBy, String slTriggerBy, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = linearConditionalNewValidateBeforeCall(symbol, side, orderType, qty, price, basePrice, stopPx, timeInForce, triggerBy, reduceOnly, closeOnTrigger, orderLinkId, takeProfit, stopLoss, tpTriggerBy, slTriggerBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for linearConditionalQuery
     * @param symbol  (optional)
     * @param stopOrderId  (optional)
     * @param orderLinkId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call linearConditionalQueryCall(String symbol, String stopOrderId, String orderLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/private/linear/stop-order/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (stopOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stop_order_id", stopOrderId));
        if (orderLinkId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_link_id", orderLinkId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call linearConditionalQueryValidateBeforeCall(String symbol, String stopOrderId, String orderLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = linearConditionalQueryCall(symbol, stopOrderId, orderLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Stop Orders(real-time)
     * This will get linear stop orders(real-time)
     * @param symbol  (optional)
     * @param stopOrderId  (optional)
     * @param orderLinkId  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object linearConditionalQuery(String symbol, String stopOrderId, String orderLinkId) throws ApiException {
        ApiResponse<Object> resp = linearConditionalQueryWithHttpInfo(symbol, stopOrderId, orderLinkId);
        return resp.getData();
    }

    /**
     * Get Stop Orders(real-time)
     * This will get linear stop orders(real-time)
     * @param symbol  (optional)
     * @param stopOrderId  (optional)
     * @param orderLinkId  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> linearConditionalQueryWithHttpInfo(String symbol, String stopOrderId, String orderLinkId) throws ApiException {
        com.squareup.okhttp.Call call = linearConditionalQueryValidateBeforeCall(symbol, stopOrderId, orderLinkId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Stop Orders(real-time) (asynchronously)
     * This will get linear stop orders(real-time)
     * @param symbol  (optional)
     * @param stopOrderId  (optional)
     * @param orderLinkId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call linearConditionalQueryAsync(String symbol, String stopOrderId, String orderLinkId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = linearConditionalQueryValidateBeforeCall(symbol, stopOrderId, orderLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for linearConditionalReplace
     * @param symbol  (required)
     * @param stopOrderId  (optional)
     * @param orderLinkId  (optional)
     * @param pRQty  (optional)
     * @param pRPrice  (optional)
     * @param pRTriggerPrice  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call linearConditionalReplaceCall(String symbol, String stopOrderId, String orderLinkId, String pRQty, BigDecimal pRPrice, BigDecimal pRTriggerPrice, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/private/linear/stop-order/replace";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);
        if (stopOrderId != null)
        localVarFormParams.put("stop_order_id", stopOrderId);
        if (orderLinkId != null)
        localVarFormParams.put("order_link_id", orderLinkId);
        if (pRQty != null)
        localVarFormParams.put("p_r_qty", pRQty);
        if (pRPrice != null)
        localVarFormParams.put("p_r_price", pRPrice);
        if (pRTriggerPrice != null)
        localVarFormParams.put("p_r_trigger_price", pRTriggerPrice);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call linearConditionalReplaceValidateBeforeCall(String symbol, String stopOrderId, String orderLinkId, String pRQty, BigDecimal pRPrice, BigDecimal pRTriggerPrice, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling linearConditionalReplace(Async)");
        }
        

        com.squareup.okhttp.Call call = linearConditionalReplaceCall(symbol, stopOrderId, orderLinkId, pRQty, pRPrice, pRTriggerPrice, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace conditional order
     * 
     * @param symbol  (required)
     * @param stopOrderId  (optional)
     * @param orderLinkId  (optional)
     * @param pRQty  (optional)
     * @param pRPrice  (optional)
     * @param pRTriggerPrice  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object linearConditionalReplace(String symbol, String stopOrderId, String orderLinkId, String pRQty, BigDecimal pRPrice, BigDecimal pRTriggerPrice) throws ApiException {
        ApiResponse<Object> resp = linearConditionalReplaceWithHttpInfo(symbol, stopOrderId, orderLinkId, pRQty, pRPrice, pRTriggerPrice);
        return resp.getData();
    }

    /**
     * Replace conditional order
     * 
     * @param symbol  (required)
     * @param stopOrderId  (optional)
     * @param orderLinkId  (optional)
     * @param pRQty  (optional)
     * @param pRPrice  (optional)
     * @param pRTriggerPrice  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> linearConditionalReplaceWithHttpInfo(String symbol, String stopOrderId, String orderLinkId, String pRQty, BigDecimal pRPrice, BigDecimal pRTriggerPrice) throws ApiException {
        com.squareup.okhttp.Call call = linearConditionalReplaceValidateBeforeCall(symbol, stopOrderId, orderLinkId, pRQty, pRPrice, pRTriggerPrice, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace conditional order (asynchronously)
     * 
     * @param symbol  (required)
     * @param stopOrderId  (optional)
     * @param orderLinkId  (optional)
     * @param pRQty  (optional)
     * @param pRPrice  (optional)
     * @param pRTriggerPrice  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call linearConditionalReplaceAsync(String symbol, String stopOrderId, String orderLinkId, String pRQty, BigDecimal pRPrice, BigDecimal pRTriggerPrice, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = linearConditionalReplaceValidateBeforeCall(symbol, stopOrderId, orderLinkId, pRQty, pRPrice, pRTriggerPrice, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
