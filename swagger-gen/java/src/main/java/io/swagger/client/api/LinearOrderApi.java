/*
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.12
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LinearOrderApi {
    private ApiClient apiClient;

    public LinearOrderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LinearOrderApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for linearOrderCancel
     * @param orderId  (optional)
     * @param orderLinkId  (optional)
     * @param symbol  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call linearOrderCancelCall(String orderId, String orderLinkId, String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/private/linear/order/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (orderId != null)
        localVarFormParams.put("order_id", orderId);
        if (orderLinkId != null)
        localVarFormParams.put("order_link_id", orderLinkId);
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call linearOrderCancelValidateBeforeCall(String orderId, String orderLinkId, String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = linearOrderCancelCall(orderId, orderLinkId, symbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cancel Active Order
     * This will cancel linear active order
     * @param orderId  (optional)
     * @param orderLinkId  (optional)
     * @param symbol  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object linearOrderCancel(String orderId, String orderLinkId, String symbol) throws ApiException {
        ApiResponse<Object> resp = linearOrderCancelWithHttpInfo(orderId, orderLinkId, symbol);
        return resp.getData();
    }

    /**
     * Cancel Active Order
     * This will cancel linear active order
     * @param orderId  (optional)
     * @param orderLinkId  (optional)
     * @param symbol  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> linearOrderCancelWithHttpInfo(String orderId, String orderLinkId, String symbol) throws ApiException {
        com.squareup.okhttp.Call call = linearOrderCancelValidateBeforeCall(orderId, orderLinkId, symbol, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel Active Order (asynchronously)
     * This will cancel linear active order
     * @param orderId  (optional)
     * @param orderLinkId  (optional)
     * @param symbol  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call linearOrderCancelAsync(String orderId, String orderLinkId, String symbol, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = linearOrderCancelValidateBeforeCall(orderId, orderLinkId, symbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for linearOrderCancelAll
     * @param symbol Contract type. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call linearOrderCancelAllCall(String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/private/linear/order/cancel-all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call linearOrderCancelAllValidateBeforeCall(String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling linearOrderCancelAll(Async)");
        }
        

        com.squareup.okhttp.Call call = linearOrderCancelAllCall(symbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cancel all active orders.
     * 
     * @param symbol Contract type. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object linearOrderCancelAll(String symbol) throws ApiException {
        ApiResponse<Object> resp = linearOrderCancelAllWithHttpInfo(symbol);
        return resp.getData();
    }

    /**
     * Cancel all active orders.
     * 
     * @param symbol Contract type. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> linearOrderCancelAllWithHttpInfo(String symbol) throws ApiException {
        com.squareup.okhttp.Call call = linearOrderCancelAllValidateBeforeCall(symbol, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel all active orders. (asynchronously)
     * 
     * @param symbol Contract type. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call linearOrderCancelAllAsync(String symbol, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = linearOrderCancelAllValidateBeforeCall(symbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for linearOrderGetOrders
     * @param orderId  (optional)
     * @param orderLinkId  (optional)
     * @param symbol  (optional)
     * @param order  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param orderStatus  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call linearOrderGetOrdersCall(String orderId, String orderLinkId, String symbol, String order, String page, String limit, String orderStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/private/linear/order/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_id", orderId));
        if (orderLinkId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_link_id", orderLinkId));
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order", order));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (orderStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_status", orderStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call linearOrderGetOrdersValidateBeforeCall(String orderId, String orderLinkId, String symbol, String order, String page, String limit, String orderStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = linearOrderGetOrdersCall(orderId, orderLinkId, symbol, order, page, limit, orderStatus, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get linear Active Orders
     * This will get linear active orders
     * @param orderId  (optional)
     * @param orderLinkId  (optional)
     * @param symbol  (optional)
     * @param order  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param orderStatus  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object linearOrderGetOrders(String orderId, String orderLinkId, String symbol, String order, String page, String limit, String orderStatus) throws ApiException {
        ApiResponse<Object> resp = linearOrderGetOrdersWithHttpInfo(orderId, orderLinkId, symbol, order, page, limit, orderStatus);
        return resp.getData();
    }

    /**
     * Get linear Active Orders
     * This will get linear active orders
     * @param orderId  (optional)
     * @param orderLinkId  (optional)
     * @param symbol  (optional)
     * @param order  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param orderStatus  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> linearOrderGetOrdersWithHttpInfo(String orderId, String orderLinkId, String symbol, String order, String page, String limit, String orderStatus) throws ApiException {
        com.squareup.okhttp.Call call = linearOrderGetOrdersValidateBeforeCall(orderId, orderLinkId, symbol, order, page, limit, orderStatus, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get linear Active Orders (asynchronously)
     * This will get linear active orders
     * @param orderId  (optional)
     * @param orderLinkId  (optional)
     * @param symbol  (optional)
     * @param order  (optional)
     * @param page  (optional)
     * @param limit  (optional)
     * @param orderStatus  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call linearOrderGetOrdersAsync(String orderId, String orderLinkId, String symbol, String order, String page, String limit, String orderStatus, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = linearOrderGetOrdersValidateBeforeCall(orderId, orderLinkId, symbol, order, page, limit, orderStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for linearOrderNew
     * @param symbol  (optional)
     * @param side  (optional)
     * @param orderType  (optional)
     * @param timeInForce  (optional)
     * @param qty  (optional)
     * @param price  (optional)
     * @param takeProfit  (optional)
     * @param stopLoss  (optional)
     * @param reduceOnly  (optional)
     * @param tpTriggerBy  (optional)
     * @param slTriggerBy  (optional)
     * @param closeOnTrigger  (optional)
     * @param orderLinkId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call linearOrderNewCall(String symbol, String side, String orderType, String timeInForce, Double qty, Double price, Double takeProfit, Double stopLoss, Boolean reduceOnly, String tpTriggerBy, String slTriggerBy, Boolean closeOnTrigger, String orderLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/private/linear/order/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);
        if (side != null)
        localVarFormParams.put("side", side);
        if (orderType != null)
        localVarFormParams.put("order_type", orderType);
        if (timeInForce != null)
        localVarFormParams.put("time_in_force", timeInForce);
        if (qty != null)
        localVarFormParams.put("qty", qty);
        if (price != null)
        localVarFormParams.put("price", price);
        if (takeProfit != null)
        localVarFormParams.put("take_profit", takeProfit);
        if (stopLoss != null)
        localVarFormParams.put("stop_loss", stopLoss);
        if (reduceOnly != null)
        localVarFormParams.put("reduce_only", reduceOnly);
        if (tpTriggerBy != null)
        localVarFormParams.put("tp_trigger_by", tpTriggerBy);
        if (slTriggerBy != null)
        localVarFormParams.put("sl_trigger_by", slTriggerBy);
        if (closeOnTrigger != null)
        localVarFormParams.put("close_on_trigger", closeOnTrigger);
        if (orderLinkId != null)
        localVarFormParams.put("order_link_id", orderLinkId);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call linearOrderNewValidateBeforeCall(String symbol, String side, String orderType, String timeInForce, Double qty, Double price, Double takeProfit, Double stopLoss, Boolean reduceOnly, String tpTriggerBy, String slTriggerBy, Boolean closeOnTrigger, String orderLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = linearOrderNewCall(symbol, side, orderType, timeInForce, qty, price, takeProfit, stopLoss, reduceOnly, tpTriggerBy, slTriggerBy, closeOnTrigger, orderLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Active Order
     * This will create linear order
     * @param symbol  (optional)
     * @param side  (optional)
     * @param orderType  (optional)
     * @param timeInForce  (optional)
     * @param qty  (optional)
     * @param price  (optional)
     * @param takeProfit  (optional)
     * @param stopLoss  (optional)
     * @param reduceOnly  (optional)
     * @param tpTriggerBy  (optional)
     * @param slTriggerBy  (optional)
     * @param closeOnTrigger  (optional)
     * @param orderLinkId  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object linearOrderNew(String symbol, String side, String orderType, String timeInForce, Double qty, Double price, Double takeProfit, Double stopLoss, Boolean reduceOnly, String tpTriggerBy, String slTriggerBy, Boolean closeOnTrigger, String orderLinkId) throws ApiException {
        ApiResponse<Object> resp = linearOrderNewWithHttpInfo(symbol, side, orderType, timeInForce, qty, price, takeProfit, stopLoss, reduceOnly, tpTriggerBy, slTriggerBy, closeOnTrigger, orderLinkId);
        return resp.getData();
    }

    /**
     * Create Active Order
     * This will create linear order
     * @param symbol  (optional)
     * @param side  (optional)
     * @param orderType  (optional)
     * @param timeInForce  (optional)
     * @param qty  (optional)
     * @param price  (optional)
     * @param takeProfit  (optional)
     * @param stopLoss  (optional)
     * @param reduceOnly  (optional)
     * @param tpTriggerBy  (optional)
     * @param slTriggerBy  (optional)
     * @param closeOnTrigger  (optional)
     * @param orderLinkId  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> linearOrderNewWithHttpInfo(String symbol, String side, String orderType, String timeInForce, Double qty, Double price, Double takeProfit, Double stopLoss, Boolean reduceOnly, String tpTriggerBy, String slTriggerBy, Boolean closeOnTrigger, String orderLinkId) throws ApiException {
        com.squareup.okhttp.Call call = linearOrderNewValidateBeforeCall(symbol, side, orderType, timeInForce, qty, price, takeProfit, stopLoss, reduceOnly, tpTriggerBy, slTriggerBy, closeOnTrigger, orderLinkId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Active Order (asynchronously)
     * This will create linear order
     * @param symbol  (optional)
     * @param side  (optional)
     * @param orderType  (optional)
     * @param timeInForce  (optional)
     * @param qty  (optional)
     * @param price  (optional)
     * @param takeProfit  (optional)
     * @param stopLoss  (optional)
     * @param reduceOnly  (optional)
     * @param tpTriggerBy  (optional)
     * @param slTriggerBy  (optional)
     * @param closeOnTrigger  (optional)
     * @param orderLinkId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call linearOrderNewAsync(String symbol, String side, String orderType, String timeInForce, Double qty, Double price, Double takeProfit, Double stopLoss, Boolean reduceOnly, String tpTriggerBy, String slTriggerBy, Boolean closeOnTrigger, String orderLinkId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = linearOrderNewValidateBeforeCall(symbol, side, orderType, timeInForce, qty, price, takeProfit, stopLoss, reduceOnly, tpTriggerBy, slTriggerBy, closeOnTrigger, orderLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for linearOrderQuery
     * @param symbol  (optional)
     * @param orderId  (optional)
     * @param orderLinkId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call linearOrderQueryCall(String symbol, String orderId, String orderLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/private/linear/order/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_id", orderId));
        if (orderLinkId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_link_id", orderLinkId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call linearOrderQueryValidateBeforeCall(String symbol, String orderId, String orderLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = linearOrderQueryCall(symbol, orderId, orderLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Active Orders(real-time)
     * This will get linear active orders(real-time)
     * @param symbol  (optional)
     * @param orderId  (optional)
     * @param orderLinkId  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object linearOrderQuery(String symbol, String orderId, String orderLinkId) throws ApiException {
        ApiResponse<Object> resp = linearOrderQueryWithHttpInfo(symbol, orderId, orderLinkId);
        return resp.getData();
    }

    /**
     * Get Active Orders(real-time)
     * This will get linear active orders(real-time)
     * @param symbol  (optional)
     * @param orderId  (optional)
     * @param orderLinkId  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> linearOrderQueryWithHttpInfo(String symbol, String orderId, String orderLinkId) throws ApiException {
        com.squareup.okhttp.Call call = linearOrderQueryValidateBeforeCall(symbol, orderId, orderLinkId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Active Orders(real-time) (asynchronously)
     * This will get linear active orders(real-time)
     * @param symbol  (optional)
     * @param orderId  (optional)
     * @param orderLinkId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call linearOrderQueryAsync(String symbol, String orderId, String orderLinkId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = linearOrderQueryValidateBeforeCall(symbol, orderId, orderLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for linearOrderReplace
     * @param symbol  (required)
     * @param orderId  (optional)
     * @param orderLinkId  (optional)
     * @param pRQty  (optional)
     * @param pRPrice  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call linearOrderReplaceCall(String symbol, String orderId, String orderLinkId, String pRQty, BigDecimal pRPrice, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/private/linear/order/replace";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);
        if (orderId != null)
        localVarFormParams.put("order_id", orderId);
        if (orderLinkId != null)
        localVarFormParams.put("order_link_id", orderLinkId);
        if (pRQty != null)
        localVarFormParams.put("p_r_qty", pRQty);
        if (pRPrice != null)
        localVarFormParams.put("p_r_price", pRPrice);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call linearOrderReplaceValidateBeforeCall(String symbol, String orderId, String orderLinkId, String pRQty, BigDecimal pRPrice, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling linearOrderReplace(Async)");
        }
        

        com.squareup.okhttp.Call call = linearOrderReplaceCall(symbol, orderId, orderLinkId, pRQty, pRPrice, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace Active Order
     * 
     * @param symbol  (required)
     * @param orderId  (optional)
     * @param orderLinkId  (optional)
     * @param pRQty  (optional)
     * @param pRPrice  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object linearOrderReplace(String symbol, String orderId, String orderLinkId, String pRQty, BigDecimal pRPrice) throws ApiException {
        ApiResponse<Object> resp = linearOrderReplaceWithHttpInfo(symbol, orderId, orderLinkId, pRQty, pRPrice);
        return resp.getData();
    }

    /**
     * Replace Active Order
     * 
     * @param symbol  (required)
     * @param orderId  (optional)
     * @param orderLinkId  (optional)
     * @param pRQty  (optional)
     * @param pRPrice  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> linearOrderReplaceWithHttpInfo(String symbol, String orderId, String orderLinkId, String pRQty, BigDecimal pRPrice) throws ApiException {
        com.squareup.okhttp.Call call = linearOrderReplaceValidateBeforeCall(symbol, orderId, orderLinkId, pRQty, pRPrice, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace Active Order (asynchronously)
     * 
     * @param symbol  (required)
     * @param orderId  (optional)
     * @param orderLinkId  (optional)
     * @param pRQty  (optional)
     * @param pRPrice  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call linearOrderReplaceAsync(String symbol, String orderId, String orderLinkId, String pRQty, BigDecimal pRPrice, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = linearOrderReplaceValidateBeforeCall(symbol, orderId, orderLinkId, pRQty, pRPrice, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
