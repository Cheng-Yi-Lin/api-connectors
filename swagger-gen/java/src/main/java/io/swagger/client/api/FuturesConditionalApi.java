/*
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.12
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FuturesConditionalApi {
    private ApiClient apiClient;

    public FuturesConditionalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FuturesConditionalApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for futuresConditionalCancel
     * @param symbol Contract type. (required)
     * @param stopOrderId Order ID of conditional order. (optional)
     * @param orderLinkId Agency customized order ID. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call futuresConditionalCancelCall(String symbol, String stopOrderId, String orderLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/futures/private/stop-order/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (stopOrderId != null)
        localVarFormParams.put("stop_order_id", stopOrderId);
        if (orderLinkId != null)
        localVarFormParams.put("order_link_id", orderLinkId);
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call futuresConditionalCancelValidateBeforeCall(String symbol, String stopOrderId, String orderLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling futuresConditionalCancel(Async)");
        }
        

        com.squareup.okhttp.Call call = futuresConditionalCancelCall(symbol, stopOrderId, orderLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cancel conditional order.
     * 
     * @param symbol Contract type. (required)
     * @param stopOrderId Order ID of conditional order. (optional)
     * @param orderLinkId Agency customized order ID. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object futuresConditionalCancel(String symbol, String stopOrderId, String orderLinkId) throws ApiException {
        ApiResponse<Object> resp = futuresConditionalCancelWithHttpInfo(symbol, stopOrderId, orderLinkId);
        return resp.getData();
    }

    /**
     * Cancel conditional order.
     * 
     * @param symbol Contract type. (required)
     * @param stopOrderId Order ID of conditional order. (optional)
     * @param orderLinkId Agency customized order ID. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> futuresConditionalCancelWithHttpInfo(String symbol, String stopOrderId, String orderLinkId) throws ApiException {
        com.squareup.okhttp.Call call = futuresConditionalCancelValidateBeforeCall(symbol, stopOrderId, orderLinkId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel conditional order. (asynchronously)
     * 
     * @param symbol Contract type. (required)
     * @param stopOrderId Order ID of conditional order. (optional)
     * @param orderLinkId Agency customized order ID. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call futuresConditionalCancelAsync(String symbol, String stopOrderId, String orderLinkId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = futuresConditionalCancelValidateBeforeCall(symbol, stopOrderId, orderLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for futuresConditionalCancelAll
     * @param symbol Contract type. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call futuresConditionalCancelAllCall(String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/futures/private/stop-order/cancelAll";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call futuresConditionalCancelAllValidateBeforeCall(String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling futuresConditionalCancelAll(Async)");
        }
        

        com.squareup.okhttp.Call call = futuresConditionalCancelAllCall(symbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cancel conditional order.
     * 
     * @param symbol Contract type. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object futuresConditionalCancelAll(String symbol) throws ApiException {
        ApiResponse<Object> resp = futuresConditionalCancelAllWithHttpInfo(symbol);
        return resp.getData();
    }

    /**
     * Cancel conditional order.
     * 
     * @param symbol Contract type. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> futuresConditionalCancelAllWithHttpInfo(String symbol) throws ApiException {
        com.squareup.okhttp.Call call = futuresConditionalCancelAllValidateBeforeCall(symbol, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel conditional order. (asynchronously)
     * 
     * @param symbol Contract type. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call futuresConditionalCancelAllAsync(String symbol, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = futuresConditionalCancelAllValidateBeforeCall(symbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for futuresConditionalGetOrders
     * @param symbol Contract type (required)
     * @param stopOrderStatus Stop order status. (optional)
     * @param limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)
     * @param direction Search direction. prev: prev page, next: next page. Defaults to next (optional)
     * @param cursor Page turning mark，Use return cursor,Sign use origin data, in request please urlencode (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call futuresConditionalGetOrdersCall(String symbol, String stopOrderStatus, BigDecimal limit, String direction, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/futures/private/stop-order/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (stopOrderStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stop_order_status", stopOrderStatus));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (direction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("direction", direction));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call futuresConditionalGetOrdersValidateBeforeCall(String symbol, String stopOrderStatus, BigDecimal limit, String direction, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling futuresConditionalGetOrders(Async)");
        }
        

        com.squareup.okhttp.Call call = futuresConditionalGetOrdersCall(symbol, stopOrderStatus, limit, direction, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get my conditional order list.
     * 
     * @param symbol Contract type (required)
     * @param stopOrderStatus Stop order status. (optional)
     * @param limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)
     * @param direction Search direction. prev: prev page, next: next page. Defaults to next (optional)
     * @param cursor Page turning mark，Use return cursor,Sign use origin data, in request please urlencode (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object futuresConditionalGetOrders(String symbol, String stopOrderStatus, BigDecimal limit, String direction, String cursor) throws ApiException {
        ApiResponse<Object> resp = futuresConditionalGetOrdersWithHttpInfo(symbol, stopOrderStatus, limit, direction, cursor);
        return resp.getData();
    }

    /**
     * Get my conditional order list.
     * 
     * @param symbol Contract type (required)
     * @param stopOrderStatus Stop order status. (optional)
     * @param limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)
     * @param direction Search direction. prev: prev page, next: next page. Defaults to next (optional)
     * @param cursor Page turning mark，Use return cursor,Sign use origin data, in request please urlencode (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> futuresConditionalGetOrdersWithHttpInfo(String symbol, String stopOrderStatus, BigDecimal limit, String direction, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = futuresConditionalGetOrdersValidateBeforeCall(symbol, stopOrderStatus, limit, direction, cursor, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get my conditional order list. (asynchronously)
     * 
     * @param symbol Contract type (required)
     * @param stopOrderStatus Stop order status. (optional)
     * @param limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)
     * @param direction Search direction. prev: prev page, next: next page. Defaults to next (optional)
     * @param cursor Page turning mark，Use return cursor,Sign use origin data, in request please urlencode (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call futuresConditionalGetOrdersAsync(String symbol, String stopOrderStatus, BigDecimal limit, String direction, String cursor, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = futuresConditionalGetOrdersValidateBeforeCall(symbol, stopOrderStatus, limit, direction, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for futuresConditionalNew
     * @param side Side. (required)
     * @param symbol Contract type. (required)
     * @param orderType Conditional order type. (required)
     * @param qty Order quantity. (required)
     * @param basePrice Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order.. (required)
     * @param stopPx Trigger price. (required)
     * @param timeInForce Time in force. (required)
     * @param price Execution price for conditional order (optional)
     * @param triggerBy Trigger price type. Default LastPrice. (optional)
     * @param closeOnTrigger close on trigger. (optional)
     * @param orderLinkId Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call futuresConditionalNewCall(String side, String symbol, String orderType, String qty, String basePrice, String stopPx, String timeInForce, String price, String triggerBy, Boolean closeOnTrigger, String orderLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/futures/private/stop-order/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (side != null)
        localVarFormParams.put("side", side);
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);
        if (orderType != null)
        localVarFormParams.put("order_type", orderType);
        if (qty != null)
        localVarFormParams.put("qty", qty);
        if (price != null)
        localVarFormParams.put("price", price);
        if (basePrice != null)
        localVarFormParams.put("base_price", basePrice);
        if (stopPx != null)
        localVarFormParams.put("stop_px", stopPx);
        if (timeInForce != null)
        localVarFormParams.put("time_in_force", timeInForce);
        if (triggerBy != null)
        localVarFormParams.put("trigger_by", triggerBy);
        if (closeOnTrigger != null)
        localVarFormParams.put("close_on_trigger", closeOnTrigger);
        if (orderLinkId != null)
        localVarFormParams.put("order_link_id", orderLinkId);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call futuresConditionalNewValidateBeforeCall(String side, String symbol, String orderType, String qty, String basePrice, String stopPx, String timeInForce, String price, String triggerBy, Boolean closeOnTrigger, String orderLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'side' is set
        if (side == null) {
            throw new ApiException("Missing the required parameter 'side' when calling futuresConditionalNew(Async)");
        }
        
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling futuresConditionalNew(Async)");
        }
        
        // verify the required parameter 'orderType' is set
        if (orderType == null) {
            throw new ApiException("Missing the required parameter 'orderType' when calling futuresConditionalNew(Async)");
        }
        
        // verify the required parameter 'qty' is set
        if (qty == null) {
            throw new ApiException("Missing the required parameter 'qty' when calling futuresConditionalNew(Async)");
        }
        
        // verify the required parameter 'basePrice' is set
        if (basePrice == null) {
            throw new ApiException("Missing the required parameter 'basePrice' when calling futuresConditionalNew(Async)");
        }
        
        // verify the required parameter 'stopPx' is set
        if (stopPx == null) {
            throw new ApiException("Missing the required parameter 'stopPx' when calling futuresConditionalNew(Async)");
        }
        
        // verify the required parameter 'timeInForce' is set
        if (timeInForce == null) {
            throw new ApiException("Missing the required parameter 'timeInForce' when calling futuresConditionalNew(Async)");
        }
        

        com.squareup.okhttp.Call call = futuresConditionalNewCall(side, symbol, orderType, qty, basePrice, stopPx, timeInForce, price, triggerBy, closeOnTrigger, orderLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Place a new conditional order.
     * 
     * @param side Side. (required)
     * @param symbol Contract type. (required)
     * @param orderType Conditional order type. (required)
     * @param qty Order quantity. (required)
     * @param basePrice Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order.. (required)
     * @param stopPx Trigger price. (required)
     * @param timeInForce Time in force. (required)
     * @param price Execution price for conditional order (optional)
     * @param triggerBy Trigger price type. Default LastPrice. (optional)
     * @param closeOnTrigger close on trigger. (optional)
     * @param orderLinkId Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object futuresConditionalNew(String side, String symbol, String orderType, String qty, String basePrice, String stopPx, String timeInForce, String price, String triggerBy, Boolean closeOnTrigger, String orderLinkId) throws ApiException {
        ApiResponse<Object> resp = futuresConditionalNewWithHttpInfo(side, symbol, orderType, qty, basePrice, stopPx, timeInForce, price, triggerBy, closeOnTrigger, orderLinkId);
        return resp.getData();
    }

    /**
     * Place a new conditional order.
     * 
     * @param side Side. (required)
     * @param symbol Contract type. (required)
     * @param orderType Conditional order type. (required)
     * @param qty Order quantity. (required)
     * @param basePrice Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order.. (required)
     * @param stopPx Trigger price. (required)
     * @param timeInForce Time in force. (required)
     * @param price Execution price for conditional order (optional)
     * @param triggerBy Trigger price type. Default LastPrice. (optional)
     * @param closeOnTrigger close on trigger. (optional)
     * @param orderLinkId Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> futuresConditionalNewWithHttpInfo(String side, String symbol, String orderType, String qty, String basePrice, String stopPx, String timeInForce, String price, String triggerBy, Boolean closeOnTrigger, String orderLinkId) throws ApiException {
        com.squareup.okhttp.Call call = futuresConditionalNewValidateBeforeCall(side, symbol, orderType, qty, basePrice, stopPx, timeInForce, price, triggerBy, closeOnTrigger, orderLinkId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Place a new conditional order. (asynchronously)
     * 
     * @param side Side. (required)
     * @param symbol Contract type. (required)
     * @param orderType Conditional order type. (required)
     * @param qty Order quantity. (required)
     * @param basePrice Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order.. (required)
     * @param stopPx Trigger price. (required)
     * @param timeInForce Time in force. (required)
     * @param price Execution price for conditional order (optional)
     * @param triggerBy Trigger price type. Default LastPrice. (optional)
     * @param closeOnTrigger close on trigger. (optional)
     * @param orderLinkId Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call futuresConditionalNewAsync(String side, String symbol, String orderType, String qty, String basePrice, String stopPx, String timeInForce, String price, String triggerBy, Boolean closeOnTrigger, String orderLinkId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = futuresConditionalNewValidateBeforeCall(side, symbol, orderType, qty, basePrice, stopPx, timeInForce, price, triggerBy, closeOnTrigger, orderLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for futuresConditionalQuery
     * @param stopOrderId Order ID of conditional order. (optional)
     * @param orderLinkId Agency customized order ID. (optional)
     * @param symbol Contract type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call futuresConditionalQueryCall(String stopOrderId, String orderLinkId, String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/futures/private/stop-order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (stopOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stop_order_id", stopOrderId));
        if (orderLinkId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_link_id", orderLinkId));
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call futuresConditionalQueryValidateBeforeCall(String stopOrderId, String orderLinkId, String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = futuresConditionalQueryCall(stopOrderId, orderLinkId, symbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Query real-time stop order information.
     * 
     * @param stopOrderId Order ID of conditional order. (optional)
     * @param orderLinkId Agency customized order ID. (optional)
     * @param symbol Contract type. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object futuresConditionalQuery(String stopOrderId, String orderLinkId, String symbol) throws ApiException {
        ApiResponse<Object> resp = futuresConditionalQueryWithHttpInfo(stopOrderId, orderLinkId, symbol);
        return resp.getData();
    }

    /**
     * Query real-time stop order information.
     * 
     * @param stopOrderId Order ID of conditional order. (optional)
     * @param orderLinkId Agency customized order ID. (optional)
     * @param symbol Contract type. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> futuresConditionalQueryWithHttpInfo(String stopOrderId, String orderLinkId, String symbol) throws ApiException {
        com.squareup.okhttp.Call call = futuresConditionalQueryValidateBeforeCall(stopOrderId, orderLinkId, symbol, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query real-time stop order information. (asynchronously)
     * 
     * @param stopOrderId Order ID of conditional order. (optional)
     * @param orderLinkId Agency customized order ID. (optional)
     * @param symbol Contract type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call futuresConditionalQueryAsync(String stopOrderId, String orderLinkId, String symbol, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = futuresConditionalQueryValidateBeforeCall(stopOrderId, orderLinkId, symbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for futuresConditionalReplace
     * @param symbol Contract type. (required)
     * @param stopOrderId Stop order ID. (optional)
     * @param orderLinkId Order Link ID. (optional)
     * @param pRQty Order quantity. (optional)
     * @param pRPrice Order price. (optional)
     * @param pRTriggerPrice Trigger price. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call futuresConditionalReplaceCall(String symbol, String stopOrderId, String orderLinkId, String pRQty, String pRPrice, String pRTriggerPrice, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/futures/private/stop-order/replace";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (stopOrderId != null)
        localVarFormParams.put("stop_order_id", stopOrderId);
        if (orderLinkId != null)
        localVarFormParams.put("order_link_id", orderLinkId);
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);
        if (pRQty != null)
        localVarFormParams.put("p_r_qty", pRQty);
        if (pRPrice != null)
        localVarFormParams.put("p_r_price", pRPrice);
        if (pRTriggerPrice != null)
        localVarFormParams.put("p_r_trigger_price", pRTriggerPrice);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call futuresConditionalReplaceValidateBeforeCall(String symbol, String stopOrderId, String orderLinkId, String pRQty, String pRPrice, String pRTriggerPrice, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling futuresConditionalReplace(Async)");
        }
        

        com.squareup.okhttp.Call call = futuresConditionalReplaceCall(symbol, stopOrderId, orderLinkId, pRQty, pRPrice, pRTriggerPrice, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Replace conditional order. Only incomplete orders can be modified. 
     * 
     * @param symbol Contract type. (required)
     * @param stopOrderId Stop order ID. (optional)
     * @param orderLinkId Order Link ID. (optional)
     * @param pRQty Order quantity. (optional)
     * @param pRPrice Order price. (optional)
     * @param pRTriggerPrice Trigger price. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object futuresConditionalReplace(String symbol, String stopOrderId, String orderLinkId, String pRQty, String pRPrice, String pRTriggerPrice) throws ApiException {
        ApiResponse<Object> resp = futuresConditionalReplaceWithHttpInfo(symbol, stopOrderId, orderLinkId, pRQty, pRPrice, pRTriggerPrice);
        return resp.getData();
    }

    /**
     * Replace conditional order. Only incomplete orders can be modified. 
     * 
     * @param symbol Contract type. (required)
     * @param stopOrderId Stop order ID. (optional)
     * @param orderLinkId Order Link ID. (optional)
     * @param pRQty Order quantity. (optional)
     * @param pRPrice Order price. (optional)
     * @param pRTriggerPrice Trigger price. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> futuresConditionalReplaceWithHttpInfo(String symbol, String stopOrderId, String orderLinkId, String pRQty, String pRPrice, String pRTriggerPrice) throws ApiException {
        com.squareup.okhttp.Call call = futuresConditionalReplaceValidateBeforeCall(symbol, stopOrderId, orderLinkId, pRQty, pRPrice, pRTriggerPrice, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace conditional order. Only incomplete orders can be modified.  (asynchronously)
     * 
     * @param symbol Contract type. (required)
     * @param stopOrderId Stop order ID. (optional)
     * @param orderLinkId Order Link ID. (optional)
     * @param pRQty Order quantity. (optional)
     * @param pRPrice Order price. (optional)
     * @param pRTriggerPrice Trigger price. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call futuresConditionalReplaceAsync(String symbol, String stopOrderId, String orderLinkId, String pRQty, String pRPrice, String pRTriggerPrice, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = futuresConditionalReplaceValidateBeforeCall(symbol, stopOrderId, orderLinkId, pRQty, pRPrice, pRTriggerPrice, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
