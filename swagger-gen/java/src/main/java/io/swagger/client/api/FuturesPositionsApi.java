/*
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.12
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FuturesPositionsApi {
    private ApiClient apiClient;

    public FuturesPositionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FuturesPositionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for futuresPositionsChangeMargin
     * @param symbol Contract type which you want update its margin (required)
     * @param margin New margin you want set (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call futuresPositionsChangeMarginCall(String symbol, String margin, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/futures/private/position/change-position-margin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);
        if (margin != null)
        localVarFormParams.put("margin", margin);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call futuresPositionsChangeMarginValidateBeforeCall(String symbol, String margin, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling futuresPositionsChangeMargin(Async)");
        }
        
        // verify the required parameter 'margin' is set
        if (margin == null) {
            throw new ApiException("Missing the required parameter 'margin' when calling futuresPositionsChangeMargin(Async)");
        }
        

        com.squareup.okhttp.Call call = futuresPositionsChangeMarginCall(symbol, margin, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update margin.
     * 
     * @param symbol Contract type which you want update its margin (required)
     * @param margin New margin you want set (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object futuresPositionsChangeMargin(String symbol, String margin) throws ApiException {
        ApiResponse<Object> resp = futuresPositionsChangeMarginWithHttpInfo(symbol, margin);
        return resp.getData();
    }

    /**
     * Update margin.
     * 
     * @param symbol Contract type which you want update its margin (required)
     * @param margin New margin you want set (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> futuresPositionsChangeMarginWithHttpInfo(String symbol, String margin) throws ApiException {
        com.squareup.okhttp.Call call = futuresPositionsChangeMarginValidateBeforeCall(symbol, margin, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update margin. (asynchronously)
     * 
     * @param symbol Contract type which you want update its margin (required)
     * @param margin New margin you want set (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call futuresPositionsChangeMarginAsync(String symbol, String margin, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = futuresPositionsChangeMarginValidateBeforeCall(symbol, margin, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for futuresPositionsClosePnlRecords
     * @param symbol Contract type (required)
     * @param startTime Start timestamp point for result, in second (optional)
     * @param endTime End timestamp point for result, in second (optional)
     * @param execType Execution type (optional)
     * @param page Page. By default, gets first page of data. Maximum of 50 pages (optional)
     * @param limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call futuresPositionsClosePnlRecordsCall(String symbol, Integer startTime, Integer endTime, String execType, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/futures/private/trade/closed-pnl/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_time", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_time", endTime));
        if (execType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exec_type", execType));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call futuresPositionsClosePnlRecordsValidateBeforeCall(String symbol, Integer startTime, Integer endTime, String execType, Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling futuresPositionsClosePnlRecords(Async)");
        }
        

        com.squareup.okhttp.Call call = futuresPositionsClosePnlRecordsCall(symbol, startTime, endTime, execType, page, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get user&#39;s closed profit and loss records
     * 
     * @param symbol Contract type (required)
     * @param startTime Start timestamp point for result, in second (optional)
     * @param endTime End timestamp point for result, in second (optional)
     * @param execType Execution type (optional)
     * @param page Page. By default, gets first page of data. Maximum of 50 pages (optional)
     * @param limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object futuresPositionsClosePnlRecords(String symbol, Integer startTime, Integer endTime, String execType, Integer page, Integer limit) throws ApiException {
        ApiResponse<Object> resp = futuresPositionsClosePnlRecordsWithHttpInfo(symbol, startTime, endTime, execType, page, limit);
        return resp.getData();
    }

    /**
     * Get user&#39;s closed profit and loss records
     * 
     * @param symbol Contract type (required)
     * @param startTime Start timestamp point for result, in second (optional)
     * @param endTime End timestamp point for result, in second (optional)
     * @param execType Execution type (optional)
     * @param page Page. By default, gets first page of data. Maximum of 50 pages (optional)
     * @param limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> futuresPositionsClosePnlRecordsWithHttpInfo(String symbol, Integer startTime, Integer endTime, String execType, Integer page, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = futuresPositionsClosePnlRecordsValidateBeforeCall(symbol, startTime, endTime, execType, page, limit, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get user&#39;s closed profit and loss records (asynchronously)
     * 
     * @param symbol Contract type (required)
     * @param startTime Start timestamp point for result, in second (optional)
     * @param endTime End timestamp point for result, in second (optional)
     * @param execType Execution type (optional)
     * @param page Page. By default, gets first page of data. Maximum of 50 pages (optional)
     * @param limit Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call futuresPositionsClosePnlRecordsAsync(String symbol, Integer startTime, Integer endTime, String execType, Integer page, Integer limit, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = futuresPositionsClosePnlRecordsValidateBeforeCall(symbol, startTime, endTime, execType, page, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for futuresPositionsMyPosition
     * @param symbol Contract type which you want update its margin (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call futuresPositionsMyPositionCall(String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/futures/private/position/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call futuresPositionsMyPositionValidateBeforeCall(String symbol, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = futuresPositionsMyPositionCall(symbol, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get my position list.
     * 
     * @param symbol Contract type which you want update its margin (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object futuresPositionsMyPosition(String symbol) throws ApiException {
        ApiResponse<Object> resp = futuresPositionsMyPositionWithHttpInfo(symbol);
        return resp.getData();
    }

    /**
     * Get my position list.
     * 
     * @param symbol Contract type which you want update its margin (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> futuresPositionsMyPositionWithHttpInfo(String symbol) throws ApiException {
        com.squareup.okhttp.Call call = futuresPositionsMyPositionValidateBeforeCall(symbol, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get my position list. (asynchronously)
     * 
     * @param symbol Contract type which you want update its margin (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call futuresPositionsMyPositionAsync(String symbol, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = futuresPositionsMyPositionValidateBeforeCall(symbol, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for futuresPositionsSaveLeverage
     * @param symbol A symbol which you want change its leverage (required)
     * @param positionIdx Position idx, used to identify positions in different position modes (required)
     * @param buyLeverage New buy leverage you want set (required)
     * @param sellLeverage New sell leverage you want set (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call futuresPositionsSaveLeverageCall(String symbol, Integer positionIdx, String buyLeverage, String sellLeverage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/futures/private/position/leverage/save";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);
        if (positionIdx != null)
        localVarFormParams.put("position_idx", positionIdx);
        if (buyLeverage != null)
        localVarFormParams.put("buy_leverage", buyLeverage);
        if (sellLeverage != null)
        localVarFormParams.put("sell_leverage", sellLeverage);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call futuresPositionsSaveLeverageValidateBeforeCall(String symbol, Integer positionIdx, String buyLeverage, String sellLeverage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling futuresPositionsSaveLeverage(Async)");
        }
        
        // verify the required parameter 'positionIdx' is set
        if (positionIdx == null) {
            throw new ApiException("Missing the required parameter 'positionIdx' when calling futuresPositionsSaveLeverage(Async)");
        }
        
        // verify the required parameter 'buyLeverage' is set
        if (buyLeverage == null) {
            throw new ApiException("Missing the required parameter 'buyLeverage' when calling futuresPositionsSaveLeverage(Async)");
        }
        
        // verify the required parameter 'sellLeverage' is set
        if (sellLeverage == null) {
            throw new ApiException("Missing the required parameter 'sellLeverage' when calling futuresPositionsSaveLeverage(Async)");
        }
        

        com.squareup.okhttp.Call call = futuresPositionsSaveLeverageCall(symbol, positionIdx, buyLeverage, sellLeverage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Change user leverage.
     * 
     * @param symbol A symbol which you want change its leverage (required)
     * @param positionIdx Position idx, used to identify positions in different position modes (required)
     * @param buyLeverage New buy leverage you want set (required)
     * @param sellLeverage New sell leverage you want set (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object futuresPositionsSaveLeverage(String symbol, Integer positionIdx, String buyLeverage, String sellLeverage) throws ApiException {
        ApiResponse<Object> resp = futuresPositionsSaveLeverageWithHttpInfo(symbol, positionIdx, buyLeverage, sellLeverage);
        return resp.getData();
    }

    /**
     * Change user leverage.
     * 
     * @param symbol A symbol which you want change its leverage (required)
     * @param positionIdx Position idx, used to identify positions in different position modes (required)
     * @param buyLeverage New buy leverage you want set (required)
     * @param sellLeverage New sell leverage you want set (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> futuresPositionsSaveLeverageWithHttpInfo(String symbol, Integer positionIdx, String buyLeverage, String sellLeverage) throws ApiException {
        com.squareup.okhttp.Call call = futuresPositionsSaveLeverageValidateBeforeCall(symbol, positionIdx, buyLeverage, sellLeverage, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Change user leverage. (asynchronously)
     * 
     * @param symbol A symbol which you want change its leverage (required)
     * @param positionIdx Position idx, used to identify positions in different position modes (required)
     * @param buyLeverage New buy leverage you want set (required)
     * @param sellLeverage New sell leverage you want set (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call futuresPositionsSaveLeverageAsync(String symbol, Integer positionIdx, String buyLeverage, String sellLeverage, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = futuresPositionsSaveLeverageValidateBeforeCall(symbol, positionIdx, buyLeverage, sellLeverage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for futuresPositionsSwitchIsolated
     * @param symbol A symbol which you want change its leverage (required)
     * @param positionIdx Position idx, used to identify positions in different position modes (required)
     * @param buyLeverage New buy leverage you want set (required)
     * @param sellLeverage New sell leverage you want set (required)
     * @param isIsolated Position margin mode (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call futuresPositionsSwitchIsolatedCall(String symbol, Integer positionIdx, String buyLeverage, String sellLeverage, Boolean isIsolated, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/futures/private/position/switch-isolated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);
        if (positionIdx != null)
        localVarFormParams.put("position_idx", positionIdx);
        if (isIsolated != null)
        localVarFormParams.put("is_isolated", isIsolated);
        if (buyLeverage != null)
        localVarFormParams.put("buy_leverage", buyLeverage);
        if (sellLeverage != null)
        localVarFormParams.put("sell_leverage", sellLeverage);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call futuresPositionsSwitchIsolatedValidateBeforeCall(String symbol, Integer positionIdx, String buyLeverage, String sellLeverage, Boolean isIsolated, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling futuresPositionsSwitchIsolated(Async)");
        }
        
        // verify the required parameter 'positionIdx' is set
        if (positionIdx == null) {
            throw new ApiException("Missing the required parameter 'positionIdx' when calling futuresPositionsSwitchIsolated(Async)");
        }
        
        // verify the required parameter 'buyLeverage' is set
        if (buyLeverage == null) {
            throw new ApiException("Missing the required parameter 'buyLeverage' when calling futuresPositionsSwitchIsolated(Async)");
        }
        
        // verify the required parameter 'sellLeverage' is set
        if (sellLeverage == null) {
            throw new ApiException("Missing the required parameter 'sellLeverage' when calling futuresPositionsSwitchIsolated(Async)");
        }
        

        com.squareup.okhttp.Call call = futuresPositionsSwitchIsolatedCall(symbol, positionIdx, buyLeverage, sellLeverage, isIsolated, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Switch position isolated.
     * 
     * @param symbol A symbol which you want change its leverage (required)
     * @param positionIdx Position idx, used to identify positions in different position modes (required)
     * @param buyLeverage New buy leverage you want set (required)
     * @param sellLeverage New sell leverage you want set (required)
     * @param isIsolated Position margin mode (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object futuresPositionsSwitchIsolated(String symbol, Integer positionIdx, String buyLeverage, String sellLeverage, Boolean isIsolated) throws ApiException {
        ApiResponse<Object> resp = futuresPositionsSwitchIsolatedWithHttpInfo(symbol, positionIdx, buyLeverage, sellLeverage, isIsolated);
        return resp.getData();
    }

    /**
     * Switch position isolated.
     * 
     * @param symbol A symbol which you want change its leverage (required)
     * @param positionIdx Position idx, used to identify positions in different position modes (required)
     * @param buyLeverage New buy leverage you want set (required)
     * @param sellLeverage New sell leverage you want set (required)
     * @param isIsolated Position margin mode (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> futuresPositionsSwitchIsolatedWithHttpInfo(String symbol, Integer positionIdx, String buyLeverage, String sellLeverage, Boolean isIsolated) throws ApiException {
        com.squareup.okhttp.Call call = futuresPositionsSwitchIsolatedValidateBeforeCall(symbol, positionIdx, buyLeverage, sellLeverage, isIsolated, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Switch position isolated. (asynchronously)
     * 
     * @param symbol A symbol which you want change its leverage (required)
     * @param positionIdx Position idx, used to identify positions in different position modes (required)
     * @param buyLeverage New buy leverage you want set (required)
     * @param sellLeverage New sell leverage you want set (required)
     * @param isIsolated Position margin mode (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call futuresPositionsSwitchIsolatedAsync(String symbol, Integer positionIdx, String buyLeverage, String sellLeverage, Boolean isIsolated, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = futuresPositionsSwitchIsolatedValidateBeforeCall(symbol, positionIdx, buyLeverage, sellLeverage, isIsolated, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for futuresPositionsSwitchPositionMode
     * @param symbol A symbol which you want change its leverage (required)
     * @param mode Position Mode. 0: One-Way Mode; 3: Hedge Mode (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call futuresPositionsSwitchPositionModeCall(String symbol, Integer mode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/futures/private/position/switch-mode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);
        if (mode != null)
        localVarFormParams.put("mode", mode);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call futuresPositionsSwitchPositionModeValidateBeforeCall(String symbol, Integer mode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling futuresPositionsSwitchPositionMode(Async)");
        }
        
        // verify the required parameter 'mode' is set
        if (mode == null) {
            throw new ApiException("Missing the required parameter 'mode' when calling futuresPositionsSwitchPositionMode(Async)");
        }
        

        com.squareup.okhttp.Call call = futuresPositionsSwitchPositionModeCall(symbol, mode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Switch position mode.
     * 
     * @param symbol A symbol which you want change its leverage (required)
     * @param mode Position Mode. 0: One-Way Mode; 3: Hedge Mode (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object futuresPositionsSwitchPositionMode(String symbol, Integer mode) throws ApiException {
        ApiResponse<Object> resp = futuresPositionsSwitchPositionModeWithHttpInfo(symbol, mode);
        return resp.getData();
    }

    /**
     * Switch position mode.
     * 
     * @param symbol A symbol which you want change its leverage (required)
     * @param mode Position Mode. 0: One-Way Mode; 3: Hedge Mode (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> futuresPositionsSwitchPositionModeWithHttpInfo(String symbol, Integer mode) throws ApiException {
        com.squareup.okhttp.Call call = futuresPositionsSwitchPositionModeValidateBeforeCall(symbol, mode, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Switch position mode. (asynchronously)
     * 
     * @param symbol A symbol which you want change its leverage (required)
     * @param mode Position Mode. 0: One-Way Mode; 3: Hedge Mode (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call futuresPositionsSwitchPositionModeAsync(String symbol, Integer mode, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = futuresPositionsSwitchPositionModeValidateBeforeCall(symbol, mode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for futuresPositionsTradingStop
     * @param symbol Contract type (required)
     * @param takeProfit Not less than 0, 0 means cancel TP (optional)
     * @param stopLoss Not less than 0, 0 means cancel SL (optional)
     * @param trailingStop Not less than 0, 0 means cancel TS (optional)
     * @param newTrailingActive Trailing stop trigger price. Trailing stops are triggered only when the price reaches the specified price. Trailing stops are triggered immediately by default. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call futuresPositionsTradingStopCall(String symbol, String takeProfit, String stopLoss, String trailingStop, String newTrailingActive, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/futures/private/position/trading-stop";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (symbol != null)
        localVarFormParams.put("symbol", symbol);
        if (takeProfit != null)
        localVarFormParams.put("take_profit", takeProfit);
        if (stopLoss != null)
        localVarFormParams.put("stop_loss", stopLoss);
        if (trailingStop != null)
        localVarFormParams.put("trailing_stop", trailingStop);
        if (newTrailingActive != null)
        localVarFormParams.put("new_trailing_active", newTrailingActive);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "apiSignature", "timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call futuresPositionsTradingStopValidateBeforeCall(String symbol, String takeProfit, String stopLoss, String trailingStop, String newTrailingActive, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling futuresPositionsTradingStop(Async)");
        }
        

        com.squareup.okhttp.Call call = futuresPositionsTradingStopCall(symbol, takeProfit, stopLoss, trailingStop, newTrailingActive, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set Trading-Stop Condition.
     * 
     * @param symbol Contract type (required)
     * @param takeProfit Not less than 0, 0 means cancel TP (optional)
     * @param stopLoss Not less than 0, 0 means cancel SL (optional)
     * @param trailingStop Not less than 0, 0 means cancel TS (optional)
     * @param newTrailingActive Trailing stop trigger price. Trailing stops are triggered only when the price reaches the specified price. Trailing stops are triggered immediately by default. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object futuresPositionsTradingStop(String symbol, String takeProfit, String stopLoss, String trailingStop, String newTrailingActive) throws ApiException {
        ApiResponse<Object> resp = futuresPositionsTradingStopWithHttpInfo(symbol, takeProfit, stopLoss, trailingStop, newTrailingActive);
        return resp.getData();
    }

    /**
     * Set Trading-Stop Condition.
     * 
     * @param symbol Contract type (required)
     * @param takeProfit Not less than 0, 0 means cancel TP (optional)
     * @param stopLoss Not less than 0, 0 means cancel SL (optional)
     * @param trailingStop Not less than 0, 0 means cancel TS (optional)
     * @param newTrailingActive Trailing stop trigger price. Trailing stops are triggered only when the price reaches the specified price. Trailing stops are triggered immediately by default. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> futuresPositionsTradingStopWithHttpInfo(String symbol, String takeProfit, String stopLoss, String trailingStop, String newTrailingActive) throws ApiException {
        com.squareup.okhttp.Call call = futuresPositionsTradingStopValidateBeforeCall(symbol, takeProfit, stopLoss, trailingStop, newTrailingActive, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set Trading-Stop Condition. (asynchronously)
     * 
     * @param symbol Contract type (required)
     * @param takeProfit Not less than 0, 0 means cancel TP (optional)
     * @param stopLoss Not less than 0, 0 means cancel SL (optional)
     * @param trailingStop Not less than 0, 0 means cancel TS (optional)
     * @param newTrailingActive Trailing stop trigger price. Trailing stops are triggered only when the price reaches the specified price. Trailing stops are triggered immediately by default. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call futuresPositionsTradingStopAsync(String symbol, String takeProfit, String stopLoss, String trailingStop, String newTrailingActive, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = futuresPositionsTradingStopValidateBeforeCall(symbol, takeProfit, stopLoss, trailingStop, newTrailingActive, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
