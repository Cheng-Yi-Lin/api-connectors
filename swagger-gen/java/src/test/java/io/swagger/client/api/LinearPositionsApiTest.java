/*
 * Bybit API
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LinearPositionsApi
 */
@Ignore
public class LinearPositionsApiTest {

    private final LinearPositionsApi api = new LinearPositionsApi();

    
    /**
     * Add/Reduce Margin
     *
     * This will Add/Reduce Margin
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void linearPositionsChangeMarginTest() throws ApiException {
        String symbol = null;
        String side = null;
        Double margin = null;
        Object response = api.linearPositionsChangeMargin(symbol, side, margin);

        // TODO: test validations
    }
    
    /**
     * Get user&#39;s closed profit and loss records.
     *
     * This will get user&#39;s closed profit and loss records.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void linearPositionsClosePnlRecordsTest() throws ApiException {
        String symbol = null;
        Long startTime = null;
        Long endTime = null;
        String execType = null;
        Long page = null;
        Long limit = null;
        Object response = api.linearPositionsClosePnlRecords(symbol, startTime, endTime, execType, page, limit);

        // TODO: test validations
    }
    
    /**
     * Get my position list.
     *
     * This will get my position list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void linearPositionsMyPositionTest() throws ApiException {
        String symbol = null;
        Object response = api.linearPositionsMyPosition(symbol);

        // TODO: test validations
    }
    
    /**
     * Set leverage
     *
     * This will Set Leverage
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void linearPositionsSaveLeverageTest() throws ApiException {
        String symbol = null;
        Double buyLeverage = null;
        Double sellLeverage = null;
        Object response = api.linearPositionsSaveLeverage(symbol, buyLeverage, sellLeverage);

        // TODO: test validations
    }
    
    /**
     * Set auto add margin
     *
     * This will Set auto add margin
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void linearPositionsSetAutoAddMarginTest() throws ApiException {
        String symbol = null;
        String side = null;
        Boolean autoAddMargin = null;
        Object response = api.linearPositionsSetAutoAddMargin(symbol, side, autoAddMargin);

        // TODO: test validations
    }
    
    /**
     * Switch isolated
     *
     * This will switch isolated
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void linearPositionsSwitchIsolatedTest() throws ApiException {
        String symbol = null;
        Boolean isIsolated = null;
        Double buyLeverage = null;
        Double sellLeverage = null;
        Object response = api.linearPositionsSwitchIsolated(symbol, isIsolated, buyLeverage, sellLeverage);

        // TODO: test validations
    }
    
    /**
     * Switch Mode
     *
     * This will Switch TP/SL Mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void linearPositionsSwitchModeTest() throws ApiException {
        String symbol = null;
        String tpSlMode = null;
        Object response = api.linearPositionsSwitchMode(symbol, tpSlMode);

        // TODO: test validations
    }
    
    /**
     * Set tradingStop
     *
     * This will set tradingStop
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void linearPositionsTradingStopTest() throws ApiException {
        String symbol = null;
        String side = null;
        Double takeProfit = null;
        Double stopLoss = null;
        Double trailingStop = null;
        String tpTriggerBy = null;
        String slTriggerBy = null;
        Double slSize = null;
        Double tpSize = null;
        Object response = api.linearPositionsTradingStop(symbol, side, takeProfit, stopLoss, trailingStop, tpTriggerBy, slTriggerBy, slSize, tpSize);

        // TODO: test validations
    }
    
}
